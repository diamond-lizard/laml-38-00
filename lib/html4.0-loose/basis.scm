; This file is generated by the program tools/tools/html-mirroring-from-dtd/laml-mirror-via-dtd.scm. Do not edit!

;;;; This an accurate mirror of HTML 4.0 (loose) on basic form. A basic form has a rigid syntactic composition:<font size = 3><pre>   (html4:tag contents . attributes)</pre></font><p>The type of contents must be string, and the attributes must be alternating symbol attribute names and string attribute values.<p>Here is a concrete example: <font size = 3><pre>   (html4:a "AAU CS" 'href "www.cs.auc.dk")</pre></font>Use the basic form when you write programs or abstractions, which emit HTML. Each function in this file mirrors and generates an HTML tag. If the boolean variable <kbd>check-html-attributes?</kbd> is true the functions check the attributes of the tag against the attribute definitions in the document type definition. <p>CSS inline style attributes can be given side by side with the HTML attributes. A CSS attribute is prefixed with 'css:'. Here is an example: <font size = 3><pre>   (html4:a "AAU CS" 'href "www.cs.auc.dk" 'css:text-decoration "none" 'css:background-color "yellow")</pre></font><p>The HTML mirror functions emit non-pretty printed HTML code. If you want pretty printed HTML you can use the <a href = "../../../tools/xml-html-support/man/html-support.html">HTML pretty printer</a>, which is part of the LAML software package. See also the <a href = "../../../man/laml.html#html-pp">html-pp</a> procedure. Notice that pretty printing may be quite expensive compared with the generation as such.<p>This library requires the general library.<p>This library provides links to the <a href = "../../../html-doc/html401/cover.html">W3 document which defines the HTML tags</a>. The underlying WWW pages are supplied as part of the LAML software bundle.<p>See also the <a href = "surface.html">surface form library</a> of the mirror and the HTML <a href = "convenience.html">convenience library</a>.<p><b><em>This library is obsolete for development of new stuff</em></b>. Use a validating mirror instead!

(define xml-syntax? #f)

;;; Document type definition. 
;;; This section contains <kbd>document-type-declaration</kbd>, that returns the appropriate
;;; document type declaration of this mirror.

;; Return a document type declaration of this mirror.
;; Even if announced as HTML4.0 loose, it is HTML4.01 transitional.
(define (document-type-declaration)
  "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
        \"http://www.w3.org/TR/html4/loose.dtd\">")


;;; Configuration part.

;; A boolean variable which controls the checking of tag attributes.
;; If true, check the tag (element) attributes against the attributes as defined in the DTD file.
;; The default value is true (do check attributes).
(define check-html-attributes? #t)

(define (display-html-warning message)
  (display (string-append "HTML Warning: " message)) (newline))

(define check-error display-html-warning)


; --------------------------------------------------------------------------------------------------------------------------------
; Tag functions.

; Return a balanced html tag of both start and end tag, based on the parameters name (tag name) contents and attributes.
; The attributes is supposed to be a property list of symbol string pairs.
; The 'i' in the function name means 'internal'.
(define (itag name contents attributes)
 (if (null? attributes)
  (string-append "<" (as-string name) ">"
                  (as-string contents)
                  "</" name ">")
  (let* ((attributes (linearize-attributes attributes))
         (html-attributes (car attributes))
         (css-attributes (cdr attributes)))
   (string-append "<" (as-string name) " " html-attributes
                  (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
                   ">"
                  (as-string contents)
                  "</" name ">"))))

; Return a single tag of name with attributes.
; The attributes is supposed to be a property list of symbol string pairs.
; The 'i' in the function name means 'internal'.
(define (itag1 name attributes)
 (if (null? attributes)
	 (string-append "<" (as-string name) (if xml-syntax? "/>" ">"))
	 (let* ((attributes (linearize-attributes attributes))
		(html-attributes (car attributes))
		(css-attributes (cdr attributes)))
	   (string-append "<" (as-string name) " " html-attributes 
			  (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
			  (if xml-syntax? "/>" ">")
			  ))))

; Individual tag functions, which could be used above if we wanted to:

; Return an HTML start tag.
; The parameter kind is a string or a symbol.
; attributes is a lisp property list of key-symbol value pairs, including the possibility of CSS attributes on the form css:attr-name.
(define (start-tag kind . attributes)
  (if (null? attributes) 
      (string-append "<" (as-string kind) ">")
      (let* ((attributes (linearize-attributes attributes))
              (html-attributes (car attributes))
              (css-attributes (cdr attributes)))
         (string-append "<" (as-string kind) " " html-attributes  
                        (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
                        " >"))))


; Retun an HTML end tag.
; The parameter kind is a string or a symbol.
(define (end-tag kind)
  (string-append "</" (as-string kind) ">"))

; --------------------------------------------------------------------------------------------------------------------------------
; Attribute linearization. 

; convert the Lisp property list attr-list to a string conforming
; to the rules of an html attribute list
; (define (linearize-attributes attr-list)
;   (string-append  (linearize-attributes-1 (reverse attr-list) "" (length attr-list))))
; 
; (define (linearize-attributes-1 attr-list res-string lgt)
;   (cond ((= lgt  0 ) res-string)
;         ((>= lgt 2) (linearize-attributes-1 
;                        (cddr attr-list)
;                        (string-append (linearize-attribute-pair (car attr-list) (cadr attr-list)) " " res-string)
;                        (- lgt 2)))
;         ((< lgt 2) (error "Linearize-attributes-1: Called with an odd length attribute list. Not a Lisp property list"))))
; 
; (define (linearize-attribute-pair val attr)
;   (string-append (as-string attr) " = " (string-it (as-string val))))

; Return a pair of strings: The head is the string represeting html attributes.
; The tail is the string representing the css attributes (to go into an HTML style attribute).
(define (linearize-attributes attr-list)
 (let ((lgt (length attr-list)))
  ; catch a typical error here: non-symbol key, probably old-fashioned calling convention from html-v1.
  (if (and (>= lgt 1) (not (symbol? (car attr-list))))
      (error (string-append "linearize-attributes: Non-symbol key encountered: " (as-string (car attr-list)) " in attribute list " (as-string attr-list) ". Maybe conversion problem from html-v1.")))
  (linearize-attributes-1 (reverse attr-list) "" "" lgt attr-list)))

; Internal helping operation to linearize-attributes. The parameter whole-attr-list is for error messaging purposes
(define (linearize-attributes-1 attr-list html-attr-string css-attr-string lgt whole-attr-list)
  (cond ((= lgt  0 ) (cons (strip-trailing-characters (list #\space) html-attr-string) css-attr-string))
        ((>= lgt 2) (let* ((val (car attr-list))   ; val and key are reversed at this time
                           (key (cadr attr-list))
                           (css-key (css-key? key))
                         )
                     (cond (css-key                  ; CSS attribute
                              (linearize-attributes-1 
                                (cddr attr-list)
                                html-attr-string 
                                (string-append (linearize-attribute-pair-css val css-key) ";" css-attr-string)
                                (- lgt 2)
                                whole-attr-list))
                           (else                            ; HTML attribute
                             (linearize-attributes-1 
                               (cddr attr-list)
                               (string-append (linearize-attribute-pair-html val key) " " html-attr-string)
                               css-attr-string
                               (- lgt 2)
                               whole-attr-list)))))
        ((< lgt 2) (error (string-append "Linearize-attributes-1: Called with an odd length attribute list. Not a Lisp property list: " (as-string whole-attr-list))))))

; Return whether key is a css-key, for instance a key like css:k or CSS:k
; A true value is the key propper, such as k (as a string).
(define (css-key? key)
  (let* ((key-str (symbol->string key))
         (lgt (string-length key-str)))
   (if
    (and (>= lgt 4) 
         (or (eqv? (string-ref key-str 0) #\c) (eqv? (string-ref key-str 0) #\C))
         (or (eqv? (string-ref key-str 1) #\s) (eqv? (string-ref key-str 1) #\S))
         (or (eqv? (string-ref key-str 2) #\s) (eqv? (string-ref key-str 2) #\S))
         (eqv? (string-ref key-str 3) #\:))
    (substring key-str 4 lgt)
    #f)))

(define (linearize-attribute-pair-html val key)
  (string-append (as-string key) " = " (string-it (as-string val))))

(define (linearize-attribute-pair-css val key)
  (string-append key ": " (as-string val)))

; --------------------------------------------------------------------------------------------------------------------------------
; Attribute checking.  

; Attribute tripple selectors
(define att-name (make-selector-function 1))
(define att-type (make-selector-function 2))
(define att-status (make-selector-function 3))

; Check the attributes (first par) in the calling form against the attribute definitions taken from the DTD file (second par).
; The first parameter, attribute, is the attributes of the calling form, on property list form:
; (a1 v1 ... an vn). ai is a symbol and vi is a string.
; The second parameter dtd-attribute-definition is the attributes as defined
; in the dtd for the element in question. The third parameter number-of-req-attributes is the number
; of required attributes in dtd-attr-definitions. The fourth parameter, tag-name, is the
; name of the enclosing tag. dtd-attribute-definition is a list of 
; triples (attr-name attr-type require-status). attr-name is a string, attr-type is
; a string or a list of strings (possibilities), and require-status is a string
; such as "#IMPLIED" or "#REQUIRED"
(define (check-attributes! attributes dtd-attribute-definition number-of-req-attributes tag-name)
 (if (even? (length attributes))  ; if not, we report the error elsewhere
  (let ((required-attribute-names 
           (map (compose as-symbol car) (front-sublist dtd-attribute-definition number-of-req-attributes)))
        (dtd-attribute-names (map (compose as-symbol car) dtd-attribute-definition))
        (attribute-names (if (null? attributes) '() (every-second-element attributes)))
        (attribute-values (if (null? attributes) '() (every-second-element (cdr attributes))))
       )
    (check-required-attributes! attribute-names required-attribute-names tag-name)
    (check-for-attribute-existence! attribute-names dtd-attribute-names tag-name)
    (check-for-attribute-types! attribute-names attribute-values dtd-attribute-definition tag-name)
)))


; the symbols in required-attribute-names must all be found as attribute names in the property list attributes
; if not an error is issued.
; tag-name is the name of the enclosing tag
(define (check-required-attributes! attribute-names required-attribute-names tag-name)
  (if (not (null? required-attribute-names))
      (begin
         (check-one-required-attribute! attribute-names (car required-attribute-names) tag-name)
         (check-required-attributes! attribute-names (cdr required-attribute-names) tag-name))))

(define (check-one-required-attribute! attribute-names required-attribute tag-name)
  (if (not (memq required-attribute attribute-names))
      (check-error (string-append "The required attribute " (as-string required-attribute) " not found in the tag " tag-name))))
  
; Are all names in attribute-names found in the list of names dtd-attribute-names
; tag-name is the name of the enclosing tag
; CSS attributes should not be checked for existence. 
(define (check-for-attribute-existence! attribute-names dtd-attribute-names tag-name)
   (if (not (null? attribute-names))
       (begin
         (check-one-attribute-existence! (car attribute-names) dtd-attribute-names tag-name)
         (check-for-attribute-existence! (cdr attribute-names) dtd-attribute-names tag-name))))

(define (check-one-attribute-existence! name dtd-attribute-names tag-name)
  (if (and (not (css-key? name)) (not (memq name dtd-attribute-names)))
      (check-error (string-append "The attribute " (as-string name) " is not valid in the tag "  tag-name))))

; Check that the attributes (as splitted into attribute-names and attribute-values - list of equal lengths)
; have correct types accoring the dtd-attribute-names.
(define (check-for-attribute-types! attribute-names attribute-values dtd-attributes tag-name)
  (if (not (null? attribute-names))
      (begin
         (check-one-attribute-type! (car attribute-names) (car attribute-values) dtd-attributes tag-name)
         (check-for-attribute-types! (cdr attribute-names) (cdr attribute-values) dtd-attributes tag-name))))

(define (check-one-attribute-type! name value dtd-attributes tag-name)
  (let ((attribute-descriptor 
          (find-in-list (lambda (tripple) (eq? (as-symbol (car tripple)) name)) dtd-attributes)))
    (if attribute-descriptor
        (check-attribute-value! name value (att-type attribute-descriptor) tag-name))))

; is value a 'member of' attribute-type. value is a string.
; Attribute is a string such as "NUMBER" "CDATA" or a list of strings, in which case value must be a member.
(define (check-attribute-value! name value attribute-type tag-name)
  (cond ((list? attribute-type) 
            (if (not (member value attribute-type))
                (check-error (string-append "The attribute value " (string-it value) " of the attribute "
                                            (as-string name) " in the tag "  tag-name " is not valid"))))
        ((equal? "NUMBER" attribute-type)
            (if (not (numeric-string? value))
                (check-error (string-append "The attribute value " (string-it value) " should be numeric (but enclosed in string quotes)"))))
        (else 'incomplete)  ; not implemented yet
  ))



; --------------------------------------------------------------------------------------------------------------------------------
; Forward compatibility:

; No real HTML rendering in this mirror - the mirror expressions return HTML directly
(define render id-1)

; Is x recognized as an abstract syntax tree, as supported by more advanced mirrors
(define (ast? x)
  (and (pair? x) (eq? (car x) 'ast)
       (list? x) (= 7 (length x))))









;;; The HTML basic mirror functions

;; The LAML mirror of the HTML 4.0 (loose) <b>HTML</b> tag element, which can be applied as a single tag via a #f contents parameter (document root element ). <br>
;; .parameter contents The textual contents of the HTML element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "html" "surface.html#html"
;; .reference "HTML documentation" "HTML" "../../../html-doc/html401/struct/global.html#edef-HTML"
;; .misc No required attributes. <p>Optional attributes: lang, dir, version. <br>
(define (html4:html contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("version" "CDATA" "#FIXED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "html")) (if (not contents) (itag1 "html" attributes) (itag "html" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>NOSCRIPT</b> double tag element (alternate content container for non script-based rendering ). <br>
;; .parameter contents The textual contents of the NOSCRIPT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "noscript" "surface.html#noscript"
;; .reference "HTML documentation" "NOSCRIPT" "../../../html-doc/html401/interact/scripts.html#edef-NOSCRIPT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:noscript contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "noscript")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "noscript" " - " "We embed 'false' in a double tag"))) (itag "noscript" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SCRIPT</b> double tag element (script statements ). <br>
;; .parameter contents The textual contents of the SCRIPT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "script" "surface.html#script"
;; .reference "HTML documentation" "SCRIPT" "../../../html-doc/html401/interact/scripts.html#edef-SCRIPT"
;; .misc Required attributes: type. <p>Optional attributes: charset, language, src, defer, event, for. <br>
(define (html4:script contents  . attributes) (let ((attributes-of-elements (quote (("type" "CDATA" "#REQUIRED") ("charset" "CDATA" "#IMPLIED") ("language" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("defer" ("defer") "#IMPLIED") ("event" "CDATA" "#IMPLIED") ("for" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "script")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "script" " - " "We embed 'false' in a double tag"))) (itag "script" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>STYLE</b> double tag element (style info ). <br>
;; .parameter contents The textual contents of the STYLE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "style" "surface.html#style"
;; .reference "HTML documentation" "STYLE" "../../../html-doc/html401/present/styles.html#edef-STYLE"
;; .misc Required attributes: type. <p>Optional attributes: lang, dir, media, title. <br>
(define (html4:style contents  . attributes) (let ((attributes-of-elements (quote (("type" "CDATA" "#REQUIRED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("media" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "style")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "style" " - " "We embed 'false' in a double tag"))) (itag "style" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>META</b> single tag element (generic metainformation ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "meta" "surface.html#meta"
;; .reference "HTML documentation" "META" "../../../html-doc/html401/struct/global.html#edef-META"
;; .misc Required attributes: content. <p>Optional attributes: lang, dir, http-equiv, name, scheme. <br>
(define (html4:meta  . attributes) (let ((attributes-of-elements (quote (("content" "CDATA" "#REQUIRED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("http-equiv" "NAME" "#IMPLIED") ("name" "NAME" "#IMPLIED") ("scheme" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "meta")) (itag1 "meta" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BASE</b> single tag element (document base URI ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "base" "surface.html#base"
;; .reference "HTML documentation" "BASE" "../../../html-doc/html401/struct/links.html#edef-BASE"
;; .misc No required attributes. <p>Optional attributes: href, target. <br>
(define (html4:base  . attributes) (let ((attributes-of-elements (quote (("href" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "base")) (itag1 "base" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>ISINDEX</b> single tag element (single line prompt ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "isindex" "surface.html#isindex"
;; .reference "HTML documentation" "ISINDEX" "../../../html-doc/html401/interact/forms.html#edef-ISINDEX"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, prompt. <br>
(define (html4:isindex  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("prompt" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "isindex")) (itag1 "isindex" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>TITLE</b> double tag element (document title ). <br>
;; .parameter contents The textual contents of the TITLE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "title" "surface.html#title"
;; .reference "HTML documentation" "TITLE" "../../../html-doc/html401/struct/global.html#edef-TITLE"
;; .misc No required attributes. <p>Optional attributes: lang, dir. <br>
(define (html4:title contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "title")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "title" " - " "We embed 'false' in a double tag"))) (itag "title" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>HEAD</b> tag element, which can be applied as a single tag via a #f contents parameter (document head ). <br>
;; .parameter contents The textual contents of the HEAD element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "head" "surface.html#head"
;; .reference "HTML documentation" "HEAD" "../../../html-doc/html401/struct/global.html#edef-HEAD"
;; .misc No required attributes. <p>Optional attributes: lang, dir, profile. <br>
(define (html4:head contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("profile" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "head")) (if (not contents) (itag1 "head" attributes) (itag "head" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>NOFRAMES</b> double tag element (alternate content container for non frame-based rendering ). <br>
;; .parameter contents The textual contents of the NOFRAMES element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "noframes" "surface.html#noframes"
;; .reference "HTML documentation" "NOFRAMES" "../../../html-doc/html401/present/frames.html#edef-NOFRAMES"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:noframes contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "noframes")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "noframes" " - " "We embed 'false' in a double tag"))) (itag "noframes" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>IFRAME</b> double tag element (inline subwindow ). <br>
;; .parameter contents The textual contents of the IFRAME element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "iframe" "surface.html#iframe"
;; .reference "HTML documentation" "IFRAME" "../../../html-doc/html401/present/frames.html#edef-IFRAME"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, longdesc, name, src, frameborder, marginwidth, marginheight, scrolling, align, height, width. <br>
(define (html4:iframe contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("frameborder" ("1" "0") "1") ("marginwidth" "CDATA" "#IMPLIED") ("marginheight" "CDATA" "#IMPLIED") ("scrolling" ("yes" "no" "auto") "auto") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "iframe")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "iframe" " - " "We embed 'false' in a double tag"))) (itag "iframe" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>FRAME</b> single tag element (subwindow ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "frame" "surface.html#frame"
;; .reference "HTML documentation" "FRAME" "../../../html-doc/html401/present/frames.html#edef-FRAME"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, longdesc, name, src, frameborder, marginwidth, marginheight, noresize, scrolling. <br>
(define (html4:frame  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("frameborder" ("1" "0") "1") ("marginwidth" "CDATA" "#IMPLIED") ("marginheight" "CDATA" "#IMPLIED") ("noresize" ("noresize") "#IMPLIED") ("scrolling" ("yes" "no" "auto") "auto")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "frame")) (itag1 "frame" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>FRAMESET</b> double tag element (window subdivision). <br>
;; .parameter contents The textual contents of the FRAMESET element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "frameset" "surface.html#frameset"
;; .reference "HTML documentation" "FRAMESET" "../../../html-doc/html401/present/frames.html#edef-FRAMESET"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, rows, cols, onload, onunload, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:frameset contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("rows" "CDATA" "#IMPLIED") ("cols" "CDATA" "#IMPLIED") ("onload" "CDATA" "#IMPLIED") ("onunload" "CDATA" "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "frameset")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "frameset" " - " "We embed 'false' in a double tag"))) (itag "frameset" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>TH</b> tag element, which can be applied as a single tag via a #f contents parameter (table header cell, table data cell). <br>
;; .parameter contents The textual contents of the TH element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "th" "surface.html#th"
;; .reference "HTML documentation" "TH" "../../../html-doc/html401/struct/tables.html#edef-TH"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, abbr, axis, headers, scope, rowspan, colspan, align, char, charoff, valign, nowrap, bgcolor, width, height. <br>
(define (html4:th contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("abbr" "CDATA" "#IMPLIED") ("axis" "CDATA" "#IMPLIED") ("headers" "IDREFS" "#IMPLIED") ("scope" ("row" "col" "rowgroup" "colgroup") "#IMPLIED") ("rowspan" "NUMBER" "1") ("colspan" "NUMBER" "1") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("nowrap" ("nowrap") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "th")) (if (not contents) (itag1 "th" attributes) (itag "th" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>TD</b> tag element, which can be applied as a single tag via a #f contents parameter (table header cell, table data cell). <br>
;; .parameter contents The textual contents of the TD element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "td" "surface.html#td"
;; .reference "HTML documentation" "TD" "../../../html-doc/html401/struct/tables.html#edef-TD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, abbr, axis, headers, scope, rowspan, colspan, align, char, charoff, valign, nowrap, bgcolor, width, height. <br>
(define (html4:td contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("abbr" "CDATA" "#IMPLIED") ("axis" "CDATA" "#IMPLIED") ("headers" "IDREFS" "#IMPLIED") ("scope" ("row" "col" "rowgroup" "colgroup") "#IMPLIED") ("rowspan" "NUMBER" "1") ("colspan" "NUMBER" "1") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("nowrap" ("nowrap") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "td")) (if (not contents) (itag1 "td" attributes) (itag "td" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>TR</b> tag element, which can be applied as a single tag via a #f contents parameter (table row ). <br>
;; .parameter contents The textual contents of the TR element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "tr" "surface.html#tr"
;; .reference "HTML documentation" "TR" "../../../html-doc/html401/struct/tables.html#edef-TR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign, bgcolor. <br>
(define (html4:tr contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tr")) (if (not contents) (itag1 "tr" attributes) (itag "tr" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>COL</b> single tag element (table column ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "col" "surface.html#col"
;; .reference "HTML documentation" "COL" "../../../html-doc/html401/struct/tables.html#edef-COL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, span, width, align, char, charoff, valign. <br>
(define (html4:col  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("span" "NUMBER" "1") ("width" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "col")) (itag1 "col" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>COLGROUP</b> tag element, which can be applied as a single tag via a #f contents parameter (table column group ). <br>
;; .parameter contents The textual contents of the COLGROUP element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "colgroup" "surface.html#colgroup"
;; .reference "HTML documentation" "COLGROUP" "../../../html-doc/html401/struct/tables.html#edef-COLGROUP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, span, width, align, char, charoff, valign. <br>
(define (html4:colgroup contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("span" "NUMBER" "1") ("width" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "colgroup")) (if (not contents) (itag1 "colgroup" attributes) (itag "colgroup" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>TBODY</b> tag element, which can be applied as a single tag via a #f contents parameter (table body ). <br>
;; .parameter contents The textual contents of the TBODY element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "tbody" "surface.html#tbody"
;; .reference "HTML documentation" "TBODY" "../../../html-doc/html401/struct/tables.html#edef-TBODY"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br>
(define (html4:tbody contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tbody")) (if (not contents) (itag1 "tbody" attributes) (itag "tbody" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>TFOOT</b> tag element, which can be applied as a single tag via a #f contents parameter (table footer ). <br>
;; .parameter contents The textual contents of the TFOOT element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "tfoot" "surface.html#tfoot"
;; .reference "HTML documentation" "TFOOT" "../../../html-doc/html401/struct/tables.html#edef-TFOOT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br>
(define (html4:tfoot contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tfoot")) (if (not contents) (itag1 "tfoot" attributes) (itag "tfoot" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>THEAD</b> tag element, which can be applied as a single tag via a #f contents parameter (table header ). <br>
;; .parameter contents The textual contents of the THEAD element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "thead" "surface.html#thead"
;; .reference "HTML documentation" "THEAD" "../../../html-doc/html401/struct/tables.html#edef-THEAD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br>
(define (html4:thead contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "thead")) (if (not contents) (itag1 "thead" attributes) (itag "thead" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>CAPTION</b> double tag element (table caption ). <br>
;; .parameter contents The textual contents of the CAPTION element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "caption" "surface.html#caption"
;; .reference "HTML documentation" "CAPTION" "../../../html-doc/html401/struct/tables.html#edef-CAPTION"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:caption contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("top" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "caption")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "caption" " - " "We embed 'false' in a double tag"))) (itag "caption" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>TABLE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the TABLE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "table" "surface.html#table"
;; .reference "HTML documentation" "TABLE" "../../../html-doc/html401/struct/tables.html#edef-TABLE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, summary, width, border, frame, rules, cellspacing, cellpadding, align, bgcolor, datapagesize. <br>
(define (html4:table contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("summary" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("frame" ("void" "above" "below" "hsides" "lhs" "rhs" "vsides" "box" "border") "#IMPLIED") ("rules" ("none" "groups" "rows" "cols" "all") "#IMPLIED") ("cellspacing" "CDATA" "#IMPLIED") ("cellpadding" "CDATA" "#IMPLIED") ("align" ("left" "center" "right") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("datapagesize" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "table")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "table" " - " "We embed 'false' in a double tag"))) (itag "table" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BUTTON</b> double tag element (push button ). <br>
;; .parameter contents The textual contents of the BUTTON element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "button" "surface.html#button"
;; .reference "HTML documentation" "BUTTON" "../../../html-doc/html401/interact/forms.html#edef-BUTTON"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, value, type, disabled, tabindex, accesskey, onfocus, onblur. <br>
(define (html4:button contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("type" ("button" "submit" "reset") "submit") ("disabled" ("disabled") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "button")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "button" " - " "We embed 'false' in a double tag"))) (itag "button" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>LEGEND</b> double tag element (fieldset legend ). <br>
;; .parameter contents The textual contents of the LEGEND element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "legend" "surface.html#legend"
;; .reference "HTML documentation" "LEGEND" "../../../html-doc/html401/interact/forms.html#edef-LEGEND"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, accesskey, align. <br>
(define (html4:legend contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("align" ("top" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "legend")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "legend" " - " "We embed 'false' in a double tag"))) (itag "legend" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>FIELDSET</b> double tag element (form control group ). <br>
;; .parameter contents The textual contents of the FIELDSET element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "fieldset" "surface.html#fieldset"
;; .reference "HTML documentation" "FIELDSET" "../../../html-doc/html401/interact/forms.html#edef-FIELDSET"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:fieldset contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "fieldset")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "fieldset" " - " "We embed 'false' in a double tag"))) (itag "fieldset" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>TEXTAREA</b> double tag element (multi-line text field ). <br>
;; .parameter contents The textual contents of the TEXTAREA element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "textarea" "surface.html#textarea"
;; .reference "HTML documentation" "TEXTAREA" "../../../html-doc/html401/interact/forms.html#edef-TEXTAREA"
;; .misc Required attributes: rows, cols. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, disabled, readonly, tabindex, accesskey, onfocus, onblur, onselect, onchange. <br>
(define (html4:textarea contents  . attributes) (let ((attributes-of-elements (quote (("rows" "NUMBER" "#REQUIRED") ("cols" "NUMBER" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("readonly" ("readonly") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onselect" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "textarea")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "textarea" " - " "We embed 'false' in a double tag"))) (itag "textarea" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>OPTION</b> tag element, which can be applied as a single tag via a #f contents parameter (selectable choice ). <br>
;; .parameter contents The textual contents of the OPTION element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "option" "surface.html#option"
;; .reference "HTML documentation" "OPTION" "../../../html-doc/html401/interact/forms.html#edef-OPTION"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, selected, disabled, label, value. <br>
(define (html4:option contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("selected" ("selected") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("label" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "option")) (if (not contents) (itag1 "option" attributes) (itag "option" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>OPTGROUP</b> double tag element (option group ). <br>
;; .parameter contents The textual contents of the OPTGROUP element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "optgroup" "surface.html#optgroup"
;; .reference "HTML documentation" "OPTGROUP" "../../../html-doc/html401/interact/forms.html#edef-OPTGROUP"
;; .misc Required attributes: label. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, disabled. <br>
(define (html4:optgroup contents  . attributes) (let ((attributes-of-elements (quote (("label" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("disabled" ("disabled") "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "optgroup")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "optgroup" " - " "We embed 'false' in a double tag"))) (itag "optgroup" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SELECT</b> double tag element (option selector ). <br>
;; .parameter contents The textual contents of the SELECT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "select" "surface.html#select"
;; .reference "HTML documentation" "SELECT" "../../../html-doc/html401/interact/forms.html#edef-SELECT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, size, multiple, disabled, tabindex, onfocus, onblur, onchange. <br>
(define (html4:select contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("size" "NUMBER" "#IMPLIED") ("multiple" ("multiple") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "select")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "select" " - " "We embed 'false' in a double tag"))) (itag "select" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>INPUT</b> single tag element (form control ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "input" "surface.html#input"
;; .reference "HTML documentation" "INPUT" "../../../html-doc/html401/interact/forms.html#edef-INPUT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, name, value, checked, disabled, readonly, size, maxlength, src, alt, usemap, tabindex, accesskey, onfocus, onblur, onselect, onchange, accept, align. <br>
(define (html4:input  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" ("TEXT" "PASSWORD" "CHECKBOX" "RADIO" "SUBMIT" "RESET" "FILE" "HIDDEN" "IMAGE" "BUTTON") "TEXT") ("name" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("checked" ("checked") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("readonly" ("readonly") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("maxlength" "NUMBER" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("alt" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onselect" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED") ("accept" "CDATA" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "input")) (itag1 "input" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>LABEL</b> double tag element (form field label text ). <br>
;; .parameter contents The textual contents of the LABEL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "label" "surface.html#label"
;; .reference "HTML documentation" "LABEL" "../../../html-doc/html401/interact/forms.html#edef-LABEL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, for, accesskey, onfocus, onblur. <br>
(define (html4:label contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("for" "IDREF" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "label")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "label" " - " "We embed 'false' in a double tag"))) (itag "label" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>FORM</b> double tag element (interactive form ). <br>
;; .parameter contents The textual contents of the FORM element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "form" "surface.html#form"
;; .reference "HTML documentation" "FORM" "../../../html-doc/html401/interact/forms.html#edef-FORM"
;; .misc Required attributes: action. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, method, enctype, onsubmit, onreset, target, accept-charset. <br>
(define (html4:form contents  . attributes) (let ((attributes-of-elements (quote (("action" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("method" ("GET" "POST") "GET") ("enctype" "CDATA" ""application/x-www-form-urlencoded"") ("onsubmit" "CDATA" "#IMPLIED") ("onreset" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("accept-charset" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "form")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "form" " - " "We embed 'false' in a double tag"))) (itag "form" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>LI</b> tag element, which can be applied as a single tag via a #f contents parameter (list item ). <br>
;; .parameter contents The textual contents of the LI element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "li" "surface.html#li"
;; .reference "HTML documentation" "LI" "../../../html-doc/html401/struct/lists.html#edef-LI"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, value. <br>
(define (html4:li contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("value" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "li")) (if (not contents) (itag1 "li" attributes) (itag "li" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>DIR</b> double tag element (directory list, menu list ). <br>
;; .parameter contents The textual contents of the DIR element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "dir" "surface.html#dir"
;; .reference "HTML documentation" "DIR" "../../../html-doc/html401/struct/lists.html#edef-DIR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br>
(define (html4:dir contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dir")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dir" " - " "We embed 'false' in a double tag"))) (itag "dir" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>MENU</b> double tag element (directory list, menu list ). <br>
;; .parameter contents The textual contents of the MENU element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "menu" "surface.html#menu"
;; .reference "HTML documentation" "MENU" "../../../html-doc/html401/struct/lists.html#edef-MENU"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br>
(define (html4:menu contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "menu")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "menu" " - " "We embed 'false' in a double tag"))) (itag "menu" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>UL</b> double tag element (unordered list ). <br>
;; .parameter contents The textual contents of the UL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "ul" "surface.html#ul"
;; .reference "HTML documentation" "UL" "../../../html-doc/html401/struct/lists.html#edef-UL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, compact. <br>
(define (html4:ul contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" ("disc" "square" "circle") "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ul")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ul" " - " "We embed 'false' in a double tag"))) (itag "ul" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>OL</b> double tag element (ordered list ). <br>
;; .parameter contents The textual contents of the OL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "ol" "surface.html#ol"
;; .reference "HTML documentation" "OL" "../../../html-doc/html401/struct/lists.html#edef-OL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, compact, start. <br>
(define (html4:ol contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED") ("start" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ol")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ol" " - " "We embed 'false' in a double tag"))) (itag "ol" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>DD</b> tag element, which can be applied as a single tag via a #f contents parameter (definition description ). <br>
;; .parameter contents The textual contents of the DD element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "dd" "surface.html#dd"
;; .reference "HTML documentation" "DD" "../../../html-doc/html401/struct/lists.html#edef-DD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:dd contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dd")) (if (not contents) (itag1 "dd" attributes) (itag "dd" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>DT</b> tag element, which can be applied as a single tag via a #f contents parameter (definition term ). <br>
;; .parameter contents The textual contents of the DT element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "dt" "surface.html#dt"
;; .reference "HTML documentation" "DT" "../../../html-doc/html401/struct/lists.html#edef-DT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:dt contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dt")) (if (not contents) (itag1 "dt" attributes) (itag "dt" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>DL</b> double tag element (definition list ). <br>
;; .parameter contents The textual contents of the DL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "dl" "surface.html#dl"
;; .reference "HTML documentation" "DL" "../../../html-doc/html401/struct/lists.html#edef-DL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br>
(define (html4:dl contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dl")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dl" " - " "We embed 'false' in a double tag"))) (itag "dl" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>INS</b> double tag element (inserted text, deleted text ). <br>
;; .parameter contents The textual contents of the INS element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "ins" "surface.html#ins"
;; .reference "HTML documentation" "INS" "../../../html-doc/html401/struct/text.html#edef-INS"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite, datetime. <br>
(define (html4:ins contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED") ("datetime" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ins")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ins" " - " "We embed 'false' in a double tag"))) (itag "ins" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>DEL</b> double tag element (inserted text, deleted text ). <br>
;; .parameter contents The textual contents of the DEL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "del" "surface.html#del"
;; .reference "HTML documentation" "DEL" "../../../html-doc/html401/struct/text.html#edef-DEL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite, datetime. <br>
(define (html4:del contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED") ("datetime" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "del")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "del" " - " "We embed 'false' in a double tag"))) (itag "del" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BLOCKQUOTE</b> double tag element (long quotation ). <br>
;; .parameter contents The textual contents of the BLOCKQUOTE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "blockquote" "surface.html#blockquote"
;; .reference "HTML documentation" "BLOCKQUOTE" "../../../html-doc/html401/struct/text.html#edef-BLOCKQUOTE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite. <br>
(define (html4:blockquote contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "blockquote")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "blockquote" " - " "We embed 'false' in a double tag"))) (itag "blockquote" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>Q</b> double tag element (short inline quotation ). <br>
;; .parameter contents The textual contents of the Q element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "q" "surface.html#q"
;; .reference "HTML documentation" "Q" "../../../html-doc/html401/struct/text.html#edef-Q"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite. <br>
(define (html4:q contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "q")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "q" " - " "We embed 'false' in a double tag"))) (itag "q" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>PRE</b> double tag element (preformatted text ). <br>
;; .parameter contents The textual contents of the PRE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "pre" "surface.html#pre"
;; .reference "HTML documentation" "PRE" "../../../html-doc/html401/struct/text.html#edef-PRE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, width. <br>
(define (html4:pre contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("width" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "pre")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "pre" " - " "We embed 'false' in a double tag"))) (itag "pre" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H1</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H1 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h1" "surface.html#h1"
;; .reference "HTML documentation" "H1" "../../../html-doc/html401/struct/global.html#edef-H1"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h1 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h1")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h1" " - " "We embed 'false' in a double tag"))) (itag "h1" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H2</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H2 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h2" "surface.html#h2"
;; .reference "HTML documentation" "H2" "../../../html-doc/html401/struct/global.html#edef-H2"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h2 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h2")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h2" " - " "We embed 'false' in a double tag"))) (itag "h2" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H3</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H3 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h3" "surface.html#h3"
;; .reference "HTML documentation" "H3" "../../../html-doc/html401/struct/global.html#edef-H3"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h3 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h3")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h3" " - " "We embed 'false' in a double tag"))) (itag "h3" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H4</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H4 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h4" "surface.html#h4"
;; .reference "HTML documentation" "H4" "../../../html-doc/html401/present/frames.html#edef-H4"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h4 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h4")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h4" " - " "We embed 'false' in a double tag"))) (itag "h4" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H5</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H5 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h5" "surface.html#h5"
;; .reference "HTML documentation" "H5" "../../../html-doc/html401/present/frames.html#edef-H5"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h5 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h5")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h5" " - " "We embed 'false' in a double tag"))) (itag "h5" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>H6</b> double tag element (heading ). <br>
;; .parameter contents The textual contents of the H6 element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "h6" "surface.html#h6"
;; .reference "HTML documentation" "H6" "../../../html-doc/html401/present/frames.html#edef-H6"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:h6 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h6")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h6" " - " "We embed 'false' in a double tag"))) (itag "h6" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>P</b> tag element, which can be applied as a single tag via a #f contents parameter (paragraph ). <br>
;; .parameter contents The textual contents of the P element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "p" "surface.html#p"
;; .reference "HTML documentation" "P" "../../../html-doc/html401/struct/text.html#edef-P"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:p contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "p")) (if (not contents) (itag1 "p" attributes) (itag "p" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>HR</b> single tag element (horizontal rule ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "hr" "surface.html#hr"
;; .reference "HTML documentation" "HR" "../../../html-doc/html401/present/graphics.html#edef-HR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, noshade, size, width. <br>
(define (html4:hr  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right") "#IMPLIED") ("noshade" ("noshade") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "hr")) (itag1 "hr" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>APPLET</b> double tag element (Java applet ). <br>
;; .parameter contents The textual contents of the APPLET element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "applet" "surface.html#applet"
;; .reference "HTML documentation" "APPLET" "../../../html-doc/html401/struct/objects.html#edef-APPLET"
;; .misc Required attributes: width, height. <p>Optional attributes: id, class, style, title, codebase, archive, code, object, alt, name, align, hspace, vspace. <br>
(define (html4:applet contents  . attributes) (let ((attributes-of-elements (quote (("width" "CDATA" "#REQUIRED") ("height" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("codebase" "CDATA" "#IMPLIED") ("archive" "CDATA" "#IMPLIED") ("code" "CDATA" "#IMPLIED") ("object" "CDATA" "#IMPLIED") ("alt" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "applet")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "applet" " - " "We embed 'false' in a double tag"))) (itag "applet" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>PARAM</b> single tag element (named property value ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "param" "surface.html#param"
;; .reference "HTML documentation" "PARAM" "../../../html-doc/html401/struct/objects.html#edef-PARAM"
;; .misc Required attributes: name. <p>Optional attributes: id, value, valuetype, type. <br>
(define (html4:param  . attributes) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("valuetype" ("DATA" "REF" "OBJECT") "DATA") ("type" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "param")) (itag1 "param" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>OBJECT</b> double tag element (generic embedded object ). <br>
;; .parameter contents The textual contents of the OBJECT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "object" "surface.html#object"
;; .reference "HTML documentation" "OBJECT" "../../../html-doc/html401/struct/objects.html#edef-OBJECT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, declare, classid, codebase, data, type, codetype, archive, standby, height, width, usemap, name, tabindex, align, border, hspace, vspace. <br>
(define (html4:object contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("declare" ("declare") "#IMPLIED") ("classid" "CDATA" "#IMPLIED") ("codebase" "CDATA" "#IMPLIED") ("data" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("codetype" "CDATA" "#IMPLIED") ("archive" "CDATA" "#IMPLIED") ("standby" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "object")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "object" " - " "We embed 'false' in a double tag"))) (itag "object" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>IMG</b> single tag element (Embedded image ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "img" "surface.html#img"
;; .reference "HTML documentation" "IMG" "../../../html-doc/html401/struct/objects.html#edef-IMG"
;; .misc Required attributes: src, alt. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, longdesc, height, width, usemap, ismap, align, border, hspace, vspace. <br>
(define (html4:img  . attributes) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED") ("alt" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("ismap" ("ismap") "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "img")) (itag1 "img" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>LINK</b> single tag element (a media-independent link ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "link" "surface.html#link"
;; .reference "HTML documentation" "LINK" "../../../html-doc/html401/struct/links.html#edef-LINK"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, charset, href, hreflang, type, rel, rev, media, target. <br>
(define (html4:link  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("charset" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("hreflang" "NAME" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("rel" "CDATA" "#IMPLIED") ("rev" "CDATA" "#IMPLIED") ("media" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "link")) (itag1 "link" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>AREA</b> single tag element (client-side image map area ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "area" "surface.html#area"
;; .reference "HTML documentation" "AREA" "../../../html-doc/html401/struct/text.html#edef-AREA"
;; .misc Required attributes: alt. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, shape, coords, href, target, nohref, tabindex, accesskey, onfocus, onblur. <br>
(define (html4:area  . attributes) (let ((attributes-of-elements (quote (("alt" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("shape" ("rect" "circle" "poly" "default") "rect") ("coords" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("nohref" ("nohref") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "area")) (itag1 "area" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>MAP</b> double tag element (client-side image map ). <br>
;; .parameter contents The textual contents of the MAP element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "map" "surface.html#map"
;; .reference "HTML documentation" "MAP" "../../../html-doc/html401/struct/objects.html#edef-MAP"
;; .misc Required attributes: name. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:map contents  . attributes) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "map")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "map" " - " "We embed 'false' in a double tag"))) (itag "map" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>A</b> double tag element (anchor ). <br>
;; .parameter contents The textual contents of the A element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "a" "surface.html#a"
;; .reference "HTML documentation" "A" "../../../html-doc/html401/struct/links.html#edef-A"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, charset, type, name, href, hreflang, target, rel, rev, accesskey, shape, coords, tabindex, onfocus, onblur. <br>
(define (html4:a contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("charset" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("hreflang" "NAME" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("rel" "CDATA" "#IMPLIED") ("rev" "CDATA" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("shape" ("rect" "circle" "poly" "default") "rect") ("coords" "CDATA" "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "a")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "a" " - " "We embed 'false' in a double tag"))) (itag "a" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>CENTER</b> double tag element (shorthand for DIV align=center ). <br>
;; .parameter contents The textual contents of the CENTER element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "center" "surface.html#center"
;; .reference "HTML documentation" "CENTER" "../../../html-doc/html401/present/graphics.html#edef-CENTER"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:center contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "center")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "center" " - " "We embed 'false' in a double tag"))) (itag "center" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>DIV</b> double tag element (generic language/style container ). <br>
;; .parameter contents The textual contents of the DIV element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "div" "surface.html#div"
;; .reference "HTML documentation" "DIV" "../../../html-doc/html401/struct/global.html#edef-DIV"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br>
(define (html4:div contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "div")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "div" " - " "We embed 'false' in a double tag"))) (itag "div" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>ADDRESS</b> double tag element (information on author ). <br>
;; .parameter contents The textual contents of the ADDRESS element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "address" "surface.html#address"
;; .reference "HTML documentation" "ADDRESS" "../../../html-doc/html401/struct/global.html#edef-ADDRESS"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:address contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "address")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "address" " - " "We embed 'false' in a double tag"))) (itag "address" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BODY</b> tag element, which can be applied as a single tag via a #f contents parameter (document body ). <br>
;; .parameter contents The textual contents of the BODY element (a string) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "body" "surface.html#body"
;; .reference "HTML documentation" "BODY" "../../../html-doc/html401/struct/global.html#edef-BODY"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, onload, onunload, background, bgcolor, text, link, vlink, alink. <br>
(define (html4:body contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("onload" "CDATA" "#IMPLIED") ("onunload" "CDATA" "#IMPLIED") ("background" "CDATA" "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("text" "CDATA" "#IMPLIED") ("link" "CDATA" "#IMPLIED") ("vlink" "CDATA" "#IMPLIED") ("alink" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "body")) (if (not contents) (itag1 "body" attributes) (itag "body" contents attributes))))

;; The LAML mirror of the HTML 4.0 (loose) <b>BR</b> single tag element (forced line break ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "br" "surface.html#br"
;; .reference "HTML documentation" "BR" "../../../html-doc/html401/struct/text.html#edef-BR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, clear. <br>
(define (html4:br  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("clear" ("left" "all" "right" "none") "none")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "br")) (itag1 "br" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>FONT</b> double tag element (local change to font ). <br>
;; .parameter contents The textual contents of the FONT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "font" "surface.html#font"
;; .reference "HTML documentation" "FONT" "../../../html-doc/html401/present/graphics.html#edef-FONT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, size, color, face. <br>
(define (html4:font contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("color" "CDATA" "#IMPLIED") ("face" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "font")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "font" " - " "We embed 'false' in a double tag"))) (itag "font" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BASEFONT</b> single tag element (base font size ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "basefont" "surface.html#basefont"
;; .reference "HTML documentation" "BASEFONT" "../../../html-doc/html401/present/graphics.html#edef-BASEFONT"
;; .misc Required attributes: size. <p>Optional attributes: id, color, face. <br>
(define (html4:basefont  . attributes) (let ((attributes-of-elements (quote (("size" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("color" "CDATA" "#IMPLIED") ("face" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "basefont")) (itag1 "basefont" attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BDO</b> double tag element (I18N BiDi over-ride ). <br>
;; .parameter contents The textual contents of the BDO element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "bdo" "surface.html#bdo"
;; .reference "HTML documentation" "BDO" "../../../html-doc/html401/struct/dirlang.html#edef-BDO"
;; .misc Required attributes: dir. <p>Optional attributes: id, class, style, title, lang. <br>
(define (html4:bdo contents  . attributes) (let ((attributes-of-elements (quote (("dir" ("ltr" "rtl") "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "bdo")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "bdo" " - " "We embed 'false' in a double tag"))) (itag "bdo" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SPAN</b> double tag element (generic language/style container ). <br>
;; .parameter contents The textual contents of the SPAN element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "span" "surface.html#span"
;; .reference "HTML documentation" "SPAN" "../../../html-doc/html401/struct/global.html#edef-SPAN"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:span contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "span")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "span" " - " "We embed 'false' in a double tag"))) (itag "span" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SUB</b> double tag element (subscript, superscript ). <br>
;; .parameter contents The textual contents of the SUB element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "sub" "surface.html#sub"
;; .reference "HTML documentation" "SUB" "../../../html-doc/html401/struct/text.html#edef-SUB"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:sub contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "sub")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "sub" " - " "We embed 'false' in a double tag"))) (itag "sub" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SUP</b> double tag element (subscript, superscript ). <br>
;; .parameter contents The textual contents of the SUP element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "sup" "surface.html#sup"
;; .reference "HTML documentation" "SUP" "../../../html-doc/html401/struct/text.html#edef-SUP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:sup contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "sup")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "sup" " - " "We embed 'false' in a double tag"))) (itag "sup" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>TT</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the TT element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "tt" "surface.html#tt"
;; .reference "HTML documentation" "TT" "../../../html-doc/html401/present/graphics.html#edef-TT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:tt contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tt")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "tt" " - " "We embed 'false' in a double tag"))) (itag "tt" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>I</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the I element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "i" "surface.html#i"
;; .reference "HTML documentation" "I" "../../../html-doc/html401/present/graphics.html#edef-I"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:i contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "i")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "i" " - " "We embed 'false' in a double tag"))) (itag "i" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>B</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the B element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "b" "surface.html#b"
;; .reference "HTML documentation" "B" "../../../html-doc/html401/present/graphics.html#edef-B"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:b contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "b")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "b" " - " "We embed 'false' in a double tag"))) (itag "b" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>U</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the U element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "u" "surface.html#u"
;; .reference "HTML documentation" "U" "../../../html-doc/html401/present/graphics.html#edef-U"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:u contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "u")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "u" " - " "We embed 'false' in a double tag"))) (itag "u" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>S</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the S element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "s" "surface.html#s"
;; .reference "HTML documentation" "S" "../../../html-doc/html401/present/graphics.html#edef-S"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:s contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "s")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "s" " - " "We embed 'false' in a double tag"))) (itag "s" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>STRIKE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the STRIKE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "strike" "surface.html#strike"
;; .reference "HTML documentation" "STRIKE" "../../../html-doc/html401/present/graphics.html#edef-STRIKE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:strike contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "strike")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "strike" " - " "We embed 'false' in a double tag"))) (itag "strike" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>BIG</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the BIG element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "big" "surface.html#big"
;; .reference "HTML documentation" "BIG" "../../../html-doc/html401/present/graphics.html#edef-BIG"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:big contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "big")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "big" " - " "We embed 'false' in a double tag"))) (itag "big" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SMALL</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the SMALL element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "small" "surface.html#small"
;; .reference "HTML documentation" "SMALL" "../../../html-doc/html401/present/graphics.html#edef-SMALL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:small contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "small")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "small" " - " "We embed 'false' in a double tag"))) (itag "small" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>EM</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the EM element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "em" "surface.html#em"
;; .reference "HTML documentation" "EM" "../../../html-doc/html401/struct/text.html#edef-EM"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:em contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "em")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "em" " - " "We embed 'false' in a double tag"))) (itag "em" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>STRONG</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the STRONG element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "strong" "surface.html#strong"
;; .reference "HTML documentation" "STRONG" "../../../html-doc/html401/struct/text.html#edef-STRONG"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:strong contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "strong")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "strong" " - " "We embed 'false' in a double tag"))) (itag "strong" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>DFN</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the DFN element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "dfn" "surface.html#dfn"
;; .reference "HTML documentation" "DFN" "../../../html-doc/html401/struct/text.html#edef-DFN"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:dfn contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dfn")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dfn" " - " "We embed 'false' in a double tag"))) (itag "dfn" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>CODE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the CODE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "code" "surface.html#code"
;; .reference "HTML documentation" "CODE" "../../../html-doc/html401/struct/text.html#edef-CODE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:code contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "code")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "code" " - " "We embed 'false' in a double tag"))) (itag "code" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>SAMP</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the SAMP element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "samp" "surface.html#samp"
;; .reference "HTML documentation" "SAMP" "../../../html-doc/html401/struct/text.html#edef-SAMP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:samp contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "samp")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "samp" " - " "We embed 'false' in a double tag"))) (itag "samp" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>KBD</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the KBD element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "kbd" "surface.html#kbd"
;; .reference "HTML documentation" "KBD" "../../../html-doc/html401/struct/text.html#edef-KBD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:kbd contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "kbd")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "kbd" " - " "We embed 'false' in a double tag"))) (itag "kbd" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>VAR</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the VAR element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "var" "surface.html#var"
;; .reference "HTML documentation" "VAR" "../../../html-doc/html401/struct/text.html#edef-VAR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:var contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "var")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "var" " - " "We embed 'false' in a double tag"))) (itag "var" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>CITE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the CITE element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "cite" "surface.html#cite"
;; .reference "HTML documentation" "CITE" "../../../html-doc/html401/struct/text.html#edef-CITE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:cite contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "cite")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "cite" " - " "We embed 'false' in a double tag"))) (itag "cite" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>ABBR</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the ABBR element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "abbr" "surface.html#abbr"
;; .reference "HTML documentation" "ABBR" "../../../html-doc/html401/struct/text.html#edef-ABBR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:abbr contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "abbr")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "abbr" " - " "We embed 'false' in a double tag"))) (itag "abbr" contents attributes)))

;; The LAML mirror of the HTML 4.0 (loose) <b>ACRONYM</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The textual contents of the ACRONYM element
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .reference "similar surface form" "acronym" "surface.html#acronym"
;; .reference "HTML documentation" "ACRONYM" "../../../html-doc/html401/struct/text.html#edef-ACRONYM"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br>
(define (html4:acronym contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "acronym")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "acronym" " - " "We embed 'false' in a double tag"))) (itag "acronym" contents attributes)))

