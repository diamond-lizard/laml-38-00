(((title . "Reference Manual of the LAML Finite State Automaton library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is a Scheme library that support Finite State Automatons, both non-deterministic and deterministic. The library includes a function that generates a deterministic automaton from a non-deterministic automaton. Another central function is automaton-accepts? which accepts or rejects a list of input symbols in a DFA. The generated automata are both compact and fast, because they make apply a rather efficient transition lookup in a sorted vector. ") (scheme-source-file . "/user/normark/scheme/lib/final-state-automaton.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Automaton construction and selection.") (section-body "")) ((cross-references (reference "Scheme source file" "make-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#make-finite-state-automaton")) (kind "manual-page") (parameters (parameter "start-state" "The start state of the automaton - an integer") (parameter "accept-state-list" "The list of accepting states - a list of integers") (parameter "transitions" "A list of transitions. Transitions are made by the function make-automaton-transition") (parameter "given-symbol-map" "A symbol map - a sorted vector - ala an association list that maps real input symbols to terse symbols")) (description "Make a finite state automaton with a given start-state, a list of accept states, and a set of transitions - a list. The optional parameter is a symbol map. In case it is passed, use this as symbol map for the resulting automaton, and do not in this case compact the transitions. In normal use, do not pass any such symbol map. The function make-finite-state-automaton will make the symbol map for you. ") (form "(make-finite-state-automaton start-state accept-state-list transitions [given-symbol-map])") (returns "Returns a self-contained list structure that represents the finite state automaton.") (title "make-finite-state-automaton")) ((cross-references (reference "Scheme source file" "start-state-of-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#start-state-of-finite-state-automaton")) (kind "manual-page") (description "Return the start state of an automaton. ") (form "(start-state-of-finite-state-automaton aut)") (title "start-state-of-finite-state-automaton")) ((cross-references (reference "Scheme source file" "final-states-of-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#final-states-of-finite-state-automaton")) (kind "manual-page") (description "Return the list of final states of an automaton. ") (form "(final-states-of-finite-state-automaton aut)") (title "final-states-of-finite-state-automaton")) ((cross-references (reference "Scheme source file" "transitions-of-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#transitions-of-finite-state-automaton")) (kind "manual-page") (description "Return the transitions - a sorted vector - of an automaton. ") (form "(transitions-of-finite-state-automaton aut)") (title "transitions-of-finite-state-automaton")) ((cross-references (reference "Scheme source file" "transition-list-of-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#transition-list-of-finite-state-automaton")) (kind "manual-page") (description "Return the transitions - as a list - of an automaton. ") (title "transition-list-of-finite-state-automaton") (form (transition-list-of-finite-state-automaton aut))) ((cross-references (reference "Scheme source file" "symbol-map-of-finite-state-automaton" "final-state-automaton-ep/final-state-automaton-1.html#symbol-map-of-finite-state-automaton")) (kind "manual-page") (description "Return the symbol map of an automaton. The symbol is an internal device which maps real input symbol to terse internal input symbols (for the sake of compact automaton representation). ") (form "(symbol-map-of-finite-state-automaton aut)") (title "symbol-map-of-finite-state-automaton")) ((kind "manual-section") (section-title "State and transition predicates.") (section-body "")) ((cross-references (reference "Scheme source file" "state-equal?" "final-state-automaton-ep/final-state-automaton-1.html#state-equal?")) (kind "manual-page") (description "The equality used for states in a finite state automaton. Normally, the states are integers. ") (form "(state-equal state1 state2).") (title "state-equal?")) ((cross-references (reference "Scheme source file" "state-leq?" "final-state-automaton-ep/final-state-automaton-1.html#state-leq?")) (kind "manual-page") (description "A leq? function on states. The function is used to normalize subset states in the subset construction. ") (form "(state-leq? state1 state2)") (title "state-leq?")) ((cross-references (reference "Scheme source file" "state-lt?" "final-state-automaton-ep/final-state-automaton-1.html#state-lt?")) (kind "manual-page") (description "A less than function on states. ") (form "(state-lt state1 state2)") (title "state-lt?")) ((cross-references (reference "Scheme source file" "transition-leq?" "final-state-automaton-ep/final-state-automaton-1.html#transition-leq?")) (kind "manual-page") (description "A leq? function on transitions. The function is used for binary search among transitions for efficient lookup. ") (title "transition-leq?") (form (transition-leq? trans1 trans2))) ((cross-references (reference "Scheme source file" "symbol-equal?" "final-state-automaton-ep/final-state-automaton-1.html#symbol-equal?")) (kind "manual-page") (description "The equality used for symbols in a finite state automaton. Normally finite state automaton symbols are Scheme symbols. ") (form "(symbol-equal? sym1 sym2).") (title "symbol-equal?")) ((kind "manual-section") (section-title "Transitions") (section-body "")) ((cross-references (reference "Scheme source file" "make-automaton-transition" "final-state-automaton-ep/final-state-automaton-1.html#make-automaton-transition")) (kind "manual-page") (description "Make a finite state transition ") (title "make-automaton-transition") (form (make-automaton-transition in-state symbol out-state))) ((cross-references (reference "Scheme source file" "from-state-of-transition" "final-state-automaton-ep/final-state-automaton-1.html#from-state-of-transition")) (kind "manual-page") (description "Return the from-state of the transition. ") (form "(from-state-of-transition trans)") (title "from-state-of-transition")) ((cross-references (reference "Scheme source file" "symbol-of-transition" "final-state-automaton-ep/final-state-automaton-1.html#symbol-of-transition")) (kind "manual-page") (description "Return the symbol of the transtion. ") (form "(symbol-of-transition trans)") (title "symbol-of-transition")) ((cross-references (reference "Scheme source file" "to-state-of-transition" "final-state-automaton-ep/final-state-automaton-1.html#to-state-of-transition")) (kind "manual-page") (description "Return the to-state of the transition. ") (form "(to-state-of-transition trans)") (title "to-state-of-transition")) ((cross-references (reference "Scheme source file" "epsilon-symbol" "final-state-automaton-ep/final-state-automaton-1.html#epsilon-symbol")) (kind "manual-page") (description "The denotation for the empty symbol. ") (title "epsilon-symbol") (form epsilon-symbol)) ((cross-references (reference "Scheme source file" "epsilon-symbol?" "final-state-automaton-ep/final-state-automaton-1.html#epsilon-symbol?")) (kind "manual-page") (description "Is the symbol s an epsilon symbol? ") (title "epsilon-symbol?") (form (epsilon-symbol? s))) ((cross-references (reference "Scheme source file" "epsilon-transition?" "final-state-automaton-ep/final-state-automaton-1.html#epsilon-transition?")) (kind "manual-page") (description "Is the transition trans an epsilon transition? ") (title "epsilon-transition?") (form (epsilon-transition? trans))) ((kind "manual-section") (section-title "Acceptance predicate.") (section-body "")) ((cross-references (reference "Scheme source file" "automaton-accepts?" "final-state-automaton-ep/final-state-automaton-1.html#automaton-accepts?")) (kind "manual-page") (description "Does automaton accepts the input symbol-list. This predicate should only be used if automaton is a DFA. If a NFA, first use the function subset-construction to construct a DFA from it. This function outputs either #t of #f. ") (title "automaton-accepts?") (form (automaton-accepts? automaton symbol-list))) ((kind "manual-section") (section-title "DFA construction from NFA.") (section-body "Construction of deterministic finite automaton af non-deterministic finite state automaton.")) ((cross-references (reference "Scheme source file" "subset-construction" "final-state-automaton-ep/final-state-automaton-1.html#subset-construction")) (kind "manual-page") (parameters (parameter "nfa" "A non-deterministic finite state automaton") (parameter "support-epsilon-moves?" "A boolean parameter, defaulted to #f, which makes it possible to carry out the construction with epsilon moves in nfa")) (description "Return an equivalent DFA from the non-deterministic NFA passed as first parameter. ") (form "(subset-construction nfa [support-epsilon-moves?])") (title "subset-construction")))