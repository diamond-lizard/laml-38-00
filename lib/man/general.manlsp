(((title . "Reference Manual of the General LAML library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is a library of common and generally useful Scheme functions, which are used in other LAML libraries, in LAML styles, and in LAML tools. Far the majority of the functions can also be used outside LAML. ") (scheme-source-file . "/user/normark/scheme/lib/general.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . "true") (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Optional parameter handling.") (section-body "Given the function <kbd>(lambda (r1 r2 . optional-parameters) ...)</kbd> the function <kbd>optional-parameter</kbd> (see below) is able to extract optional parameter number n. Non-used optional parameter can either be passed as the #f value (false in Scheme) or not passed at all. ") (section-id "optional-parameter-section")) ((cross-references (reference "Scheme source file" "optional-parameter" "general-ep/general-1.html#optional-parameter")) (kind "manual-page") (description "Return element n of optional-parameter-list. The first element is number 1. In Scheme the optional parameters are captured as a list after the required parameters: <kbd>(define f (x y . optional-parameter-list) ...)</kbd>. Please notice that if you pass optional parameter number i, the optional parameters 1, 2, ..., i-1 must be passed explicitly. If you explicitly pass the symbol non-passed-value, this function will always return the default value, default-value. (This means, of course, that you cannot use the symbol non-passed-value as an 'ordinary value' in your program). If no optional third parameter - default-value - is given to the function optional-parameter the value #f serves as the default default-value. ") (form "(optional-parameter n optional-parameter-list [default-value])") (pre-condition "optional-parameter-list is a proper list.") (title "optional-parameter") (examples (example "(optional-parameter 1 (list 'a 'b 'c) 'x) => a") (example "(optional-parameter 4 (list 'a 'b 'c) 'x) => x") (example "(optional-parameter 10 (list 'a 'b 'c) 'x) => x") (example "(optional-parameter 1 (list 'non-passed-value 'b 'c) 'x) => x") (example "(optional-parameter 3 (list 'a 'b 'c) 'x) => c"))) ((kind "manual-section") (section-title "List selection functions and their generators.") (section-body " As an alternative to using car, cadr etc. we provide for generation of more general list selector functions.") (section-id "selection-generation")) ((cross-references (reference "Scheme source file" "make-selector-function" "general-ep/general-1.html#make-selector-function")) (kind "manual-page") (description "Returns a function, which selects element number n in a list. The second parameter, which is optional, is used for error message purposes. In general, this parameter should be a string corresponding to the name of the selector function. If the second parameter is given, we check whether the list is long enough for selection. If not, we give a decent error message. We recommend use of the second parameter in order to avoid meaningless error messages. The first element is number 1. (make-selector-function 1) corresponds to car, (make-selector-function 2) corresponds to cadr, etc. ") (form "(make-selector-function n [selector-name])") (title "make-selector-function") (examples (example "((make-selector-function 1) (list 1 2 3)) => 1") (example "((make-selector-function 3) (list 1 2 3)) => 3"))) ((cross-references (reference "Scheme source file" "make-mutator-function" "general-ep/general-1.html#make-mutator-function")) (kind "manual-page") (parameters (parameter "n" "The position in the last to be mutated. The first element counts as number 1.") (parameter "mutator-name" "The name of the mutator function. Used only for error message purposes.")) (description "Make and return a mutator function which mutates element number n in a list. The returned function takes a list and a new value as arguments. This function takes one optional parameter, which is the name of the mutator. ") (form "(make-mutator-function n [mutator-name])") (returns "A function of two parameters (lambda (lst new-value) ...) that mutates element n of lst to new-value.") (title "make-mutator-function") (examples (example "(let ((lst '(1 2 3 4))) ((make-mutator-function 2) lst 11) lst) => (1 11 3 4)") (example "(let ((lst '(1 2 3 4))) ((make-mutator-function 1) lst 11) lst) => (11 2 3 4)") (example "(let ((lst '(1 2 3 4))) ((make-mutator-function 4) lst 11) lst) => (1 2 3 11)"))) ((cross-references (reference "Scheme source file" "first" "general-ep/general-1.html#first")) (kind "manual-page") (description "Return the first element of a list ") (form "(first lst)") (title "first") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "second" "general-ep/general-1.html#second")) (kind "manual-page") (description "Return the second element of a list ") (form "(second lst)") (title "second") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "third" "general-ep/general-1.html#third")) (kind "manual-page") (description "Return the third element of a list ") (form "(third lst)") (title "third") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "fourth" "general-ep/general-1.html#fourth")) (kind "manual-page") (description "Return the fourth element of a list ") (form "(fourth lst)") (title "fourth") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "fifth" "general-ep/general-1.html#fifth")) (kind "manual-page") (description "Return the fifth element of a list ") (form "(fifth lst)") (returns "The fifth element of the list") (title "fifth") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "sixth" "general-ep/general-1.html#sixth")) (kind "manual-page") (description "Return the sixth element of a list ") (form "(sixth lst)") (title "sixth") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "seventh" "general-ep/general-1.html#seventh")) (kind "manual-page") (description "Return the seventh element of a list ") (form "(seventh lst)") (title "seventh") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "eighth" "general-ep/general-1.html#eighth")) (kind "manual-page") (description "Return the eighth element of a list ") (form "(eighth lst)") (title "eighth") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "nineth" "general-ep/general-1.html#nineth")) (kind "manual-page") (description "Return the nineth element of a list ") (form "(nineth lst)") (title "nineth") (examples (example "(map (lambda (f) (f '(1 2 3 4 5 6 7 8 9))) (list first second third fourth fifth sixth seventh eighth nineth)) => (1 2 3 4 5 6 7 8 9)"))) ((cross-references (reference "Scheme source file" "tenth" "general-ep/general-1.html#tenth")) (kind "manual-page") (description "Return the tenth element of a list ") (form "(tenth lst)") (title "tenth") (examples)) ((kind "manual-section") (section-title "Association and property list functions.") (section-body " Here follows a number of functions which work on alists, or make alists. Also a number of property list functions are provided.")) ((cross-references (reference "Scheme source file" "extend-a-list" "general-ep/general-1.html#extend-a-list")) (kind "manual-page") (description "Add a key-value pair to a-list. Like acons in some systems. The parameter key is forced to be a symbol (converted to a symbol with as-symbol). ") (title "extend-a-list") (form (extend-a-list key value a-list)) (examples (example "(extend-a-list 'k 1 some-a-list) => ((k . 1) (a . 1) (b . 2) (c . 3))") (example "(extend-a-list 'k 1 '()) => ((k . 1))"))) ((cross-references (reference "Scheme source file" "extend-prop-list" "general-ep/general-1.html#extend-prop-list")) (kind "manual-page") (description "Extend prop-list with key being associated to val. ") (title "extend-prop-list") (form (extend-prop-list key val prop-list)) (examples)) ((kind "manual-page") (parameters (parameter "key" "is a symbol.") (parameter "a-list" "an association list with symbols as keys.")) (description "Return a value from an alist which corresponds to key. In case the key does not exist in the alist, a fatal error will occur. ") (returns "the first value of key in a-list.") (misc "Uses the function assq (based on eq? for key comparions) internally.") (title "get") (form (get key a-list)) (cross-references (reference "Scheme source file" "get" "general-ep/general-1.html#get") (internal-references "similar function" "defaulted-get")) (examples (example "(get 'a some-a-list) => 1") (example "(get 'b some-a-list) => 2"))) ((kind "manual-page") (description "Return the value of key in alist (by means of cdr of assq). If no association is found return default. ") (title "defaulted-get") (form (defaulted-get key alist default)) (cross-references (reference "Scheme source file" "defaulted-get" "general-ep/general-1.html#defaulted-get") (internal-references "similar function" "get")) (examples (example "(defaulted-get 'a some-a-list 10) => 1") (example "(defaulted-get 'd some-a-list 10) => 10"))) ((kind "manual-page") (parameters (parameter "key" "is a symbol.") (parameter "p-list" "a property list with symbols as keys.")) (description "Return the value of key in the property list p-list. In case the key does not exist in the property list, a fatal error will occur. ") (returns "the first value of key in p-list") (misc "Uses the function eq? for key comparions.") (pre-condition "p-list is of even length") (title "get-prop") (form (get-prop key p-list)) (cross-references (reference "Scheme source file" "get-prop" "general-ep/general-1.html#get-prop") (internal-references "similar function" "defaulted-get-prop")) (examples (example "(get-prop 'b some-prop-list) => 2") (example "(get-prop 'c some-prop-list) => 3"))) ((cross-references (reference "Scheme source file" "find-in-property-list" "general-ep/general-1.html#find-in-property-list")) (kind "manual-page") (description "Does key exists as a property name in the property list p-list? If so, return a reference to the cons cell that holds key. ") (title "find-in-property-list") (form (find-in-property-list key p-list)) (examples (example "(find-in-property-list 'x some-prop-list) => #f") (example "(find-in-property-list 'a some-prop-list) => (a 1 b 2 c 3)") (example "(find-in-property-list 'c some-prop-list) => (c 3)"))) ((kind "manual-page") (description "Return the value of key in the property list p-list. If key is not present in p-list, return default. ") (pre-condition "p-list is a list of even length") (title "defaulted-get-prop") (form (defaulted-get-prop key p-list default)) (cross-references (reference "Scheme source file" "defaulted-get-prop" "general-ep/general-1.html#defaulted-get-prop") (internal-references "similar function" "get-prop")) (examples (example "(defaulted-get-prop 'c some-prop-list 'x) => 3") (example "(defaulted-get-prop 'd some-prop-list 'x) => x"))) ((cross-references (reference "Scheme source file" "remove-prop!" "general-ep/general-1.html#remove-prop!")) (kind "manual-page") (description "Remove all instances of key and its values form the property list p-list. ") (returns "the resulting, possible shorter, property list (a reduced copy of p-list).") (pre-condition "p-list is a well-formed property list.") (misc "This is a function, not a mutating procedure.") (title "remove-prop!") (form (remove-prop! key p-list)) (examples (example "(let ((lst (list 'a 1 'b 2 'c 3))) (remove-prop! 'b lst) lst) => (a 1 b 2 c 3)") (example "(remove-prop! 'a some-prop-list) => (b 2 c 3)") (example "(remove-prop! 'b some-prop-list) => (a 1 c 3)") (example "(remove-prop! 'd some-prop-list) => (a 1 b 2 c 3)"))) ((cross-references (reference "Scheme source file" "remove-props!" "general-ep/general-1.html#remove-props!")) (kind "manual-page") (description "Remove all instances of keys in key-list together with its values form the property list p-list. ") (returns "the resulting, possible shorter, property list (a reduced copy of p-list).") (pre-condition "p-list is a well-formed property list.") (misc "This is a function, not a mutating procedure.") (title "remove-props!") (form (remove-props! key-list p-list)) (examples (example "(remove-props! '(a) '(a 1 b 2 c 3)) => (b 2 c 3)") (example "(remove-props! '(a b c) '(a 1 b 2 c 3)) => ()") (example "(remove-props! '(c) '(a 1 b 2 c 3)) => (a 1 b 2)") (example "(remove-props! '(b) '(a 1 b 2 c 3)) => (a 1 c 3)") (example "(remove-props! '(b c) '(a 1 b 2 c 3)) => (a 1)") (example "(remove-props! '(b c) '()) => ()") (example "(remove-props! '(b c) '(a 1)) => (a 1)") (example "(remove-props! '(b c) '(a 1 b 2)) => (a 1)"))) ((cross-references (reference "Scheme source file" "remove-associations" "general-ep/general-1.html#remove-associations")) (kind "manual-page") (description "Remove the keys in key-list from the association list a-list ") (title "remove-associations") (form (remove-associations key-list a-list)) (examples (example "(remove-associations '(a b) '((a . 5) (b . 7) (c . 11))) => ((c . 11))") (example "(remove-associations '(x y) '((a . 5) (b . 7) (c . 11))) => ((a . 5) (b . 7) (c . 11))") (example "(remove-associations '(x b) '((a . 5) (b . 7) (c . 11))) => ((a . 5) (c . 11))") (example "(remove-associations '() '((a . 5) (b . 7) (c . 11))) => ((a . 5) (b . 7) (c . 11))"))) ((cross-references (reference "Scheme source file" "alist-from-keys-and-values" "general-ep/general-1.html#alist-from-keys-and-values")) (kind "manual-page") (description "Make an alist from a key-list and a val-list. ") (pre-condition "the lengths of the two input lists are equal.") (title "alist-from-keys-and-values") (form (alist-from-keys-and-values key-list val-list)) (examples (example "(alist-from-keys-and-values '(x y z) '(1 2 3)) => ((x . 1) (y . 2) (z . 3))"))) ((cross-references (reference "Scheme source file" "propertylist-to-alist" "general-ep/general-1.html#propertylist-to-alist")) (kind "manual-page") (description "Make and return an association list from a property list plist. ") (title "propertylist-to-alist") (form (propertylist-to-alist plist)) (examples (example "(propertylist-to-alist some-prop-list) => ((a . 1) (b . 2) (c . 3))") (example "(propertylist-to-alist '()) => ()") (example "(alist-to-propertylist (propertylist-to-alist some-prop-list)) => (a 1 b 2 c 3)"))) ((cross-references (reference "Scheme source file" "alist-to-propertylist" "general-ep/general-1.html#alist-to-propertylist")) (kind "manual-page") (description "Make and return a property list from an association list. ") (title "alist-to-propertylist") (form (alist-to-propertylist alist)) (examples (example "(alist-to-propertylist some-a-list) => (a 1 b 2 c 3)") (example "(alist-to-propertylist (propertylist-to-alist some-prop-list)) => (a 1 b 2 c 3)"))) ((cross-references (reference "Scheme source file" "every-second-element" "general-ep/general-1.html#every-second-element")) (kind "manual-page") (description "Return every second element of list, starting with the first element. This function is useful to extract the keys or values of a property list. ") (title "every-second-element") (form (every-second-element lst)) (examples (example "(every-second-element some-prop-list) => (a b c)") (example "(every-second-element (cons 'x some-prop-list)) => (x 1 2 3)") (example "(every-second-element '()) => ()"))) ((cross-references (reference "Scheme source file" "but-props" "general-ep/general-1.html#but-props")) (kind "manual-page") (parameters (parameter "prop-list" "A well-formed property list, in which the property names are symbols.") (parameter "eliminations" "A list of property names, where each property name is a symbol.")) (description "Return those property names and values of prop-list which are not in eliminations. ") (title "but-props") (form (but-props prop-list eliminations)) (examples (example "(but-props some-prop-list '(a b)) => (c 3)") (example "(but-props some-prop-list '(d)) => (a 1 b 2 c 3)") (example "(but-props some-prop-list '()) => (a 1 b 2 c 3)"))) ((cross-references (reference "Scheme source file" "property-subset" "general-ep/general-1.html#property-subset")) (kind "manual-page") (description "Return those property key/value pairs of the proper list prop-list whose keys are member of keylist. Comparison is done by the function memq. ") (title "property-subset") (form (property-subset prop-list keylist)) (examples (example "(property-subset some-prop-list '(a))  => (a 1)") (example "(property-subset some-prop-list '())  => ()") (example "(property-subset some-prop-list '(a b c))  => (a 1 b 2 c 3)"))) ((cross-references (reference "Scheme source file" "pair-up" "general-ep/general-1.html#pair-up")) (kind "manual-page") (description "Return a list of pairs of elements from lst1 and lst2. In other words, return an association list with keys from lst1 and values from lst2. The list is as long as the shortest of lst1 and lst2. ") (title "pair-up") (form (pair-up lst1 lst2)) (examples (example "(pair-up '(a b c) '(1 2 3)) => ((a . 1) (b . 2) (c . 3))") (example "(pair-up '(a b c) '(1 2)) => ((a . 1) (b . 2))") (example "(pair-up '(a b c) '()) => ()") (example "(pair-up '(a) '(1 2 3)) => ((a . 1))") (example "(pair-up '() '(1 2 3)) => ()") (example "(pair-up '() '()) => ()") (example "(pair-up '(x y) '(5 6 7)) => ((x . 5) (y . 6))"))) ((cross-references (reference "Scheme source file" "symbolize-key" "general-ep/general-1.html#symbolize-key")) (kind "manual-page") (parameters (parameter "key-value-pair" "a pair, such as (\"key\" . \"val\")")) (description "A function which converts the key position in an a-lists to a symbol. ") (returns "a pair (key . \"val\")") (title "symbolize-key") (form (symbolize-key key-value-pair)) (examples (example "(symbolize-key (cons 'a 'b)) => (a . b)") (example "(symbolize-key (cons \"a\" \"b\")) => (a . \"b\")"))) ((kind "manual-section") (section-title "Filter and accumulation functions.") (section-body " This sections provides variants of the very useful higher order filtering function.")) ((kind "manual-page") (description "Filter a list lst by means of the predicate pred. Preserves the ordering of elements in lst. ") (returns "the elements in lst that fulfills the predicate pred.") (misc "Based on a tail recursive traversal of lst.") (title "filter") (form (filter pred lst)) (cross-references (reference "Scheme source file" "filter" "general-ep/general-1.html#filter") (internal-references "similar function" "filter-no-ordering")) (examples (example "(filter number? (list 1 \"1\" 'a (list 1)))  => (1)") (example "(filter number? (list 1 1.2 3/4)) => (1 1.2 3/4)"))) ((kind "manual-page") (description "Like filter, but the ordering among elements in the resulting list is unknown and arbitrary. Actually returns filtered list in reverse order. OK in situations, where a boolean result is needed: Are there anything passing the filter? ") (title "filter-no-ordering") (form (filter-no-ordering pred lst)) (cross-references (reference "Scheme source file" "filter-no-ordering" "general-ep/general-1.html#filter-no-ordering") (internal-references "similar function" "filter")) (examples (example "(filter-no-ordering number? (list 1 1.2 3/4)) => (3/4 1.2 1)"))) ((cross-references (reference "Scheme source file" "mapping-filter" "general-ep/general-1.html#mapping-filter")) (kind "manual-page") (description "Map and filter the lists in the parameter lists by means of the predicate pred. In the same ways as for the native map function of Scheme, lists must be a list of lists, and pred must be a function taking as many arguments as there are lists and returning a single value. If more than one list is given, then they must all be the same length. If the predicate pred returns a true value v on the elements in lists, return v instead of e (this is the mapping effect). Only return those mapped elements that fullfil pred. ") (misc "Remember that any non-#f element counts as the true (#t) value.") (title "mapping-filter") (form (mapping-filter pred . lists)) (examples (example "(mapping-filter (lambda (x) (* x 2)) '(1 2 3)) => (2 4 6)") (example "(mapping-filter (lambda (x y) (if (even? x) (+ (* x 2) y) #f)) '(1 2 3 4 5) '(10 11 12 13 14)) => (15 21)"))) ((cross-references (reference "Scheme source file" "accumulate-right" "general-ep/general-1.html#accumulate-right")) (kind "manual-page") (description "A higher-order function which right accumulates the list lst by means of the binary function f, using init as the initial value of the accumulation. ") (misc "This function is iterative.") (title "accumulate-right") (form (accumulate-right f init lst)) (examples (example "(accumulate-right - 0 '(1 2 3 4 5)) => 3") (example "(accumulate-right - 7 '(1 2 3 4 5)) => -4") (example "(accumulate-right + 0 '(1 2 3 4 5)) => 15"))) ((kind "manual-section") (section-title "Mapping functions.") (section-body "Here is a set of generalized mapping functions. These functions are all similar to map (which may take an arbitrary number of lists). Notice however, that map2, map3, etc do not require all lists to be of equal lengths.")) ((cross-references (reference "Scheme source file" "map2" "general-ep/general-1.html#map2")) (kind "manual-page") (description "Like map, but maps f on two lists. ") (returns "Returns a list of length equal to the length of the shortest of the input lists.") (title "map2") (form (map2 f lst1 lst2)) (examples (example "(map2 + (list 1 2 3) (list 4 5 6)) => (5 7 9)") (example "(map2 + (list 1 2 3) (list 4 5 6 7 8 9)) => (5 7 9)") (example "(map2 + (list 1 2 3) '()) => ()"))) ((cross-references (reference "Scheme source file" "map3" "general-ep/general-1.html#map3")) (kind "manual-page") (description "Like map, but maps f on three lists ") (returns "Returns a list of length equal to the length of the shortest of the input lists.") (title "map3") (form (map3 f lst1 lst2 lst3)) (examples (example "(map3 + (list 1 2 3) (list 4 5 6) (list 7 8 9)) => (12 15 18)"))) ((cross-references (reference "Scheme source file" "map4" "general-ep/general-1.html#map4")) (kind "manual-page") (description "Like map, but maps f on four lists ") (returns "Returns a list of length equal to the length of the shortest of the input lists.") (title "map4") (form (map4 f lst1 lst2 lst3 lst4)) (examples (example "(map4 + (list 1 2 3) (list 4 5 6) (list 7 8) (list 7 8)) => (19 23)"))) ((cross-references (reference "Scheme source file" "map5" "general-ep/general-1.html#map5")) (kind "manual-page") (description "Like map, but maps f on five lists ") (returns "Returns a list of length equal to the length of the shortest of the input lists.") (title "map5") (form (map5 f lst1 lst2 lst3 lst4 lst5)) (examples (example "(map5 + (list 1 2 3) (list 4 5 6) (list 7 8) (list 7 8) (list 0)) => (19)"))) ((kind "manual-section") (section-title "Higher-order bite functions.") (section-body "Mapping and filtering functions that operate on bites (sublists) of a list. A bite of a non-empty list is a non-empty prefix of the list. Consequtive bites of a list must append-accumulate to the original list. There exists a number of higher-order bite function creators, such as bite-while-element and bite-of-length, see <a href = \"#bite-generators\"> here </a>.") (section-id "higher-order-bite-functions")) ((kind "manual-page") (parameters (parameter "make-bite" "A function which returns the next bite. Signature: List, Int -> List. ") (parameter "bite-transf" "A function which transform a bite: Signature: List -> List. (Notice that this function only takes a single parameter).") (parameter "lst" "A list from which bites are taken, one at a time.")) (description "Successively take bites of the list lst with make-bite, transform these bites with bite-transf, and splice (append accumulate) the transformed bites together. The bite number (starting with 1) is passed as the second parameter to make-bite. ") (title "map-bites") (form (map-bites make-bite bite-transf lst)) (cross-references (reference "Scheme source file" "map-bites" "general-ep/general-1.html#map-bites") (internal-references "Useful bite creators" "bite-while-element" "bite-of-length")) (examples (example "(map-bites (bite-while-element number?) list '(1 -1 1 a 3 4 b 6 1 2 3)) => ((1 -1 1 a) (3 4 b) (6 1 2 3))") (example "(map-bites (bite-while-element (negate number?)) list '(a b 1 c d 2 e f g h i j 3 k l)) => ((a b 1) (c d 2) (e f g h i j 3) (k l))") (example "(map-bites (bite-while-element number?) list '(a b 1 c d 2 e f g h i j 3 k l)) => ((a) (b) (1 c) (d) (2 e) (f) (g) (h) (i) (j) (3 k) (l))") (example "(map-bites (bite-while-element symbol? 'sentinel \"first\") list '(a b 1 c d 2 e f g h i j 3 k l)) => ((a b) (1 c d) (2 e f g h i j) (3 k l))") (example "(map-bites (bite-while-element symbol? 'sentinel \"last\") list '(a b 1 c d 2 e f g h i j 3 k l)) => ((a b 1) (c d 2) (e f g h i j 3) (k l))") (example "(map-bites (bite-while-element symbol? 'sentinel \"alone\") list '(a b 1 c d 2 e f g h i j 3 k l)) => ((a b) (1) (c d) (2) (e f g h i j) (3) (k l))") (example "(map-bites (bite-while-accumulate + 0 (lambda (sum) (>= sum 5))) list '(0 1 2 1 2 0 1 3 0 -2 1 3 4)) => ((0 1 2 1 2) (0 1 3 0 -2 1 3) (4))") (example "(map-bites (bite-while-compare < symbol?) list '(a 0 b c 1 d 2 -1 e f g 7 2 3)) => ((a 0 b c 1 d 2) (-1 e f g 7) (2 3))") (example "(map-bites (lambda (lst . r) (sublist-until number? lst)) (lambda (lst) (list (list-to-string (butlast lst) \",\"))) '(a b 1 c d 2 e f g h i j 3 k L 4)) => (\"a,b\" \"c,d\" \"e,f,g,h,i,j\" \"k,L\")") (example "(map-bites (lambda (lst . r) (list-part 1 3 lst)) list '(a b c d e f g h i j k l)) => ((a b c) (d e f) (g h i) (j k l))") (example "(map-bites (lambda (lst . r) (list-part 1 3 lst)) list '(a b c d e f g h i j k l)) => ((a b c) (d e f) (g h i) (j k l))") (example "(map-bites (bite-while-monotone (make-comparator < >)) list  '(1 2 1 2 1 2 3 4)) => ((1 2) (1 2) (1 2 3 4))") (example "(map-bites (bite-of-varied-length (lambda (n) n)) list  '(1 2 3 4 5 6 7 8)) => ((1) (2 3) (4 5 6) (7 8))") (example "(map-bites (bite-of-varied-length (lambda (n) (if (even? n) 2 4))) list  '(1 2 3 4 5 6 7 8 9 10 11 12)) => ((1 2 3 4) (5 6) (7 8 9 10) (11 12))"))) ((cross-references (reference "Scheme source file" "map-n-bites" "general-ep/general-1.html#map-n-bites")) (kind "manual-page") (parameters (parameter "make-bite" "A function which returns the next bite. Signature: List, Int -> List. (The second parameter is a 1-based bite number).") (parameter "bite-transf" "A function which transform a bite: Signature: List, Int -> List. (The second parameter is a 1-based bite number).") (parameter "lst" "A list from which bites are taken, one at a time.")) (description "A variant of map-bites, which passes the bite number to both make-bite and to bite-transf. So the difference between map-n-bites and map-bites is whether bit-tranf takes a second parameter or not. With this function, the bite number is made available to the bite-transformation function. The first bite is number 1. ") (title "map-n-bites") (form (map-n-bites make-bite bite-transf lst)) (examples)) ((kind "manual-page") (parameters (parameter "make-bite" "A function which returns the next bite. Signature: List, Int -> List. (The second parameter is a 1-based bite number).") (parameter "bite-pred" "A bite predicate. Signature: List -> Boolean.") (parameter "lst" "A list from which bites are taken, one at a time.")) (description "Successively take bites of list with make-bite, apply the predicate bite-pred on the bite, and splice the bite into the resulting list if bite-pred is true for the bite. The bite number (starting with 1) is passed as the second parameter to make-bite. ") (title "filter-bites") (form (filter-bites make-bite bite-pred lst)) (cross-references (reference "Scheme source file" "filter-bites" "general-ep/general-1.html#filter-bites") (internal-references "Useful bite creators" "bite-while-element" "bite-of-length")) (examples (example "(filter-bites (bite-while-element symbol?) (lambda (bite) (even? (length bite))) '(a 1 c d 2 e f g 3 l)) => (a 1 e f g 3)") (example "(filter-bites (bite-while-accumulate + 0 (lambda (sum) (>= sum 5))) (lambda (bite) (even? (length bite))) '(0 1 2 1 2 3 4 0 -2 1 3 4)) => (3 4)"))) ((cross-references (reference "Scheme source file" "filter-map-bites" "general-ep/general-1.html#filter-map-bites")) (kind "manual-page") (parameters (parameter "make-bite" "A function which returns the next bite. Signature: List, Int -> List. (The second parameter is a 1-based bite number).") (parameter "bite-pred" "A bite predicate. Signature: List -> Boolean.") (parameter "bite-transf" "A function which transform a bite: Signature: List -> List. (Notice that this function only takes a single parameter).") (parameter "lst" "A list from which bites are taken, one at a time.")) (description "Filter bites, but additionally map the resulting bites with bite-transf after the filtering. ") (title "filter-map-bites") (form (filter-map-bites make-bite bite-pred bite-transf lst)) (examples (example "(filter-map-bites (bite-while-element number? 'sentinel \"alone\") (lambda (bite) (>= (length bite) 2)) list '(a b 1 2 c 3 d 4 5 6 e))  => ((1 2) (4 5 6))"))) ((kind "manual-page") (parameters (parameter "make-bite" "A function which selects a prefix of the list (a bite) for examination and possible transformation. The bite number (starting from 1) is passed to this function as the second parameter. Signature: List, Int -> List.") (parameter "bite-pred" "A function from a sublist (the bite) to a selection value. Signature: List -> integer. A positive integer serves as boolean true (select). A negative integer n serves as boolean false (deselect) and (- n) is the stepping value. A positive result r means that a prefix of r elements (typically equal to the length of the bite) is selected for transformation, and that the next bite starts r elements ahead. A negative result n means that the next byte taken by make-bite starts (- n) steps ahead. I.e., (-n) elements are passed untransformed to the result, and the start of the next bite is (- r) elements ahead.") (parameter "bite-transf" "A transformation function on bites. Signature: List -> List.") (parameter "lst" "A list of elements.")) (description "A variant of filter-map-bites which successively and step-wise applies apply bite-pred to prefixes of lst. The bites are constructed by the function make-bite. Prefix bites are examined by bite-pred with the purpose of deciding if the bite should be transformed with bite-transf, or forward bite stepping should be applied. In case of forward bite stepping, the step value determines a new start position of the next bite to be taken out of list. Those bites which are selected by the predicate are transformed by the transformation function, and spliced into the resulting list. Bites which are 'stepped over' are passed non-transformed. ") (misc "Use this function to impose structure on a list, by successively attempting multiple possible bites of the list. ") (title "step-and-map-bites") (form (step-and-map-bites make-bite bite-pred bite-transf lst)) (cross-references (reference "Scheme source file" "step-and-map-bites" "general-ep/general-1.html#step-and-map-bites") (internal-references "Useful bite creators" "bite-while-element" "bite-of-length") (internal-references "Variant with bite numbers" "step-and-map-n-bites")) (examples (example "(step-and-map-bites (lambda (lst . rest) (list-part 1 3 lst)) (lambda (bite) (if (even? (apply + bite)) (length bite) -1)) list '(0 1 2 1 2 3 4 0 -2 1 3 4 5)) => (0 (1 2 1) 2 3 (4 0 -2) (1 3 4) 5)"))) ((kind "manual-page") (parameters (parameter "make-bite" "A function which selects a prefix of the list (a bite) for examination and possible transformation. The bite number (starting from 1) is passed to this function as the second parameter. Signature: List, Int -> List.") (parameter "bite-pred" "A function from a sublist (the bite) to a selection value. Signature: List -> integer. A positive integer serves as boolean true (select). A negative integer serves as boolean false (deselect). A positive result r means that a prefix of r elements (typically equal to the length of the bite) is selected for transformation, and that the next bite starts r elements ahead. A negative result r means that (- r) elements are passed untransformed to the result, and that the start of the next potential bite is (- r) elements ahead.") (parameter "bite-transf" "A transformation function on bites and bite numbers. Signature: List, Int -> List.") (parameter "lst" "A list of elements.")) (description "A variant of step-and-map-bites that passes the bite number to bite-trans. ") (title "step-and-map-n-bites") (form (step-and-map-n-bites make-bite bite-pred bite-transf lst)) (cross-references (reference "Scheme source file" "step-and-map-n-bites" "general-ep/general-1.html#step-and-map-n-bites") (internal-references "More basic variant" "step-and-map-bites")) (examples)) ((kind "manual-section") (section-title "Other higher-order functions.") (section-body "")) ((cross-references (reference "Scheme source file" "negate" "general-ep/general-1.html#negate")) (kind "manual-page") (description "A higher order functions which negates the predicate p. Negate accepts a predicate and returns the negated predicate. ") (title "negate") (form (negate p)) (examples (example "((negate null?) (list 1 2 3)) => #t") (example "((negate (negate null?)) (list 1 2 3)) => #f"))) ((cross-references (reference "Scheme source file" "disjunction" "general-ep/general-1.html#disjunction")) (kind "manual-page") (description "Form the disjunction (logical or) of the two predicates p and q. ") (returns "a predicate") (title "disjunction") (form (disjunction p q)) (examples (example "(map (disjunction odd? even?) (list 1 2 3 4 5))  => (#t #t #t #t #t)"))) ((cross-references (reference "Scheme source file" "conjunction" "general-ep/general-1.html#conjunction")) (kind "manual-page") (description "Form the conjunction (logical and) of the two predicates p and q. ") (returns "a predicate") (title "conjunction") (form (conjunction p q)) (examples (example "(map (conjunction odd? even?) (list 1 2 3 4 5))  => (#f #f #f #f #f)"))) ((cross-references (reference "Scheme source file" "compose" "general-ep/general-1.html#compose")) (kind "manual-page") (description "Compose a list of functions to a single function. Each function in the list takes a single parameter. Handles the typical case of two functions manually to achieve better efficiency. ") (pre-condition "f-list is a proper list of length ast least one.") (title "compose") (form (compose . f-list)) (examples (example "((compose (lambda (x) (+ x 1)) (lambda (x) (* x 2))) 3) => 7") (example "((compose (lambda (x) (* x 2)) (lambda (x) (+ x 1))) 3) => 8"))) ((cross-references (reference "Scheme source file" "generate-leq" "general-ep/general-1.html#generate-leq")) (kind "manual-page") (description "Generate a less than or equal predicate from the enumeration-order. If p is the generated predicate, (p x y) is true if and only if (selector x) comes before (or at the same position) as (selector y) in the enumeration-order. Thus, (selector x) is assumed to give a value in enumeration-order. Comparison with elements in the enumeration-list is done with el-eq? ") (form "(generate-leq enumeration-order selector [el-eq?])") (title "generate-leq") (examples (example "(sort-list (list 3 3 5 5 7 7) (generate-leq (list 5 3 7) id-1 =)) => (5 5 3 3 7 7)"))) ((cross-references (reference "Scheme source file" "make-comparator" "general-ep/general-1.html#make-comparator")) (kind "manual-page") (description "Generate and return a comparison function from a 'less than' function lt, and a 'greater than' function gt. If com is a comparison function, (com x y) returns -1 if (lt x y), (com x y) returns 1 if (gt x y), else it returns 0. ") (pre-condition "If (lt x y) and (gt x y) cannot both be true.") (title "make-comparator") (form (make-comparator lt gt)) (examples (example "((make-comparator < >) 2 1) => 1") (example "((make-comparator < >) 1 2) => -1") (example "((make-comparator < >) 1 1) => 0") (example "(map-bites (bite-while-monotone (make-comparator < >)) list  '(1 2 1 2 1 2 3 4)) => ((1 2) (1 2) (1 2 3 4))"))) ((cross-references (reference "Scheme source file" "curry-generalized" "general-ep/general-1.html#curry-generalized")) (kind "manual-page") (description "Generalize f with ad hoc currying. f is a function which, in its native form, takes two or more parameters. The generalization allows f to act as a curried function. In case (curry-generalized f) only receives a single parameter, it returns a lambda function which waits for the remaining parameters. If two or more parameters are passed to f, f is applied on the parameters; In this case (curry-generalized f) is equivalent to f. ") (title "curry-generalized") (form (curry-generalized f)) (examples (example "(define gmap (curry-generalized map))") (example "(define gfilter (curry-generalized filter))") (example "((curry-generalized map) (lambda (n) (+ n 2)) '(1 2 3)) => (3 4 5)") (example "(procedure? ((curry-generalized map) (lambda (n) (+ n 2)))) => #t"))) ((kind "manual-section") (section-title "List and Sexpr functions.") (section-body "")) ((cross-references (reference "Scheme source file" "number-interval" "general-ep/general-1.html#number-interval")) (kind "manual-page") (parameters (parameter "f" "The lower limit of the interval. An integer number.") (parameter "t" "The upper limit of the interval. An integer number.")) (description "Return a list of all integer numbers from f to t. ") (returns "The list of numbers from (and including) f to (and including) t. Return the empty list if f is greater than t.") (title "number-interval") (form (number-interval f t)) (examples (example "(number-interval 1 5) => (1 2 3 4 5)") (example "(number-interval -5 1) => (-5 -4 -3 -2 -1 0 1)") (example "(number-interval 1 -5) => ()") (example "(number-interval 1 1) => (1)"))) ((cross-references (reference "Scheme source file" "proper-part" "general-ep/general-1.html#proper-part")) (kind "manual-page") (description "Return the proper part of an S-expression. ") (title "proper-part") (form (proper-part lst)) (examples (example "(proper-part '(a b c . d)) => (a b c)") (example "(proper-part (cons 'a 'b)) => (a)"))) ((cross-references (reference "Scheme source file" "first-improper-part" "general-ep/general-1.html#first-improper-part")) (kind "manual-page") (description "Return the first improper part of an S-expression ") (title "first-improper-part") (form (first-improper-part lst)) (examples (example "(first-improper-part (cons 'a 'b)) => b") (example "(first-improper-part '(a b c . e)) => e"))) ((cross-references (reference "Scheme source file" "make-list" "general-ep/general-1.html#make-list")) (kind "manual-page") (description "Return a list of n elements, each being el ") (title "make-list") (form (make-list n el)) (examples (example "(make-list 5 6)  => (6 6 6 6 6)") (example "(make-list 0 6)  => ()"))) ((cross-references (reference "Scheme source file" "replicate-to-length" "general-ep/general-1.html#replicate-to-length")) (kind "manual-page") (description "Replicate lst cyclically to a list of length lgt ") (title "replicate-to-length") (form (replicate-to-length lst lgt)) (examples (example "(replicate-to-length '(a b) 3) => (a b a)") (example "(replicate-to-length '(a b) 30) => (a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b)"))) ((cross-references (reference "Scheme source file" "flatten" "general-ep/general-1.html#flatten")) (kind "manual-page") (description "Flatten a list of lists to one list. ") (title "flatten") (form (flatten lst-of-lst)) (examples (example "(flatten (list (list '(a b c) '(d e)))) => ((a b c) (d e))") (example "(flatten (list '(a b c) '(d e) '(a b c) '(d e))) => (a b c d e a b c d e)") (example "(flatten '()) => ()"))) ((cross-references (reference "Scheme source file" "sum-list" "general-ep/general-1.html#sum-list")) (kind "manual-page") (description "Add all elments in a list of numbers ") (title "sum-list") (form (sum-list lst)) (examples (example "(sum-list '(1 2 3 4)) => 10") (example "(sum-list '()) => 0"))) ((cross-references (reference "Scheme source file" "merge-lists" "general-ep/general-1.html#merge-lists")) (kind "manual-page") (description "Merge list1 and list2. Let e1 be the head of list1 and e2 the head of list2. take e2 if (pred e1 e2) holds. Else e1 ") (title "merge-lists") (form (merge-lists list1 list2 pred)) (examples (example "(merge-lists '(1 2 3 4) '(5 6 7 8) (lambda (x y) (even? (+ x y)))) => (5 1 6 2 7 3 8 4)") (example "(merge-lists '(1 2 3 4) '(4 6 7 8) (lambda (x y) (even? (+ x y)))) => (1 4 6 2 7 3 8 4)"))) ((cross-references (reference "Scheme source file" "merge-lists-simple" "general-ep/general-1.html#merge-lists-simple")) (kind "manual-page") (description "Merge the two lists lst1 and lst2. lst1 provides the first element. When the shortets of the lists is exhausted, insert the rest of the other list. ") (title "merge-lists-simple") (form (merge-lists-simple lst1 lst2)) (examples (example "(merge-lists-simple '(a b c d)  '(1 2 3))  => (a 1 b 2 c 3 d)") (example "(merge-lists-simple '(1 2 3 4) '(5 6 7 8)) => (1 5 2 6 3 7 4 8)") (example "(merge-lists-simple '(1 2 3 4) '(5 6 7 8 9 10 11)) => (1 5 2 6 3 7 4 8 9 10 11)") (example "(merge-lists-simple '(1 2 3 4) '()) => (1 2 3 4)") (example "(merge-lists-simple '() '(1 2 3 4)) => (1 2 3 4)") (example "(merge-lists-simple '(5 6 7 8) '(1 2 3 4)) => (5 1 6 2 7 3 8 4)"))) ((kind "manual-page") (description "A simple linear list search function. Return the first element which satisfies the predicate pred. If no such element is found, return #f. Tail recursive and iterative. ") (title "find-in-list") (form (find-in-list pred lst)) (cross-references (reference "Scheme source file" "find-in-list" "general-ep/general-1.html#find-in-list") (internal-references "Similar string function" "find-in-string-by-predicate") (internal-references "Similar list function" "find-tail-in-list")) (examples (example "(find-in-list number? '(a b c 3 d e)) => 3") (example "(find-in-list number? '(3 4 5)) => 3") (example "(find-in-list number? '(a b c)) => #f"))) ((kind "manual-page") (description "A simple linear list search function which returns a suffix of the list. Return the longest possible tail of the list whose first element satisfies the predicate pred. If no such element is found, return the empty list. Tail recursive and iterative. ") (title "find-tail-in-list") (form (find-tail-in-list pred lst)) (cross-references (reference "Scheme source file" "find-tail-in-list" "general-ep/general-1.html#find-tail-in-list") (internal-references "Similar function" "find-in-list" "find-but-tail-in-list")) (examples (example "(find-tail-in-list number? '(x \"5\" 6 y \"7\")) => (6 y \"7\")") (example "(find-tail-in-list number? '(x \"5\" 6)) => (6)") (example "(find-tail-in-list number? '()) => ()"))) ((kind "manual-page") (description "A simple linear list search function which returns a prefix of the list. Return the shortest possible prefix of the list before an element that satisfies the predicate pred. If no such element is found, return the empty list. Tail recursive and iterative. ") (title "find-but-tail-in-list") (form (find-but-tail-in-list pred lst)) (cross-references (reference "Scheme source file" "find-but-tail-in-list" "general-ep/general-1.html#find-but-tail-in-list") (internal-references "Similar function" "find-in-list" "find-tail-in-list")) (examples (example "(find-but-tail-in-list number? '(a b 1 c d 2 e)) => (a b)") (example "(find-but-tail-in-list number? '(1 c d 2 e)) => ()") (example "(find-but-tail-in-list number? '()) => ()") (example "(find-but-tail-in-list number? '(a 1 c d 2 e)) => (a)"))) ((cross-references (reference "Scheme source file" "traverse-cons-cells" "general-ep/general-1.html#traverse-cons-cells")) (kind "manual-page") (parameters (parameter "pred" "a cons-cell predicate.") (parameter "cell" "a pair (such as a list).")) (description "Return the list of all cons cells reachable from cell which satisfy pred. If a cell c is accepted by the predicate, the cells of (cdr cell) are also examined for matches. ") (pre-condition "cell is a cons cell (satisfies pair?)") (title "traverse-cons-cells") (form (traverse-cons-cells pred cell)) (examples)) ((cross-references (reference "Scheme source file" "butlast" "general-ep/general-1.html#butlast")) (kind "manual-page") (description "Return all but the last element of a list. Quick and dirty version. ") (pre-condition "lst is not empty.") (title "butlast") (form (butlast lst)) (examples (example "(butlast '(1 2 3 4)) => (1 2 3)") (example "(butlast '(1)) => ()") (example "(map-bites (lambda (lst . r) (sublist-until number? lst)) (lambda (lst) (list (list-to-string (butlast lst) \",\"))) '(a b 1 c d 2 e f g h i j 3 k L 4)) => (\"a,b\" \"c,d\" \"e,f,g,h,i,j\" \"k,L\")"))) ((cross-references (reference "Scheme source file" "last" "general-ep/general-1.html#last")) (kind "manual-page") (description "Return the last element of a list. Quick and dirty version. ") (pre-condition "lst is not empty.") (title "last") (form (last lst)) (examples (example "(last '(1)) => 1") (example "(last '(1 2 3)) => 3") (example "(last '(1 2)) => 2"))) ((cross-references (reference "Scheme source file" "remove-duplicates" "general-ep/general-1.html#remove-duplicates")) (kind "manual-page") (description "Remove duplicate elements from list. A non-destructive function. This function uses the Scheme function equal? (via the Scheme function member) for comparison of elements. ") (title "remove-duplicates") (form (remove-duplicates lst)) (examples (example "(remove-duplicates '(1 2 3 4 5)) => (1 2 3 4 5)") (example "(remove-duplicates '(1 2 3 2 3 4 5)) => (1 2 3 4 5)") (example "(remove-duplicates '(1 2 3 4 5)) => (1 2 3 4 5)") (example "(remove-duplicates '(1 2 3 2 3 4 5)) => (1 2 3 4 5)") (example "(remove-duplicates '()) => ()") (example "(remove-duplicates '(1 1 1 1 1)) => (1)"))) ((cross-references (reference "Scheme source file" "remove-duplicates-with-selection" "general-ep/general-1.html#remove-duplicates-with-selection")) (kind "manual-page") (description "A variant of remove-duplicates with a selector function. This function applies a selector function before comparisons and member is called. This function uses equal? for comparison of elements. ") (title "remove-duplicates-with-selection") (form (remove-duplicates-with-selection lst selector)) (examples (example "(remove-duplicates-with-selection (map (lambda (n) (list 'x n)) (list 1 1 2 2 3 3 4 4)) cadr) => ((x 1) (x 2) (x 3) (x 4))"))) ((cross-references (reference "Scheme source file" "element-before" "general-ep/general-1.html#element-before")) (kind "manual-page") (parameters (parameter "el" "The element constituent that we are looking for.") (parameter "lst" "The list to search.") (parameter "selector" "A function that selects a constituent of an element of the list.") (parameter "eq-pred" "The equality predicate on list constituents. Can be used to compare el with (selector e) for any element e in lst. Defaults to eq?.")) (description "Return the element of lst just before el, or #f if no such element exists. More precisely, return the element of lst just before the element e, where e contains el in the sense that (eq? (selector e) el). Via use of the optional parameter, comparison can be done by use of another function than eq?. ") (form "(element-before el lst selector [eq-pred])") (returns "An element of the list lst, preceding the element containing el.\n Or #f in case such an element does not exist.") (title "element-before") (examples (example "(element-before 4 '(1 2 3 4 5) id-1) => 3") (example "(element-before 1 '(1 2 3 4 5) id-1) => #f") (example "(element-before 6 '(1 2 3 4 5) id-1) => #f") (example "(element-before 5 '(1 2 3 4 5) id-1 =) => 4"))) ((cross-references (reference "Scheme source file" "element-after" "general-ep/general-1.html#element-after")) (kind "manual-page") (parameters (parameter "el" "The element constituent that we are looking for.") (parameter "lst" "The list to search.") (parameter "selector" "A function that selects a constituent of an element of the list.") (parameter "eq-pred" "The equality predicate on list constituents. Can be used to compare el with (selector e) for any element e in lst. Defaults to eq?.")) (description "Return the element of lst just after el, or #f if no such element exists. More precisely, return the element of lst just after the element e, where e contains el in the sense that (eq? (selector e) el). Via use of the optional parameter, comparison can be done by use of another function than eq?. ") (form "(element-after el lst selector [eq-pred])") (returns "An element of the list lst, following the element containing el. Of #f in case such an element does not exist.") (title "element-after") (examples (example "(element-after 5 '(1 2 3 4 5) id-1 =) => #f") (example "(element-after 3 '(1 2 3 4 5) id-1 =) => 4"))) ((cross-references (reference "Scheme source file" "list-difference" "general-ep/general-1.html#list-difference")) (kind "manual-page") (parameters (parameter "lst1" "The list from which lst1 is subtracted") (parameter "lst2" "The list to subtract from lst1") (parameter "is-eq?" "the equalilty function used for element comparison. The default comparison function is eq?")) (description "Remove the elements of lst2 from lst1. This function is a non-destructive function. ") (form "(list-difference lst1 lst2 [is-eq?])") (returns "The elements in lst1 which are not member of lst2") (title "list-difference") (examples (example "(list-difference (list 1 2 3 4 5) (list 1 2)) => (3 4 5)") (example "(list-difference (list 1 2 3 4 5) (list 1 6)) => (2 3 4 5)") (example "(list-difference (list 1 2 3 4 5) '()) => (1 2 3 4 5)") (example "(list-difference '() (list 1 2 3 4 5)) => ()"))) ((kind "manual-page") (description "Return a list of lists of elements from lst. Each sub list is of length n. Take elements consequtive (by rows) and put them into sublists. ") (title "sublist-by-rows") (form (sublist-by-rows n lst)) (cross-references (reference "Scheme source file" "sublist-by-rows" "general-ep/general-1.html#sublist-by-rows") (internal-references "More general function" "sublist-by-predicate")) (examples (example "(sublist-by-rows 3 (list 1 2 3 4 5 6)) => ((1 2 3) (4 5 6))") (example "(sublist-by-rows 3 (list 1 2 3 4 5 6 7)) => ((1 2 3) (4 5 6) (7))") (example "(sublist-by-rows 3 (list )) => (())"))) ((cross-references (reference "Scheme source file" "sublist-by-2columns" "general-ep/general-1.html#sublist-by-2columns")) (kind "manual-page") (description "Return sublists of lst in two column format. Thus each produced sublist is of length 2. Good for presentation of the list in two columns, column by column. In cases there is an uneven number of elements in lst, we add extra (the second parameter). ") (title "sublist-by-2columns") (form (sublist-by-2columns lst extra)) (examples (example "(sublist-by-2columns (list 1 2 3 4 5 6 7 8) 11) => ((1 5) (2 6) (3 7) (4 8))") (example "(sublist-by-2columns '(1) 11) => ((1 11))"))) ((cross-references (reference "Scheme source file" "sublist-by-columns" "general-ep/general-1.html#sublist-by-columns")) (kind "manual-page") (description "Return sublists of lst in an n column format. Thus each produced sublist is of length n (the first parameter). In cases there is not enough elements, we add extra (the last parameter). ") (title "sublist-by-columns") (form (sublist-by-columns n lst extra)) (examples (example "(sublist-by-columns 3 (list 1 2 3 4 5 6 7 8) 11) => ((1 4 7) (2 5 8) (3 6 11))") (example "(sublist-by-columns 3 (list 1 2 3 4 5 6 7 8 9) 11) => ((1 4 7) (2 5 8) (3 6 9))") (example "(sublist-by-columns 3 (list 1) 11) => ((1 11 11))"))) ((cross-references (reference "Scheme source file" "multi-pair" "general-ep/general-1.html#multi-pair")) (kind "manual-page") (parameters (parameter "lst-of-lst" "A list of lists.")) (description "Pair up first elements, second elements of a list of lists. All first elements of the sublists are handled first, whereafter we take all second elements, etc. ") (pre-condition "All lists in lst-of-list are of equal lengths.") (title "multi-pair") (form (multi-pair lst-of-lst)) (examples (example "(multi-pair '((1 2) (3 4) (5 6))) => ((1 3 5) (2 4 6))") (example "(multi-pair '((1 2 3) (4 5 6) (6 7 8))) => ((1 4 6) (2 5 7) (3 6 8))") (example "(multi-pair '(() () ())) => ()"))) ((cross-references (reference "Scheme source file" "sublist-by-predicate" "general-ep/general-1.html#sublist-by-predicate")) (kind "manual-page") (parameters (parameter "lst" "An arbitrary list.") (parameter "p" "A predicate of the form (lambda (cur prev n) ...) where cur is the current element, prev is the preceding element of cur, and n is the number of elements preceding cur in the original list lst.")) (description "Return a list of sublists of elements from lst controlled by a predicate p. The sublists are formed by examining elements from lst. The predicate p decides when to start a new sublist. Thus, when p evaluates to true (on some element e and its preceding element c) we start a new sublist (whose first element becomes e). The predicate p is not activated on (car lst). This function generalizes sublist-by-rows. ") (title "sublist-by-predicate") (form (sublist-by-predicate lst p)) (examples (example "(sublist-by-predicate '(a b 1 c #f 2 f g) (lambda (c p n) (number? c))) => ((a b) (1 c #f) (2 f g))") (example "(sublist-by-predicate '(a b 1 c #f 2 f g) (lambda (c p n) (boolean? c))) => ((a b 1 c) (#f 2 f g))") (example "(sublist-by-predicate '(a b 1 c d #t f g) (lambda (c p n) (and (number? c) (boolean? p)))) => ((a b 1 c d #t f g))") (example "(sublist-by-predicate '(a b 1 c #t 2 f g) (lambda (c p n) (and (number? c) (boolean? p)))) => ((a b 1 c #t) (2 f g))") (example "(sublist-by-predicate '(a b 1 c #f 2 f g) (lambda (c p n) (and (number? c) (< n 5)))) => ((a b) (1 c #f 2 f g))"))) ((cross-references (reference "Scheme source file" "remove-duplicates-by-predicate" "general-ep/general-1.html#remove-duplicates-by-predicate")) (kind "manual-page") (parameters (parameter "lst" "A list") (parameter "p" "A predicate: element x element -> boolean.")) (description "Remove duplicates from lst. A pair of duplicates satisfy the predicate p. In case of duplicates, keep the first one in the result. ") (title "remove-duplicates-by-predicate") (form (remove-duplicates-by-predicate lst p)) (examples (example "(remove-duplicates-by-predicate '(a b c a) eq?) => (a b c)") (example "(remove-duplicates-by-predicate '(a b a b) eq?) => (a b)") (example "(remove-duplicates-by-predicate '(a a a) eq?) => (a)") (example "(remove-duplicates-by-predicate '() eq?) => ()") (example "(remove-duplicates-by-predicate '(a b c d e) eq?) => (a b c d e)"))) ((cross-references (reference "Scheme source file" "duplicates-by-predicate" "general-ep/general-1.html#duplicates-by-predicate")) (kind "manual-page") (parameters (parameter "lst" "A list.") (parameter "p" "A predicate element x element -> boolean.")) (description "Return the duplicates in lst. The duplicates are returned in the order of their fist occurence in lst. Comparison of elements is done by the predicate p. ") (title "duplicates-by-predicate") (form (duplicates-by-predicate lst p)) (examples (example "(duplicates-by-predicate '(a b c a b) eq?) => (a b)") (example "(duplicates-by-predicate '(a b c) eq?) => ()") (example "(duplicates-by-predicate '(a a a) eq?) => (a)") (example "(duplicates-by-predicate '(a 1 2 3 a) eq?) => (a)"))) ((cross-references (reference "Scheme source file" "member-by-predicate" "general-ep/general-1.html#member-by-predicate")) (kind "manual-page") (parameters (parameter "el" "An element.") (parameter "lst" "A list.") (parameter "p" "A predicate: element x element -> boolean ")) (description "Is el member of lst by means of the predicate p. If el is member, return the suffix of the list in which the first element (and el) satisfy the predicate. Else return #f. The element el and elements of lst are compared by p, el as the first one. ") (title "member-by-predicate") (form (member-by-predicate el lst p)) (examples (example "(member-by-predicate 'a '(1 2 3 a b) eq?) => (a b)") (example "(member-by-predicate 'c '(1 2 3 a b) eq?) => #f") (example "(member-by-predicate 'a '(a 1 2 3 a b) eq?) => (a 1 2 3 a b)") (example "(member-by-predicate 'a '() eq?) => #f") (example "(member-by-predicate 'a '(a) eq?) => (a)"))) ((cross-references (reference "Scheme source file" "list-intersection-by-predicate" "general-ep/general-1.html#list-intersection-by-predicate")) (kind "manual-page") (parameters (parameter "pred:" "Element x Element -> Boolean.") (parameter "lst1" "A list.") (parameter "lst2" "A list.") (parameter "pred" "An element predicat: Element x Element -> Boolean.")) (description "Return the elements of lst1 and lst2 which belong to both of the lists. Elements will never occur more than once in the result. Element comparsion is done by pred. Performance: O (length lst1) x (length lst2). ") (title "list-intersection-by-predicate") (form (list-intersection-by-predicate lst1 lst2 pred)) (examples (example "(list-intersection-by-predicate '(a b c d a) '(a d) eq?) => (a d)") (example "(list-intersection-by-predicate '(a b c d a) '(a d c b a) eq?) => (a b c d)") (example "(list-intersection-by-predicate '(a a b b) '(a) eq?) => (a)") (example "(list-intersection-by-predicate '(a a b b) '() eq?) => ()") (example "(list-intersection-by-predicate '() '() eq?) => ()") (example "(list-intersection-by-predicate '(a b c d a) '(a a a a) eq?) => (a)"))) ((cross-references (reference "Scheme source file" "cut-list-by-predicate" "general-ep/general-1.html#cut-list-by-predicate")) (kind "manual-page") (parameters (parameter "lst" "A list") (parameter "pred" "An element predicate: Element -> Boolean.")) (description "Cut the tail of lst; The tail to be cutted starts with an element which fulfils pred. Notice that the first element which fulfils the predicate is not included in the resulting list. If no element in the list fulfils the predicate, a shallow copy of the list is returned. ") (misc "This is a pure function, which makes a shallow copy of a prefix of the list. ") (title "cut-list-by-predicate") (form (cut-list-by-predicate lst pred)) (examples (example "(cut-list-by-predicate '(a b c 3 d e 4 f) number?) => (a b c)") (example "(cut-list-by-predicate '(a b 4) boolean?) => (a b 4)") (example "(cut-list-by-predicate '() boolean?) => ()") (example "(cut-list-by-predicate '(a b 4) (lambda (x) (eq? x 'b))) => (a)"))) ((cross-references (reference "Scheme source file" "subset-of-by-predicate" "general-ep/general-1.html#subset-of-by-predicate")) (kind "manual-page") (description "Return whether every element in set-list-1 (a list) is a member of set-list-2, compared by the comparator comp. This corresponds to a subset operations on sets, represented by a list. comp: el x el -> boolean. ") (title "subset-of-by-predicate") (form (subset-of-by-predicate set-list-1 set-list-2 comp)) (examples (example "(subset-of-by-predicate (list 1 2 3) (list 1 2 3 4) =) => #t") (example "(subset-of-by-predicate (list 1 2 3 4) (list 1 2 3) =) => #f") (example "(subset-of-by-predicate '() (list 1 2) =) => #t") (example "(subset-of-by-predicate (list 1 2) '() =) => #f"))) ((cross-references (reference "Scheme source file" "index-in-list-by-predicate" "general-ep/general-1.html#index-in-list-by-predicate")) (kind "manual-page") (parameters (parameter "lst" "A list") (parameter "el" "An element in the list.") (parameter "c" "A function with the signature: element x element -> boolean.")) (description "Return the index position of the fist occurrence of el in list. The first element is counted as element number 0. If the element el is not in the list lst, return #f. Comparison of list elements is done by the binary comparison function c. ") (title "index-in-list-by-predicate") (form (index-in-list-by-predicate lst el c)) (examples (example "(index-in-list-by-predicate '(a b c d e) 'c eq?) => 2") (example "(index-in-list-by-predicate '(a b c d e) 'f eq?) => #f") (example "(index-in-list-by-predicate '() 'f eq?) => #f") (example "(index-in-list-by-predicate '(a b c d e) 'a eq?) => 0") (example "(index-in-list-by-predicate '(a b c d e) 'e eq?) => 4"))) ((cross-references (reference "Scheme source file" "sublistify" "general-ep/general-1.html#sublistify")) (kind "manual-page") (parameters (parameter "lst" "A list.") (parameter "sublist-length" "A positive integer.")) (description "Divide the elements of lst into sublists of sublist-length. In case that sublist-length does not divide (length lst) the last sublist will be shorter than the others. ") (title "sublistify") (form (sublistify lst sublist-length)) (examples (example "(sublistify '(1 2 3 4 5 6 7 8 9) 4) => ((1 2 3 4) (5 6 7 8) (9))") (example "(sublistify '(1 2 3 4 5 6 7 8 9) 1) => ((1) (2) (3) (4) (5) (6) (7) (8) (9))") (example "(sublistify '(1 2 3 4 5 6 7 8 9) 9) => ((1 2 3 4 5 6 7 8 9))") (example "(sublistify '(1 2 3 4 5 6 7 8 9) 8) => ((1 2 3 4 5 6 7 8) (9))"))) ((cross-references (reference "Scheme source file" "front-sublist" "general-ep/general-1.html#front-sublist")) (kind "manual-page") (parameters (parameter "lst" "A list") (parameter "n" "A non-negative integer.")) (description "Return the first n elements of lst. This function makes a shallow copy of the first n elements of lst. Thus, it allocates n new cons cells. If n is equal or greater than the length of lst, lst is returned without any copying at all. ") (misc "Another function, list-prefix, exists which is almost identical to front-sublist. ") (title "front-sublist") (form (front-sublist lst n)) (examples (example "(front-sublist '(a b c d e) 2) => (a b)") (example "(front-sublist '(a b c d e) 5) => (a b c d e)") (example "(front-sublist '(a b c d e) 6) => (a b c d e)") (example "(front-sublist '(a b c d e) 0) => ()") (example "(front-sublist '() 0) => ()") (example "(front-sublist '() 1) => ()"))) ((cross-references (reference "Scheme source file" "front-sublist-while" "general-ep/general-1.html#front-sublist-while")) (kind "manual-page") (parameters (parameter "lst" "An arbitrary list.") (parameter "ok?" "A list element predicate, which is applied successively on elements of the list.") (parameter "max-length" "An integer that gives the maximum number of elements to be returned by this function.")) (description "Return a list prefix of lst, of which all elements satisfy the predicate ok?. The returned prefix has at most max-length elements. This function makes a shallow copy of at most max-length elements of lst. Thus, it allocates a number of new cons cells. ") (returns "A prefix of lst, of length at most max-length. All elements in the result satisfy the predicate ok?") (title "front-sublist-while") (form (front-sublist-while lst ok? max-length)) (examples (example "(front-sublist-while '(1 2 3 a 4 5 b 6) number? 7) => (1 2 3)") (example "(front-sublist-while '(1 2 3 a 4 5 b 6) number? 2) => (1 2)") (example "(front-sublist-while '(1 2 3 a 4 5 b 6) number? 0) => ()"))) ((cross-references (reference "Scheme source file" "rear-sublist" "general-ep/general-1.html#rear-sublist")) (kind "manual-page") (parameters (parameter "lst" "A list.") (parameter "n" "A non-negative integer.")) (description "Return the last n elements of lst. This function returns a reference to an appropriate tail of lst, involving only the last n elements. If n is equal to or larger than (length lst), just return lst. ") (title "rear-sublist") (form (rear-sublist lst n)) (examples (example "(rear-sublist '(a b c d e) 3) => (c d e)") (example "(rear-sublist '(c d e) 3) => (c d e)") (example "(rear-sublist '(c d) 3) => (c d)") (example "(rear-sublist '(c) 3) => (c)") (example "(rear-sublist '() 3) => ()") (example "(rear-sublist '(a b c d e) 0) => ()") (example "(rear-sublist '() 0) => ()"))) ((cross-references (reference "Scheme source file" "list-prefix-while" "general-ep/general-1.html#list-prefix-while")) (kind "manual-page") (description "Return a prefix of lst as long as the predicate holds. ") (title "list-prefix-while") (form (list-prefix-while lst predicate)) (examples (example "(list-prefix-while '(a b c 1 2 d e) symbol?) => (a b c)") (example "(list-prefix-while '(1 2 d e) symbol?) => ()") (example "(list-prefix-while '() symbol?) => ()"))) ((cross-references (reference "Scheme source file" "list-part" "general-ep/general-1.html#list-part")) (kind "manual-page") (description "Return the sublist consisting of element a to element b of the list lst. If a is smaller than the length of the list, and b is larger than the length of the list, return from element number a and the rest of the list. If a is larger than the length of the list, return the empty list. Both element number a and b are included in the resulting list. The first element counts as element number 1. ") (pre-condition "a >= 1, a <= b and a and b are postive integers.") (misc "Please notice that the sligthly unusual convention that the first element of the list is number 1, not number 0.") (title "list-part") (form (list-part a b lst)) (examples (example "(list-part 3 5 '(a b c d e f g h)) = (c d e)") (example "(list-part 3 5 '(a b c d e f g h)) => (c d e)") (example "(list-part 3 5 '(a b c d e)) => (c d e)") (example "(list-part 1 5 '(a b c d e)) => (a b c d e)") (example "(list-part 1 5 '()) => ()") (example "(list-part 1 3 '(a b)) => (a b)") (example "(list-part 2 3 '(a b)) => (b)") (example "(list-part 3 4 '(a b)) => ()") (example "(map-bites (lambda (lst . r) (list-part 1 3 lst)) list '(a b c d e f g h i j k l)) => ((a b c) (d e f) (g h i) (j k l))") (example "(map-bites (lambda (lst . r) (list-part 1 3 lst)) list '(a b c d e f g h i j k l)) => ((a b c) (d e f) (g h i) (j k l))") (example "(step-and-map-bites (lambda (lst . rest) (list-part 1 3 lst)) (lambda (bite) (if (even? (apply + bite)) (length bite) -1)) list '(0 1 2 1 2 3 4 0 -2 1 3 4 5)) => (0 (1 2 1) 2 3 (4 0 -2) (1 3 4) 5)"))) ((cross-references (reference "Scheme source file" "sublist-of-list" "general-ep/general-1.html#sublist-of-list")) (kind "manual-page") (parameters (parameter "lst" "A list.") (parameter "from-pred" "A list element predicate. Selects the first element of the result.") (parameter "end-pred" "A list element predicate. Selects the first element after the last element of the result. ")) (description "Returns a sublist of list, controlled by the list element predicates from-pred and end-pred. The first element of the resulting list fullfils from-pred. The last element is the element before the element that fullfils end-pred. If from-pred is true on an element and to-pred is false on every element in list, a suffix of the list is returned. In other cases, if one or both of the predicates return false on every element the empty list is returned. ") (title "sublist-of-list") (form (sublist-of-list lst from-pred end-pred)) (examples (example "(sublist-of-list '(a b c 0 1 2 #t a b c) number? boolean?) => (0 1 2)") (example "(sublist-of-list '(a b c 0 1 2 #t a b c) (lambda (x) #t) number?) => (a b c)") (example "(sublist-of-list '(a b c 0 #t a b c) number? boolean?) => (0)") (example "(sublist-of-list '(a b c #t a b c) number? boolean?) => ()") (example "(sublist-of-list '(a b c 0 1 2 #t a b c) boolean? number?) => ()") (example "(sublist-of-list '(a b c 0 1 2 #t a b c) number? (lambda (x) #f)) => (0 1 2 #t a b c)") (example "(sublist-of-list '(a b c 0 1 2 #t a b c) (lambda (x) #f) number?) => ()") (example "(sublist-of-list '(a b c 0 1 2 #t a b c) (lambda (x) #t) (lambda (x) #f)) => (a b c 0 1 2 #t a b c)"))) ((cross-references (reference "Scheme source file" "sublist-until" "general-ep/general-1.html#sublist-until")) (kind "manual-page") (parameters (parameter "until-fn" "An element prediate function. Signature: element-type -> boolean") (parameter "lst" "A list.")) (description "Return a prefix of lst until, and including, the element accepted by until-fn. More precisely: apply until-fn on successive elements of lst, and return the longest possible prefix of list for which until-fn returns false on all elements followed by the element on which until-fn returns true. If until-fn returns false on all elements, return a shallow copy of lst. ") (title "sublist-until") (form (sublist-until until-fn lst)) (examples (example "(sublist-until number? '(a b c 1 d e 2 f)) => (a b c 1)") (example "(sublist-until number? '(1 d e 2 f)) => (1)") (example "(sublist-until number? '(a b c d e)) => (a b c d e)") (example "(sublist-until (lambda (e) #t) '(a b c)) => (a)") (example "(map-bites (lambda (lst . r) (sublist-until number? lst)) (lambda (lst) (list (list-to-string (butlast lst) \",\"))) '(a b 1 c d 2 e f g h i j 3 k L 4)) => (\"a,b\" \"c,d\" \"e,f,g,h,i,j\" \"k,L\")"))) ((cross-references (reference "Scheme source file" "list-tail-flex" "general-ep/general-1.html#list-tail-flex")) (kind "manual-page") (parameters (parameter "lst" "A list") (parameter "n" "A non-negative integer.")) (description "Return the sublist of lst obtained by omitting the first n elements. Returns the empty list if n is larger than the length of lst. ") (misc "This function is like list-tail, but with a weaker precondition.") (title "list-tail-flex") (form (list-tail-flex lst n)) (examples (example "(list-tail-flex '(a b c) 2) => (c)") (example "(list-tail-flex '(a b c) 0) => (a b c)") (example "(list-tail-flex '(a b c) 4) => ()") (example "(list-tail-flex '() 0) => ()") (example "(list-tail-flex '() 1) => ()"))) ((cross-references (reference "Scheme source file" "find-index-in-list" "general-ep/general-1.html#find-index-in-list")) (kind "manual-page") (description "Find the index of the first element in lst that satisfies the element predicate pred. The first element counts as number 0. ") (title "find-index-in-list") (form (find-index-in-list lst pred)) (examples (example "(find-index-in-list '(a b c 1 2 d) number?) => 3") (example "(find-index-in-list '(0 a b c 1 2 d) number?) => 0") (example "(find-index-in-list '() number?) => #f") (example "(find-index-in-list '(a b c) number?) => #f") (example "(find-index-in-list '(0 1) number?) => 0") (example "(find-index-in-list '(a b c 0) number?) => 3"))) ((cross-references (reference "Scheme source file" "shallow-copy-list" "general-ep/general-1.html#shallow-copy-list")) (kind "manual-page") (description "Return a shallow copy of lst. Only the top-level list structure is copied. ") (title "shallow-copy-list") (form (shallow-copy-list lst)) (examples)) ((cross-references (reference "Scheme source file" "increasing-list-with-noice?" "general-ep/general-1.html#increasing-list-with-noice?")) (kind "manual-page") (description "Return if lst has increasing elements relative to the comparator. Only elements that do not satisfy noice-fn are taken into account. This function only deliver meaningful results if the non-noice part of lst is of at least length 2. In other cases it just returns #t ") (title "increasing-list-with-noice?") (form (increasing-list-with-noice? comparator noice-fn lst)) (examples)) ((cross-references (reference "Scheme source file" "increasing-list?" "general-ep/general-1.html#increasing-list?")) (kind "manual-page") (description "Return if lst has increasing elements relative to the comparator. This function only deliver meaningful results if lst is of at least length 2. In other cases it just returns #t ") (title "increasing-list?") (form (increasing-list? comparator lst)) (examples)) ((cross-references (reference "Scheme source file" "decreasing-list-with-noice?" "general-ep/general-1.html#decreasing-list-with-noice?")) (kind "manual-page") (description "Return if lst has decreasing elements relative to the comparator. Only elements that do not satisfy noice-fn are taken into account. This function only deliver meaningful results if the non-noice part of lst is of at least length 2. In other cases it just returns #t ") (title "decreasing-list-with-noice?") (form (decreasing-list-with-noice? comparator noice-fn lst)) (examples)) ((cross-references (reference "Scheme source file" "decreasing-list?" "general-ep/general-1.html#decreasing-list?")) (kind "manual-page") (description "Return if lst has decreasing elements relative to the comparator. This function only deliver meaningful results if lst is of at least length 2. In other cases it just returns #t ") (title "decreasing-list?") (form (decreasing-list? comparator lst)) (examples)) ((cross-references (reference "Scheme source file" "list-but-ref" "general-ep/general-1.html#list-but-ref")) (kind "manual-page") (parameters (parameter "lst" "A list of arbitrary elements ") (parameter "n" "An integer number.")) (description "Return a copy of all elements in lst apart from element number n. If n is not between 0 and n-1, this function will return a copy of lst. The first elements is number 0. ") (title "list-but-ref") (form (list-but-ref lst n)) (examples (example "(list-but-ref '(a b c d e f g h) 3) => (a b c e f g h)") (example "(list-but-ref '(a b c d e f g h) 0) => (b c d e f g h)") (example "(list-but-ref '(a b c d e f g h) 7) => (a b c d e f g)") (example "(list-but-ref '(a b c d e f g h) 10) => (a b c d e f g h)") (example "(list-but-ref '() 2) => ()") (example "(list-but-ref '() 0) => ()") (example "(list-but-ref '(a a a a) 2) => (a a a)"))) ((cross-references (reference "Scheme source file" "shuffle-list" "general-ep/general-1.html#shuffle-list")) (kind "manual-page") (description "Shuffle the elements of the list lst randomly. This function relies on a function (random m), where m is an integer, which returns a number between 0 and m-1. Seeding of random is assumed to take place in the context of a call to suffle-list. ") (title "shuffle-list") (form (shuffle-list lst)) (examples (example "(sort-list (shuffle-list '(1 2 3 4 5 6 7 8 9)) <=) => (1 2 3 4 5 6 7 8 9)"))) ((kind "manual-section") (section-title "Vector functions.") (section-body "")) ((cross-references (reference "Scheme source file" "binary-search-in-vector" "general-ep/general-1.html#binary-search-in-vector")) (kind "manual-page") (parameters (parameter "v" "The vector to search in.") (parameter "el" "The element to search for in the vector. el is comparabel with (sel ve) for a given vector element.") (parameter "sel" "A function that can be applied on vector elements. ") (parameter "el-eq?" "An equality function that can be applied on el and on (sel ve) for a given vector element.") (parameter "el-leq?" "A less than or equal function that can be applied on el and vector elements (sel ve).")) (description "Search for an element el in the sorted vector v. More specifically, el is compared to (sel ve), where ve is a element from the vector v. Comparison is done by the binary predicate el-eq? which works on selected values. Thus (el-eq? (sel x) el) makes sense for an element x in the vector. Ordering in the vector is defined by the binary 'less-than-equal predicate' el-leq? which compares selected values. Thus (el-leq (sel x) (sel y)) makes sense for x and y being elements in the vector v. ") (returns "An element in the vector, if found as described above, or #f.") (title "binary-search-in-vector") (form (binary-search-in-vector v el sel el-eq? el-leq?)) (examples)) ((kind "manual-section") (section-title "Conversion functions.") (section-body " In this category we provide a number of useful conversion functions. Several of these are of the form (as-type xxx), where type determines the target type of the conversion.<p> This section includes a function number-in-base which converts a decimal number to a number in another number system.")) ((cross-references (reference "Scheme source file" "char->string" "general-ep/general-1.html#char->string")) (kind "manual-page") (description "Convert a character to a string ") (title "char->string") (form (char->string ch)) (examples (example "(char->string #\\a) => \"a\"") (example "(char->string #\\\\) => \"\\\\\""))) ((cross-references (reference "Scheme source file" "as-string" "general-ep/general-1.html#as-string")) (kind "manual-page") (description "Convert x to a string. Conversion of numbers, symbols, strings, booleans, characters, vectors, proper lists and improper lists are supported. ") (title "as-string") (form (as-string x)) (examples (example "(as-string \"abc\") => \"abc\"") (example "(as-string 'abc) => \"abc\"") (example "(as-string 123) => \"123\"") (example "(as-string #t) => \"true\"") (example "(as-string #f) => \"false\"") (example "(as-string #\\a) => \"a\"") (example "(as-string (list \"abc\" 'abc 123 #t #f #\\a)) => \"(abc abc 123 true false a)\"") (example "(as-string #(\"abc\" 'abc 123 #t #f #\\a)) => \"#(abc (quote abc) 123 true false a)\"") (example "(as-string #(1 2 3)) => \"#(1 2 3)\"") (example "(as-string (cons 1 2)) => \"(1  . 2)\""))) ((cross-references (reference "Scheme source file" "as-quoted-string" "general-ep/general-1.html#as-quoted-string")) (kind "manual-page") (description "Convert x to a string, in which string constituents themselves are quoted. Good for output and messages, in which strings should appear in string quotes. ") (title "as-quoted-string") (form (as-quoted-string x)) (examples (example "(as-quoted-string \"abc\") => \"\\\"abc\\\"\"") (example "(as-quoted-string 123) => \"123\"") (example "(as-quoted-string (list \"abc\" 'abc 123 #t #f #\\a)) => \"(\\\"abc\\\" abc 123 true false a)\""))) ((cross-references (reference "Scheme source file" "as-symbol" "general-ep/general-1.html#as-symbol")) (kind "manual-page") (description "Convert x to a symbol. String, symbols, booleans, and characters are supported ") (title "as-symbol") (form (as-symbol x)) (examples (example "(as-symbol 'sym) => sym") (example "(as-symbol \"sym\") => sym") (example "(as-symbol #\\s) => s") (example "(as-symbol #t) => true") (example "(as-symbol #f) => false") (example "(as-symbol (list 1 2 3)) => #f") (example "(as-symbol #(1 2 3)) => #f"))) ((cross-references (reference "Scheme source file" "as-number" "general-ep/general-1.html#as-number")) (kind "manual-page") (description "Convert x to a number. Strings, numbers, chars and booleans are supported. Strings with digits are converted using string->number, chars are converted with char->integer, true is converted to 1, and false to 0. ") (title "as-number") (form (as-number x)) (examples (example "(as-number \"123\") => 123") (example "(as-number \"123a\") => #f") (example "(as-number #\\a) => 97") (example "(as-number #\\A) => 65") (example "(as-number #f) => 0") (example "(as-number #t) => 1") (example "(as-number (list 1 2 3)): ERROR"))) ((cross-references (reference "Scheme source file" "as-char" "general-ep/general-1.html#as-char")) (kind "manual-page") (description "Convert x to a character. Integers, strings, booleans and symbols are supported. If x is an integer between 0 and 255 return ASCII char number x. If x is a string return the first character in the string (which is supposed to be non-empty). If x is a boolean return the character #\\t for true and #\\f for false. If x is a symbol return the first character of the print name of the string. Else return #\\?. ") (title "as-char") (form (as-char x)) (examples (example "(as-char #\\a) => #\\a") (example "(as-char 65) => #\\A") (example "(as-char \"a\") => #\\a") (example "(as-char \"abc\") => #\\a") (example "(as-char #t) => #\\t") (example "(as-char #f) => #\\f") (example "(as-char 'xyz) => #\\x") (example "(as-char #(a)) => #\\?"))) ((kind "manual-page") (description "Convert x to a list. This function converts strings to a list of substring, which in the original string are separated by spaces, newlines, or tabs. ") (title "as-list") (form (as-list x)) (cross-references (reference "Scheme source file" "as-list" "general-ep/general-1.html#as-list") (internal-references "more general function" "string-to-list")) (examples (example "(as-list \"xy z abc \") => (\"xy\" \"z\" \"abc\")") (example "(as-list \"x y z\") => (\"x\" \"y\" \"z\")") (example "(as-list \"xyz\") => (\"xyz\")") (example "(as-list (cons 1 2)) => (1 . 2)") (example "(as-list #(1 2 3)) => (1 2 3)") (example "(as-list #f) => (#f)") (example "(as-list #t) => (#t)"))) ((cross-references (reference "Scheme source file" "string-to-list" "general-ep/general-1.html#string-to-list")) (kind "manual-page") (description "Convert a string to a list. The second parameter is a list of separator characters. ") (title "string-to-list") (form (string-to-list str element-separator-chars)) (examples (example "(string-to-list \"abcadefag\" (list #\\a)) => (\"bc\" \"def\" \"g\")") (example "(string-to-list \"123 456 7 8\" (list #\\space)) => (\"123\" \"456\" \"7\" \"8\")"))) ((cross-references (reference "Scheme source file" "as-boolean" "general-ep/general-1.html#as-boolean")) (kind "manual-page") (description "Convert x to a boolean. The strings \"false\", \"no\", and \"NO\" are converted to #f. Other strings are converted to #t. ") (title "as-boolean") (form (as-boolean x)) (examples (example "(as-boolean \"xxx\") => #t") (example "(as-boolean #t) => #t") (example "(as-boolean #f) => #f") (example "(as-boolean \"true\") => #t") (example "(as-boolean \"no\") => #f") (example "(as-boolean \"Yes\") => #t") (example "(as-boolean \"YES\") => #t") (example "(as-boolean \"YESSSS\") => #t") (example "(as-boolean \"false\") => #f"))) ((cross-references (reference "Scheme source file" "turn-into-boolean" "general-ep/general-1.html#turn-into-boolean")) (kind "manual-page") (description "If x is considered true return #t else #f. See also as-boolean which is more versatile. Recall that all values except #f, conveniently, act as a true value. ") (title "turn-into-boolean") (form (turn-into-boolean x)) (examples (example "(turn-into-boolean \"x\") => #t") (example "(turn-into-boolean #t) => #t") (example "(turn-into-boolean #f) => #f") (example "(turn-into-boolean \"false\") => #t") (example "(turn-into-boolean \"123\") => #t") (example "(turn-into-boolean 'abc) => #t") (example "(turn-into-boolean 'nil) => #t") (example "(turn-into-boolean '()) => #t"))) ((cross-references (reference "Scheme source file" "as-01-boolean" "general-ep/general-1.html#as-01-boolean")) (kind "manual-page") (description "Convert x to C-style boolean values, 0 or 1. Numbers are treated in the following way: If x is 0 the result is 0. If x is not 0 the result is 1. Else 1 is returned if x is considered as true in Scheme, and 0 is returned if x is considered as false in Scheme. ") (returns "Either the integer 0 (for false) or the integer 1 (for true). ") (title "as-01-boolean") (form (as-01-boolean x)) (examples (example "(as-01-boolean 0) => 0") (example "(as-01-boolean 1) => 1") (example "(as-01-boolean 12) => 1") (example "(as-01-boolean \"x\") => 1") (example "(as-01-boolean \"0\") => 1") (example "(as-01-boolean 'xx) => 1"))) ((cross-references (reference "Scheme source file" "list-to-string" "general-ep/general-1.html#list-to-string")) (kind "manual-page") (parameters (parameter "lst" "A list of elements, each of which is converted to a string by the function as-string.") (parameter "separator" "A string which is used to separate the list elements in the resulting string.")) (description "Return a string with the elements of str-lst separated by separator. ") (title "list-to-string") (form (list-to-string lst separator)) (examples (example "(list-to-string (list \"a\" \"b\" \"cde\") \"1\") => \"a1b1cde\"") (example "(list-to-string (list \"a\" \"b\" \"cde\") \"  \") => \"a  b  cde\"") (example "(list-to-string (list \"a\" \"b\" \"cde\") 1): ERROR") (example "(list-to-string (list \"a\" \"b\" \"cde\") 'xx): ERROR") (example "(list-to-string '(a \"b\" 2 #f) \", \") => \"a, b, 2, false\"") (example "(map-bites (lambda (lst . r) (sublist-until number? lst)) (lambda (lst) (list (list-to-string (butlast lst) \",\"))) '(a b 1 c d 2 e f g h i j 3 k L 4)) => (\"a,b\" \"c,d\" \"e,f,g,h,i,j\" \"k,L\")"))) ((cross-references (reference "Scheme source file" "string-append-with-separator" "general-ep/general-1.html#string-append-with-separator")) (kind "manual-page") (parameters (parameter "str-lst" "A list of strings") (parameter "separator" "A string, a character or anything else that the function as-string can convert to a string.")) (description "Concatenate the strings in str-lst, and separate them by separator-str. ") (returns "A string ") (title "string-append-with-separator") (form (string-append-with-separator str-lst separator)) (examples (example "(string-append-with-separator (list \"a\" \"b\" \"cde\") 'x) => \"axbxcde\"") (example "(string-append-with-separator (list \"a\" \"b\" \"cde\") 1) => \"a1b1cde\""))) ((cross-references (reference "Scheme source file" "number-in-base" "general-ep/general-1.html#number-in-base")) (kind "manual-page") (parameters (parameter "n" "A positive decimal integer.") (parameter "base" "The base of the number system. A possitive integer greater than 1.")) (description "Return the decimal number n in base. ") (returns "A string which represents n in the number system with base.") (misc "By coincidence equivalent to the native Scheme function number->string.") (title "number-in-base") (form (number-in-base n base)) (examples (example "(number-in-base 123 16) => \"7b\"") (example "(number-in-base 123 123) => \"10\"") (example "(number-in-base 128 2) => \"10000000\"") (example "(number-in-base 32 2) => \"100000\""))) ((kind "manual-section") (section-title "String predicates.") (section-body "")) ((cross-references (reference "Scheme source file" "empty-string?" "general-ep/general-1.html#empty-string?")) (kind "manual-page") (description "Is the string str empty ") (title "empty-string?") (form (empty-string? str)) (examples (example "(empty-string? \"\") => #t") (example "(empty-string? \"1\") => #f"))) ((cross-references (reference "Scheme source file" "white-space-char-list" "general-ep/general-1.html#white-space-char-list")) (kind "manual-page") (description "A list of characters considered as blank space characters ") (title "white-space-char-list") (form white-space-char-list) (examples (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\") => 4") (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\" 5) => #f") (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\" #f) => #f") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"a b c d\")  => \"abcd\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) (string-append \"a b c d\" CR \"x y\"))  => \"abcdxy\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"   \") => \"\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"abc\") => \"abc\""))) ((cross-references (reference "Scheme source file" "blank-string?" "general-ep/general-1.html#blank-string?")) (kind "manual-page") (description "Is the string str empty or blank. A blank string is composed of spaces, CRs, line feeds and tabs. ") (title "blank-string?") (form (blank-string? str)) (examples (example "(blank-string? \"\") => #t") (example "(blank-string? \"  \") => #t") (example "(blank-string? (list-to-string (list (as-string #\\tab) (as-string #\\newline) (as-string #\\space)) \"\")) => #t"))) ((cross-references (reference "Scheme source file" "numeric-string?" "general-ep/general-1.html#numeric-string?")) (kind "manual-page") (description "Returns if the string str is numeric. More specifically, does str consist exclusively of the ciffers 0 through 9. A non-false value of the optional parameter signed? allows an initial '+' or '-' char as well. ") (form "(numeric-string? str [signed?])") (title "numeric-string?") (examples (example "(numeric-string? \"123\") => #t") (example "(numeric-string? \"+123\") => #f") (example "(numeric-string? \"+123\" 'signed) => #t") (example "(numeric-string? \"-0\" 'signed) => #t"))) ((cross-references (reference "Scheme source file" "string-of-char-list?" "general-ep/general-1.html#string-of-char-list?")) (kind "manual-page") (description "Are all characters in str member of char-list (a list of characters). ") (title "string-of-char-list?") (form (string-of-char-list? str char-list)) (examples (example "(string-of-char-list? \"abab\" (list #\\a #\\b)) => #t") (example "(string-of-char-list? \"\" (list #\\a #\\b)) => #t") (example "(string-of-char-list? \"\" (list )) => #t") (example "(string-of-char-list? \"car\" (list )) => #f") (example "(string-of-char-list? \"abba\" (list #\\a #\\b))  => #t") (example "(string-of-char-list? \"abbac\" (list #\\a #\\b))  => #f") (example "(string-of-char-list? \"aaaa\" (list #\\a))  => #t") (example "(string-of-char-list? \"1 2 3\" (list #\\1 #\\2))  => #f") (example "(string-of-char-list? #\\a (list #\\a)): ERROR") (example "(string-of-char-list? \"1 2 3\" (list #\\1 #\\2 #\\3 #\\space)) => #t") (example "(string-of-char-list? \"1 2 3\" (list #\\1 #\\2 #\\3))  => #f"))) ((cross-references (reference "Scheme source file" "string-of-negative-char-list?" "general-ep/general-1.html#string-of-negative-char-list?")) (kind "manual-page") (description "Are all characters in str different from the characters in char list (a list of characters). ") (title "string-of-negative-char-list?") (form (string-of-negative-char-list? str char-list)) (examples (example "(string-of-negative-char-list? \"de\" (list #\\a #\\b)) => #t") (example "(string-of-negative-char-list? \"car\" (list )) => #t") (example "(string-of-negative-char-list? \"bde\" (list #\\a #\\b)) => #f") (example "(string-of-negative-char-list? \"ababa\" (list #\\a #\\b)) => #f") (example "(string-of-negative-char-list? \"\" (list #\\a #\\b)) => #t"))) ((cross-references (reference "Scheme source file" "looking-at-substring?" "general-ep/general-1.html#looking-at-substring?")) (kind "manual-page") (parameters (parameter "str" "The string to examine.") (parameter "sub-str" "The string to look for in str.") (parameter "pos" "The position where the match will have to occur (a non-negative integer).")) (description "Does str contain sub-str as substring, starting at position pos? An efficient implementation without any string copying, only character comparsion. ") (returns "A boolean value.") (title "looking-at-substring?") (form (looking-at-substring? str pos sub-str)) (examples (example "(looking-at-substring? \"care\" 1 \"ar\") => #t") (example "(looking-at-substring? \"care\" 0 \"ar\") => #f") (example "(looking-at-substring? \"care\" 2 \"re\") => #t") (example "(looking-at-substring? \"care\" 2 \"ree\") => #f") (example "(looking-at-substring? \"\" 0 \"\") => #t") (example "(looking-at-substring? \"\" 0 \"x\") => #f") (example "(looking-at-substring? \"x\" 1 \"x\") => #f"))) ((kind "manual-page") (parameters (parameter "s" "The string to examine.") (parameter "t" "The string we are looking for as a substring of s.")) (description "Is t a substring of s? This function is almost identical to substring-index which in tells at which position (if any) t occurs in s. ") (returns "A boolean value.") (title "substring?") (form (substring? s t)) (cross-references (reference "Scheme source file" "substring?" "general-ep/general-1.html#substring?") (internal-references "related function" "substring-index")) (examples (example "(substring? \"this is a string\" \"is\") => #t") (example "(substring? \"is\" \"this is a string\") => #f") (example "(substring? \"this is a string\" \"this\") => #t") (example "(substring? \"this is a string\" \"This\") => #f") (example "(substring? \"this is a string\" \"string\") => #t") (example "(substring? \"this is a string\" \"string.\") => #f"))) ((kind "manual-section") (section-title "Other string functions.") (section-body "Among the functions in this section you will find string search and replacement functions. ")) ((cross-references (reference "Scheme source file" "split-on" "general-ep/general-1.html#split-on")) (kind "manual-page") (parameters (parameter "ch" "The split character.") (parameter "str" "A string.")) (description "Return a list of two strings taken from str. The first is the prefix of str up to (but excluding) the first occurence of ch. The second is the suffix from (but also excluding) ch to the end of str. ") (title "split-on") (form (split-on ch str)) (examples (example "(split-on #\\x \"axb\") => (\"a\" \"b\")") (example "(split-on #\\x \"aa\"): ERROR") (example "(split-on #\\x \"\"): ERROR") (example "(split-on #\\x \"axbxb\") => (\"a\" \"bxb\")") (example "(split-on #\\x \"xxx\") => (\"\" \"xx\")"))) ((kind "manual-page") (parameters (parameter "ch" "The split character.") (parameter "str" "A string.")) (description "Return the character position where ch occurs the first time in str. If it does not appear, the procedure returns #f. This function allocates some temporary strings, and as such it is not efficient. Use find-in-string instead. ") (title "split-point") (form (split-point ch str)) (cross-references (reference "Scheme source file" "split-point" "general-ep/general-1.html#split-point") (internal-references "Similar string find function" "substring-index") (internal-references "Recommended alternative" "find-in-string")) (examples (example "(split-point #\\x \"axb\") => 1") (example "(split-point #\\x \"abx\") => 2") (example "(split-point #\\x \"xab\") => 0") (example "(split-point #\\x \"ab\") => #f") (example "(split-point #\\x \"\") => #f"))) ((cross-references (reference "Scheme source file" "split-string-by-predicate" "general-ep/general-1.html#split-string-by-predicate")) (kind "manual-page") (description "Split the string str into a list of strings. Consecutive portions of the strings, in which a character satisfies the char predicate pred, separate the elements of the resulting list. In case that only separators occur in str, an empty list is returned. ") (title "split-string-by-predicate") (form (split-string-by-predicate str pred)) (examples (example "(split-string-by-predicate \"a,b,c\" (lambda (ch) (eqv? ch #\\,))) => (\"a\" \"b\" \"c\")") (example "(split-string-by-predicate \"a\" (lambda (ch) (eqv? ch #\\,))) => (\"a\")") (example "(split-string-by-predicate \"\" (lambda (ch) (eqv? ch #\\,))) => ()") (example "(split-string-by-predicate \"a---b---c\" (lambda (ch) (eqv? ch #\\-))) => (\"a\" \"b\" \"c\")") (example "(split-string-by-predicate \",,,,,,\" (lambda (ch) (eqv? ch #\\,))) => ()") (example "(split-string-by-predicate \"a, b, c\" (lambda (ch) (eqv? ch #\\,))) => (\"a\" \" b\" \" c\")") (example "(split-string-by-predicate \"a , b , c\" (lambda (ch) (eqv? ch #\\,))) => (\"a \" \" b \" \" c\")"))) ((kind "manual-page") (parameters (parameter "str" "The string in which to search.") (parameter "ch" "The character we are searching for. ") (parameter "start-pos" "The optional start-position of the search. Defaults to 0 (start of string). May also be boolean false.")) (description "Search linearly for the character ch in the string str. An optional start postion start-post tells at which position to start the search (default is position 0). Return the index of the first occurence of ch, or #f if it does not exist in str. The index of the first character in a string is 0. If start-pos is boolean false (#f) this function returns #f. ") (form "(find-in-string str ch [start-pos])") (title "find-in-string") (cross-references (reference "Scheme source file" "find-in-string" "general-ep/general-1.html#find-in-string") (internal-references "more general function" "find-in-string-by-predicate")) (examples (example "(find-in-string \"some string\" #\\e) => 3") (example "(find-in-string \"some string\" #\\x) => #f") (example "(find-in-string \"\" #\\x) => #f") (example "(find-in-string \"xxxxx\" #\\x) => 0") (example "(find-in-string \"some string\" #\\s 1) => 5") (example "(find-in-string \"some string\" #\\s #f) => #f"))) ((cross-references (reference "Scheme source file" "find-in-string-from-end" "general-ep/general-1.html#find-in-string-from-end")) (kind "manual-page") (parameters (parameter "str" "The string in which to search.") (parameter "ch" "The character we are searching for. ")) (description "Search linearly for the character ch in the string str, beginning from the rear end of str. Return the index of the last occurence of ch, or #f if it does not exist in str. The index of the first character in a string is 0. ") (title "find-in-string-from-end") (form (find-in-string-from-end str ch)) (examples (example "(find-in-string-from-end \"some string\" #\\e) => 3") (example "(find-in-string-from-end \"some string\" #\\s) => 5") (example "(find-in-string-from-end \"xxxxx\" #\\x) => 4") (example "(find-in-string-from-end \"yyyyy\" #\\x) => #f") (example "(find-in-string-from-end \"\" #\\x) => #f"))) ((kind "manual-page") (parameters (parameter "pred" "A character predicate function") (parameter "str" "The string in which to search") (parameter "start-pos" "The optional start-position of the search. Defaults to 0 (start of string). May also be boolean false.")) (description "Find the first character in str that satisfies the char-predicate pred, and return index of that char. The search starts at position start-pos. If start-pos is a boolean false, this function always returns boolean false. This is a linear search in the string, corresponding to find-in-list for lists. ") (form "(find-in-string-by-predicate pred str [start-pos])") (title "find-in-string-by-predicate") (cross-references (reference "Scheme source file" "find-in-string-by-predicate" "general-ep/general-1.html#find-in-string-by-predicate") (internal-references "similar function" "find-in-list")) (examples (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\") => 4") (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\" 5) => #f") (example "(find-in-string-by-predicate (lambda (ch) (memv ch white-space-char-list)) \"some string\" #f) => #f"))) ((kind "manual-page") (parameters (parameter "pred" "A string predicate function") (parameter "str" "The string in which to search") (parameter "start-pos" "The optional start-position of the search. Defaults to the last position in str (end of string). May also be boolean false.")) (description "Find the last character in str that satisfies the char-predicate pred, and return index of that char. The search starts at position start-pos. If start-pos is a boolean false, this function always returns boolean false. This is a rear end, linear search in the string, corresponding to find-in-list for lists. ") (form "(find-in-string-from-end-by-predicate pred str [start-pos])") (title "find-in-string-from-end-by-predicate") (cross-references (reference "Scheme source file" "find-in-string-from-end-by-predicate" "general-ep/general-1.html#find-in-string-from-end-by-predicate") (internal-references "similar function" "find-in-list-by-predicate")) (examples (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\B)) \"B123AbcA\") => 0") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\A)) \"123AbcA\") => 6") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\A)) \"123Abc\") => 3") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\A)) \"\") => #f") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\A)) \"AAA\") => 2") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\B)) \"AAA\") => #f") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\c)) \"abc\" 1) => #f") (example "(find-in-string-from-end-by-predicate (lambda (ch) (eqv? ch #\\c)) \"abc\" 2) => 2"))) ((cross-references (reference "Scheme source file" "skip-chars-in-string" "general-ep/general-1.html#skip-chars-in-string")) (kind "manual-page") (parameters (parameter "str" "The string on which this function works") (parameter "char-list" "A list of characters") (parameter "start-pos" "The position of the first character to consider. The index of the first character is 0.")) (description "Starting from start-pos, skip characters in string from char-list. Return the first index higher or equal to start-pos, which contains a character which is NOT in char-list. This may be an index out of bound. If start-pos is higher than the maximum legal string index, return start-post. ") (returns "A string index, possibly out of bound (as described above). An integer.") (title "skip-chars-in-string") (form (skip-chars-in-string str char-list start-pos)) (examples (example "(skip-chars-in-string \"xabcyz\" (list #\\a #\\b #\\c ) 0) => 0") (example "(skip-chars-in-string \"xabcyz\" (list #\\a #\\b #\\c ) 1) => 4") (example "(skip-chars-in-string \"xabc\" (list #\\a #\\b #\\c ) 5) => 5") (example "(skip-chars-in-string \"\" (list #\\a #\\b #\\c ) 0) => 0") (example "(skip-chars-in-string \"abcde\" (list ) 0) => 0") (example "(skip-chars-in-string \"abcde\" (list ) 3) => 3"))) ((cross-references (reference "Scheme source file" "string-merge" "general-ep/general-1.html#string-merge")) (kind "manual-page") (description "Merge str-list-1 with str-list-2, returning one string. Strings from the first list are merged with the strings from the second list. In case one list is shorter than the other, the strings from the longests lists are concatenated and appended ") (title "string-merge") (form (string-merge str-list-1 str-list-2)) (examples (example "(string-merge (list \"aa\" \"bb\" \"cc\") (list \"XX\" \"YY\")) => \"aaXXbbYYcc\"") (example "(string-merge (list) (list \"XX\" \"YY\")) => \"XXYY\"") (example "(string-merge (list \"XX\" \"YY\") (list)) => \"XXYY\"") (example "(string-merge '() '()) => \"\""))) ((cross-references (reference "Scheme source file" "transliterate" "general-ep/general-1.html#transliterate")) (kind "manual-page") (parameters (parameter "in-string" "A string") (parameter "ch" "The character to be translated. A Scheme character") (parameter "str" "The string to substitute occurrences of ch ")) (description "In in-string, substitute each occurence of character ch with the string str. If str is the empty string the character ch is eliminated from in-string. ") (returns "A new string with the desired substitutions") (misc "This is a pure functions which does not mutate in-string.") (title "transliterate") (form (transliterate in-string ch str)) (examples (example "(transliterate \"abekat\" #\\a \"xyz\") => \"xyzbekxyzt\"") (example "(transliterate \"abekat\" #\\a \"\") => \"bekt\"") (example "(transliterate \"xx\" #\\a \"x\") => \"xx\"") (example "(transliterate \"x\" #\\x \"xx\") => \"xx\"") (example "(transliterate \"xx\" #\\x \"xx\") => \"xxxx\"") (example "(transliterate \"xx\" #\\x \"\") => \"\""))) ((cross-references (reference "Scheme source file" "filter-string" "general-ep/general-1.html#filter-string")) (kind "manual-page") (parameters (parameter "str" "The string to be filtered.") (parameter "pred" "A character predicate function.")) (description "Take away all characters in the string str that satisfy pred. Returns a string shorter than or equal to the length of str. This function is a non-destructive function. ") (returns "The filtered string. All characters in string, in the same order, that do not satisfy pred.") (misc "An iterative function programmed with a tail-recursive helping function.") (title "filter-string") (form (filter-string pred str)) (examples (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"a b c d\")  => \"abcd\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) (string-append \"a b c d\" CR \"x y\"))  => \"abcdxy\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"   \") => \"\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) \"abc\") => \"abc\""))) ((cross-references (reference "Scheme source file" "delete-string-portion" "general-ep/general-1.html#delete-string-portion")) (kind "manual-page") (description "Delete the substring of length lgt from index i in the string str. A non-destructive function which returns the result (a shorter string than the input). i is supposed to be a valid index in str. If lgt is too long for str, we just delete to the end of str. The first character is number 0. ") (title "delete-string-portion") (form (delete-string-portion str i lgt)) (examples)) ((cross-references (reference "Scheme source file" "replace-string" "general-ep/general-1.html#replace-string")) (kind "manual-page") (description "In str1 replace all occurences of str2 with str3 and return the resulting string. str2 is not allowed to be empty. A non-destructive function which leaves all input strings unaffected. ") (title "replace-string") (form (replace-string str1 str2 str3)) (examples (example "(replace-string \"aabbccddee aabbcc\" \"aa\" \"\") => \"bbccddee bbcc\"") (example "(replace-string \"aabbccddee aabbcc\" \"aa\" \"XX\") => \"XXbbccddee XXbbcc\"") (example "(replace-string \"\" \"aa\" \"XX\") => \"\"") (example "(replace-string \"AaBb\" \"a\" \"b\") => \"AbBb\""))) ((cross-references (reference "Scheme source file" "put-around-substring" "general-ep/general-1.html#put-around-substring")) (kind "manual-page") (description "Put pre-putin at pre-index, and post-putit at post-index in the string str. Return the result. Str is not affected. ") (pre-condition "pre-index is less than post-index.") (title "put-around-substring") (form (put-around-substring str pre-index pre-putin post-index post-putin)) (examples)) ((cross-references (reference "Scheme source file" "put-into-string" "general-ep/general-1.html#put-into-string")) (kind "manual-page") (description "Before the character with index put in putin-str into str, and return the resulting, extended string. I.e, make room in the resulting string for putin-str, and slide a suffix of str to the right. Str is left unchanged. The first character is number 0. ") (title "put-into-string") (form (put-into-string str index putin-str)) (examples)) ((cross-references (reference "Scheme source file" "embed-substring" "general-ep/general-1.html#embed-substring")) (kind "manual-page") (parameters (parameter "embed-function" "a string-returning function of one string parameter.")) (description "Embed the first occurrence of substring, as found in string, into embed-function. A non-destructive function. ") (returns "str with the first occurence of substring is embedded into an call of embed-function.") (title "embed-substring") (form (embed-substring substring str embed-function)) (examples (example "(embed-substring \"LAML\" \"LAML is programmed in Scheme\" downcase-string) => \"laml is programmed in Scheme\"") (example "(embed-substring \"LAML\" \"LAML is programmed in Scheme. LAML is great.\" downcase-string) => \"laml is programmed in Scheme. LAML is great.\"") (example "(embed-substring \"LAML\" \"LMAL is spell backward.\" downcase-string) => \"LMAL is spell backward.\""))) ((cross-references (reference "Scheme source file" "copy-string-into!" "general-ep/general-1.html#copy-string-into!")) (kind "manual-page") (description "Copy source into target and overwrite a portion of target. Both target and source are strings, and i is an integer index. The first char of source becomes character number i in the target string. The first character in a string is number 0. Target is mutated by this procedure. If there is not enough room for source in target, only part of the source is copied into a suffix of target. ") (title "copy-string-into!") (form (copy-string-into! target i source)) (examples)) ((cross-references (reference "Scheme source file" "substring-index" "general-ep/general-1.html#substring-index")) (kind "manual-page") (parameters (parameter "str" "The string in which to search for find-str.") (parameter "str-index" "The zero-based position in str where the search starts.") (parameter "find-str" "The string to search for in str.")) (description "Return the index of the first occurence of find-str in str. The search starts at str-index. The first character in str has index 0. If find-str is not a substring of str, starting the search at str-index, #f is returned. ") (title "substring-index") (form (substring-index str str-index find-str)) (examples (example "(substring-index \"abekat\" 0 \"abe\") => 0") (example "(substring-index \"abekat\" 0 \"kat\") => 3") (example "(substring-index \"abekat\" 0 \"katten\") => #f") (example "(substring-index \"abekat\" 0 \"abekat\") => 0") (example "(substring-index \"abekat\" 1 \"abekat\") => #f") (example "(substring-index \"\" 0 \"\") => 0"))) ((cross-references (reference "Scheme source file" "extract-substrings" "general-ep/general-1.html#extract-substrings")) (kind "manual-page") (parameters (parameter "str" "A text string in which to identify substrings.") (parameter "start-marker" "The start marker - a non-empty text string") (parameter "end-marker" "The end marker - a non-empty text string")) (description "Extract substrings from str which are enclosed in start-marker and end-marker (both strings). An extraction does not include the marker strings. ") (returns "The list of extracted substrings.") (pre-condition "The start-marker and the end-marker are both non-empty strings.") (title "extract-substrings") (form (extract-substrings str start-marker end-marker)) (examples (example "(extract-substrings \"This [[is a]] small [[test]].\" \"[[\" \"]]\") => (\"is a\" \"test\")") (example "(extract-substrings \"This [[is a]] small test]].\" \"[[\" \"]]\") => (\"is a\")") (example "(extract-substrings \"This [[is a]] small [[test.\" \"[[\" \"]]\") => (\"is a\")") (example "(extract-substrings \"This [[is a]] small [[test.\" \"[[(\" \")]]\") => ()") (example "(extract-substrings \"This [[(is a]] small [[test)]] of...\" \"[[(\" \")]]\") => (\"is a]] small [[test\")") (example "(extract-substrings \"\" \"[[(\" \")]]\") => ()") (example "(extract-substrings \"Some string\" \"[[(\" \")]]\") => ()") (example "(extract-substrings \"Some string with some letters\" \"e\" \"e\") => (\" string with som\" \"tt\")") (example "(extract-substrings \"aaaa\" \"a\" \"a\") => (\"\" \"\")") (example "(extract-substrings \"abababa\" \"a\" \"a\") => (\"b\" \"b\")"))) ((cross-references (reference "Scheme source file" "first-sentence-in-string" "general-ep/general-1.html#first-sentence-in-string")) (kind "manual-page") (description "Return the first sentence in str (including a point). The first sentence is running up to the first point followed by space or line termination. ") (title "first-sentence-in-string") (form (first-sentence-in-string str)) (examples)) ((cross-references (reference "Scheme source file" "but-first-sentence-of-string" "general-ep/general-1.html#but-first-sentence-of-string")) (kind "manual-page") (description "Return all but the first sentence in str. ") (title "but-first-sentence-of-string") (form (but-first-sentence-of-string str)) (examples)) ((cross-references (reference "Scheme source file" "strip-initial-characters" "general-ep/general-1.html#strip-initial-characters")) (kind "manual-page") (description "Strip initial occurences of chars from char-list from string. Returns the empty string if given the empty string. This function makes intermediate substrings, and as such it is not efficient. ") (title "strip-initial-characters") (form (strip-initial-characters char-list string)) (examples)) ((cross-references (reference "Scheme source file" "strip-trailing-characters" "general-ep/general-1.html#strip-trailing-characters")) (kind "manual-page") (description "Strip trailing occurences of the characters in char-list from string. ") (title "strip-trailing-characters") (form (strip-trailing-characters char-list string)) (examples)) ((cross-references (reference "Scheme source file" "strip-initial-spaces" "general-ep/general-1.html#strip-initial-spaces")) (kind "manual-page") (description "Strip all initial space characters and lineshifting characters from string. ") (title "strip-initial-spaces") (form (strip-initial-spaces string)) (examples)) ((cross-references (reference "Scheme source file" "string-it" "general-ep/general-1.html#string-it")) (kind "manual-page") (description "embed the string x in double string quotes ") (title "string-it") (form (string-it x)) (examples)) ((cross-references (reference "Scheme source file" "string-it-single" "general-ep/general-1.html#string-it-single")) (kind "manual-page") (description "embed the string x in single string quotes ") (title "string-it-single") (form (string-it-single x)) (examples)) ((cross-references (reference "Scheme source file" "exchange-chars-in-str!" "general-ep/general-1.html#exchange-chars-in-str!")) (kind "manual-page") (description "Exchange destructively char n and m in str. First character is number 0. Not a function, thus no return value. ") (title "exchange-chars-in-str!") (form (exchange-chars-in-str! str n m)) (examples)) ((cross-references (reference "Scheme source file" "ensure-final-character" "general-ep/general-1.html#ensure-final-character")) (kind "manual-page") (description "Ensure that the last character in str (a string) is ch (a char) ") (title "ensure-final-character") (form (ensure-final-character str ch)) (examples)) ((cross-references (reference "Scheme source file" "repeat-string" "general-ep/general-1.html#repeat-string")) (kind "manual-page") (description "Repeat the string str n times. If n equals 0, return the empty string. Causes a fatal error if n is negative. ") (title "repeat-string") (form (repeat-string str n)) (examples)) ((cross-references (reference "Scheme source file" "unescape-text" "general-ep/general-1.html#unescape-text")) (kind "manual-page") (parameters (parameter "text" "The input text string") (parameter "esc-char" "The escape character. A Scheme char.")) (description "Unescape text with the escape character esc-char. A pending escape character in text is just ignored. Unescaping is the process of replacing a two-character text sequence ESC CHAR with CHAR. ") (title "unescape-text") (form (unescape-text text esc-char)) (examples (example "ab$c  -> abc") (example "$.xy  -> .xy") (example "$$xy  -> $xy") (example "$$$$x -> $$x") (example "xy$   -> xy"))) ((cross-references (reference "Scheme source file" "rotate-string" "general-ep/general-1.html#rotate-string")) (kind "manual-page") (description "Rotate the string str n positions. The first character of the resulting string will be (string-ref str n), and so on iteratively and cyclic. ") (title "rotate-string") (form (rotate-string str n)) (examples)) ((cross-references (reference "Scheme source file" "string-to-list-of-lines" "general-ep/general-1.html#string-to-list-of-lines")) (kind "manual-page") (parameters (parameter "str" "A string")) (description "Return the list of lines of the string str. The lines are rinsed for CR characters (char 13). ") (returns "A list of lines (a list of strings)") (title "string-to-list-of-lines") (form (string-to-list-of-lines str)) (examples)) ((cross-references (reference "Scheme source file" "list-of-lines-to-string" "general-ep/general-1.html#list-of-lines-to-string")) (kind "manual-page") (parameters (parameter "line-lst" "A list of strings.")) (description "Concatenate the lines in the string list line-lst ") (returns "A string of concatenated lines, separated by LF (char 10).") (title "list-of-lines-to-string") (form (list-of-lines-to-string line-lst)) (examples)) ((cross-references (reference "Scheme source file" "pad-string-to-length" "general-ep/general-1.html#pad-string-to-length")) (kind "manual-page") (description "Pad the string str to a total length. Pad with pad-char justification is either left or right (a symbol), and it defaults to 'left. ") (form "(pad-string-to-length lgt str [justification pad-char])") (title "pad-string-to-length") (examples)) ((kind "manual-section") (section-title "Functions that change letter case in string.") (section-body "Here comes a number of functions which changes the letter case of a string. In general we recommend use of the non-destructive versions of the functions, thus encouraging a clean, functional programming style. Due a difference between mutable and immutable strings, we have experienced problems with the destructive procedures in MzScheme.")) ((kind "manual-page") (description "Mutate str to have an initial capital character. A destructive procedure. See capitalize-string-nd for a non-destructive variant. ") (title "capitalize-string") (form (capitalize-string str)) (cross-references (reference "Scheme source file" "capitalize-string" "general-ep/general-1.html#capitalize-string") (internal-references "non-destructive variant" "capitalize-string-nd")) (examples)) ((kind "manual-page") (description "Return str with capital, initial character. A non-destructive variant of capitalize-string. ") (title "capitalize-string-nd") (form (capitalize-string-nd str)) (cross-references (reference "Scheme source file" "capitalize-string-nd" "general-ep/general-1.html#capitalize-string-nd") (internal-references "destructive variant" "capitalize-string")) (examples)) ((cross-references (reference "Scheme source file" "upcase-string" "general-ep/general-1.html#upcase-string")) (kind "manual-page") (description "Upcase all characters in str. This function is non-destructive, i.e., it does not change the parameter str. ") (title "upcase-string") (form (upcase-string str)) (examples)) ((cross-references (reference "Scheme source file" "downcase-string" "general-ep/general-1.html#downcase-string")) (kind "manual-page") (description "Downcase all characters in str. This function is non-destructive, i.e., it does not change the parameter str. ") (title "downcase-string") (form (downcase-string str)) (examples (example "(embed-substring \"LAML\" \"LAML is programmed in Scheme\" downcase-string) => \"laml is programmed in Scheme\"") (example "(embed-substring \"LAML\" \"LAML is programmed in Scheme. LAML is great.\" downcase-string) => \"laml is programmed in Scheme. LAML is great.\"") (example "(embed-substring \"LAML\" \"LMAL is spell backward.\" downcase-string) => \"LMAL is spell backward.\""))) ((kind "manual-page") (description "Mutate str to have lower case, initial character. A destructive procedure. See decapitalize-string-nd for a non-destructive variant. ") (title "decapitalize-string") (form (decapitalize-string str)) (cross-references (reference "Scheme source file" "decapitalize-string" "general-ep/general-1.html#decapitalize-string") (internal-references "non-destructive variant" "decapitalize-string-nd")) (examples)) ((kind "manual-page") (description "Return str with lower case, initial character. A non-destructive variant of decapitalize-string. ") (title "decapitalize-string-nd") (form (decapitalize-string-nd str)) (cross-references (reference "Scheme source file" "decapitalize-string-nd" "general-ep/general-1.html#decapitalize-string-nd") (internal-references "destructive variant" "decapitalize-string")) (examples)) ((kind "manual-section") (section-title "Byte string functions.") (section-body "In this section we provide low-level functions that access binary data in strings. This section has been added to LAML version 32.")) ((kind "manual-page") (parameters (parameter "byte-str" "A string of bytes.")) (description "Given a byte string - most significant byte first (big endian byte order) - return the decimal integer which it represents. The inverse function is int10-to-binary. ") (returns "An integer number") (pre-condition "byte-str is not empty") (title "byte-string-to-integer") (form (byte-string-to-integer byte-str)) (cross-references (reference "Scheme source file" "byte-string-to-integer" "general-ep/general-1.html#byte-string-to-integer") (internal-references "Inverse function" "int10-to-binary")) (examples (example "(byte-string-to-integer \"\\0\") => 0") (example "(byte-string-to-integer \"1\") => 49") (example "(byte-string-to-integer \"a\") => 97") (example "(byte-string-to-integer \"aax\") => 6381944"))) ((kind "manual-page") (parameters (parameter "n" "The integer to convert.") (parameter "number-of-bytes" "The desired number of bytes.")) (description "Convert a decimal integer n to a binary quantity, represented as a string of length number-of-bytes. In the resulting binary string, the most significant byte comes first. This corresponds to big endian byte order. If n is too large to be represented in number-of-bytes, an error occurs. The inverse function is byte-string-to-integer. ") (result "A string of bytes.") (title "int10-to-binary") (form (int10-to-binary n number-of-bytes)) (cross-references (reference "Scheme source file" "int10-to-binary" "general-ep/general-1.html#int10-to-binary") (internal-references "Inverse function" "byte-string-to-integer")) (examples (example "(int10-to-binary 6381944 3) => \"aax\"") (example "(int10-to-binary 97 3) => \"\\0\\0a\"") (example "(int10-to-binary 97 1) => \"a\"") (example "(int10-to-binary 0 1) => \"\\0\"") (example "(int10-to-binary 97 1) => \"a\"") (example "(int10-to-binary 65535 2) => \"\\377\\377\"") (example "(int10-to-binary 65536 2): ERROR"))) ((cross-references (reference "Scheme source file" "make-char-2-hex" "general-ep/general-1.html#make-char-2-hex")) (kind "manual-page") (parameters (parameter "hx1" "An decimal integer number between 0 and 15") (parameter "hx2" "An decimal integer number between 0 and 15")) (description "Make a character from two hex numbers ") (returns "A character") (misc "The name of this function is slightly misleading. It converts two (2) hex numbers (integer decimals) to a character. The -2- part is NOT an abbreviation of -to-.") (title "make-char-2-hex") (form (make-char-2-hex hx1 hx2)) (examples (example "(make-char-2-hex 0 0) => #\\nul") (example "(make-char-2-hex 6 1) => #\\a") (example "(make-char-2-hex 0 0) => #\\nul"))) ((cross-references (reference "Scheme source file" "make-byte-string-from-hex-2" "general-ep/general-1.html#make-byte-string-from-hex-2")) (kind "manual-page") (parameters (parameter "hx1" "An decimal integer number between 0 and 15") (parameter "hx2" "An decimal integer number between 0 and 15")) (description "Make a string, with single character, from two hex numbers. ") (returns "A string of length one.") (title "make-byte-string-from-hex-2") (form (make-byte-string-from-hex-2 hx1 hx2)) (examples (example "(make-byte-string-from-hex-2 6 1) => \"a\"") (example "(make-byte-string-from-hex-2 0 0) => \"\\0\""))) ((cross-references (reference "Scheme source file" "make-byte-string-from-hex-4" "general-ep/general-1.html#make-byte-string-from-hex-4")) (kind "manual-page") (parameters (parameter "hx1" "An decimal integer number between 0 and 15") (parameter "hx2" "An decimal integer number between 0 and 15") (parameter "hx3" "An decimal integer number between 0 and 15") (parameter "hx4" "An decimal integer number between 0 and 15")) (description "Make a string, with two characters, from four hex numbers. ") (returns "A string of length two") (title "make-byte-string-from-hex-4") (form (make-byte-string-from-hex-4 hx1 hx2 hx3 hx4)) (examples (example "(make-byte-string-from-hex-4 0 0 0 0) => \"\\0\\0\"") (example "(make-byte-string-from-hex-4 6 1 6 2) => \"ab\""))) ((cross-references (reference "Scheme source file" "make-byte-string-from-hex-6" "general-ep/general-1.html#make-byte-string-from-hex-6")) (kind "manual-page") (parameters (parameter "hx1" "An decimal integer number between 0 and 15") (parameter "hx2" "An decimal integer number between 0 and 15") (parameter "hx3" "An decimal integer number between 0 and 15") (parameter "hx4" "An decimal integer number between 0 and 15") (parameter "hx5" "An decimal integer number between 0 and 15") (parameter "hx6" "An decimal integer number between 0 and 15")) (description "Make a string, with three characters, from two six numbers. ") (returns "A string of length three") (title "make-byte-string-from-hex-6") (form (make-byte-string-from-hex-6 hx1 hx2 hx3 hx4 hx5 hx6)) (examples (example "(make-byte-string-from-hex-6 6 1 6 2 6 3) => \"abc\""))) ((cross-references (reference "Scheme source file" "make-byte-string-from-hex-8" "general-ep/general-1.html#make-byte-string-from-hex-8")) (kind "manual-page") (parameters (parameter "hx1" "An decimal integer number between 0 and 15") (parameter "hx2" "An decimal integer number between 0 and 15") (parameter "hx3" "An decimal integer number between 0 and 15") (parameter "hx4" "An decimal integer number between 0 and 15") (parameter "hx5" "An decimal integer number between 0 and 15") (parameter "hx6" "An decimal integer number between 0 and 15") (parameter "hx7" "An decimal integer number between 0 and 15") (parameter "hx8" "An decimal integer number between 0 and 15")) (description "Make a string, with four characters, from eight hex numbers. ") (returns "A string of length four.") (title "make-byte-string-from-hex-8") (form (make-byte-string-from-hex-8 hx1 hx2 hx3 hx4 hx5 hx6 hx7 hx8)) (examples (example "(make-byte-string-from-hex-8 6 1 6 2 6 3 6 4) => \"abcd\""))) ((cross-references (reference "Scheme source file" "binary-to-hex-string" "general-ep/general-1.html#binary-to-hex-string")) (kind "manual-page") (parameters (parameter "byte-string" "A string of bytes (binary data).")) (description "Given byte-string, which is binary data. Return a non-binary string, of hex codes, space separated (for human readbility). Each byte gives rise to two hex codes. The inverse function of hex-to-binary-string. ") (returns "An ASCII text string with grouped, human readable hexadecimal ciffers.") (title "binary-to-hex-string") (form (binary-to-hex-string byte-string)) (examples (example "(binary-to-hex-string (make-byte-string-from-hex-8 6 1 6 2 6 3 6 4)) => \"61 62 63 64\"") (example "(binary-to-hex-string \"\") => \"\""))) ((cross-references (reference "Scheme source file" "hex-to-binary-string-relaxed" "general-ep/general-1.html#hex-to-binary-string-relaxed")) (kind "manual-page") (parameters (parameter "byte-string" "A string of bytes (binary data).")) (description "Given a human readable hex string, as produced by the sibling function called binary-to-hex-string. Groups of two hex ciffers must be separated by one or more spaces or CRs. Return the corresponding binary string. The inverse function of binary-to-hex-string. ") (returns "An ASCII text string with grouped, human readable hexadecimal ciffers.") (title "hex-to-binary-string-relaxed") (form (hex-to-binary-string-relaxed hex-string)) (examples (example "(hex-to-binary-string-relaxed (string-append \"61 62\" CR   \"63    64\")) => \"abcd\""))) ((cross-references (reference "Scheme source file" "hex-to-binary-string" "general-ep/general-1.html#hex-to-binary-string")) (kind "manual-page") (parameters (parameter "byte-string" "A string of bytes (binary data).")) (description "Given a human readable hex string, as produced by the sibling function called binary-to-hex-string. Groups of two hex ciffers must be separated by exactly one space. Return the corresponding binary string. The inverse function of binary-to-hex-string. This function is like hex-to-binary-string relaxed, but with a stronger precondition. ") (returns "An ASCII text string with grouped, human readable hexadecimal ciffers.") (title "hex-to-binary-string") (form (hex-to-binary-string hex-string)) (examples (example "(hex-to-binary-string \"00 01\") => \"\\0\\1\"") (example "(hex-to-binary-string \"61 62 63 64\") => \"abcd\""))) ((cross-references (reference "Scheme source file" "as-two-complement-signed-number" "general-ep/general-1.html#as-two-complement-signed-number")) (kind "manual-page") (parameters (parameter "i" "The positive number to convert.") (parameter "n" "The number of bits involved.")) (description "Re-interpret the positive integer i as an n bit two's complement number. ") (pre-condition "0 <= i < (power 2 n) ") (title "as-two-complement-signed-number") (form (as-two-complement-signed-number i n)) (examples (example "(as-two-complement-signed-number 0 8) => 0") (example "(as-two-complement-signed-number 127 8) => 127") (example "(as-two-complement-signed-number 128 8) => -128") (example "(as-two-complement-signed-number 255 8) => -1") (example "(as-two-complement-signed-number 256 8): ERROR"))) ((cross-references (reference "Scheme source file" "byte-string-to-bit-list" "general-ep/general-1.html#byte-string-to-bit-list")) (kind "manual-page") (parameters (parameter "byte-str" "A string of bytes.") (parameter "number-of-bits" "The minimum number of bits to be delivered by this function. Defaults to 8.")) (description "Return the list of bits in byte-str with at least number-of-bits bits. If less than number-of-bits is delivered, patch the list with leading zeros to a total length of number-of-bits. ") (form "(byte-string-to-bit-list byte-str [number-of-bits])") (returns "A list of zeros and ones.") (title "byte-string-to-bit-list") (examples (example "(byte-string-to-bit-list \"a\") => (0 1 1 0 0 0 0 1)") (example "(byte-string-to-bit-list \"a\" 16) => (0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1)") (example "(byte-string-to-bit-list \"aaa\" 8) => (1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1)") (example "(byte-string-to-bit-list \"aaa\" 24) => (0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1)") (example "(bit-list-to-byte-string (byte-string-to-bit-list \"abcdef\" (* 6 8))) => \"abcdef\""))) ((cross-references (reference "Scheme source file" "bit-list-to-byte-string" "general-ep/general-1.html#bit-list-to-byte-string")) (kind "manual-page") (parameters (parameter "bit-list" "A list of zeros or ones.")) (description "Return a byte string with the bit from bit-list (a list of integer zeros and ones). Assume, as a precondition, that the length of bit-list is a multiplum of 8. ") (returns "A string of bytes (a text string in the sense of ASCII text).") (title "bit-list-to-byte-string") (form (bit-list-to-byte-string bit-list)) (examples (example "(bit-list-to-byte-string '(0 1 1 0 0 0 0 1)) => \"a\"") (example "(bit-list-to-byte-string '()) => \"\"") (example "(bit-list-to-byte-string (byte-string-to-bit-list \"abcdef\" (* 6 8))) => \"abcdef\""))) ((kind "manual-section") (section-title "Message displaying and error handling procedures.") (section-body "Most message or error functions accept a list of messages which are string-converted and space separated before outputted.")) ((cross-references (reference "Scheme source file" "display-warning" "general-ep/general-1.html#display-warning")) (kind "manual-page") (description "Display a warning message line on standard output via the Scheme display function. This is not a fatal error ") (title "display-warning") (form (display-warning . messages)) (examples)) ((cross-references (reference "Scheme source file" "display-error" "general-ep/general-1.html#display-error")) (kind "manual-page") (description "Display an error message - in terms of messages - and stop the program. This is a fatal event. ") (title "display-error") (form (display-error . messages)) (examples)) ((cross-references (reference "Scheme source file" "display-message" "general-ep/general-1.html#display-message")) (kind "manual-page") (description "Display messages on standard output. Not a warning, and not fatal by any means. ") (title "display-message") (form (display-message . messages)) (examples)) ((cross-references (reference "Scheme source file" "laml-error" "general-ep/general-1.html#laml-error")) (kind "manual-page") (description "Stop the program with messages. This procedures takes an arbitrary number of parameters, which are string converted and string-appended to the final error message. ") (title "laml-error") (form (laml-error . messages)) (examples)) ((cross-references (reference "Scheme source file" "errors-among-conditions" "general-ep/general-1.html#errors-among-conditions")) (kind "manual-page") (parameters (parameter "err-condition-message-list" "a property list of the form cond-1 mes-1 ... cond-n mes-n.")) (description "Return a list of error message strings for those conditions err-condition-message-list that are true. The function returns #f in case all error conditions are false. err-condition-message-list is a property list (of even length) of error-condition error message pairs. For each condition and message, this function checks the condition and returns the error message if the condition fails. ") (returns "A non-empty error message string, or #f.") (title "errors-among-conditions") (form (errors-among-conditions . err-condition-message-list)) (examples)) ((kind "manual-section") (section-title "File name, file path and URL functions.") (section-body "File paths are represented as strings in LAML. As a convention, a non-empty relative file path always ends in a forward slash '/'. The empty string represents the empty relative file path. An absolute file path is recognized in both unix form (for instance \"/x/y/\") and Windows form (for instance \"c:\\x\\\"). Internally in LAML, we work with unix representation of file paths (using forward slashes).")) ((cross-references (reference "Scheme source file" "file-name-sans-extension" "general-ep/general-1.html#file-name-sans-extension")) (kind "manual-page") (description "Return the filename component sans the final extension. The extension, in a file name, is the part that follows the last `.'. If no dot character is found the function returns file-name. ") (misc "This function does not work well if we use '.' as part of directory names.") (title "file-name-sans-extension") (form (file-name-sans-extension file-name)) (examples (example "(file-name-sans-extension \"abc.def\") => \"abc\"") (example "(file-name-sans-extension \"abc\") => \"abc\"") (example "(file-name-sans-extension \"xxx/yyy/abc.def\") => \"xxx/yyy/abc\"") (example "(file-name-sans-extension \"abc.def.ghi\") => \"abc.def\""))) ((cross-references (reference "Scheme source file" "file-name-proper" "general-ep/general-1.html#file-name-proper")) (kind "manual-page") (description "Return the part of file-name without extension and without an initial path. Is also applicable on relative/absolute file path, and on URLs. Works as expected even there are dots in the initial path. ") (title "file-name-proper") (form (file-name-proper file-name)) (examples (example "(file-name-proper \"x/y/a.b\") => \"a\"") (example "(file-name-proper \"/x/y/a.b\") => \"a\"") (example "(file-name-proper \"a.b\") => \"a\"") (example "(file-name-proper \"a\") => \"a\"") (example "(file-name-proper \"http://a/b/c.d\") => \"c\"") (example "(file-name-proper \"x.y.z.w\") => \"x.y.z\"") (example "(file-name-proper \"/xxx/yyy.zzz/x.y.z.w\") => \"x.y.z\""))) ((cross-references (reference "Scheme source file" "file-name-proper-and-extension" "general-ep/general-1.html#file-name-proper-and-extension")) (kind "manual-page") (description "Return the part of file-name, with a possible extension, but without an initial path. Is also applicable on relative/absolute file path, and on URLs. ") (title "file-name-proper-and-extension") (form (file-name-proper-and-extension file-path)) (examples (example "(file-name-proper-and-extension \"x/y/z.w\") => \"z.w\"") (example "(file-name-proper-and-extension \"x/y/z\") => \"z\"") (example "(file-name-proper-and-extension \"/x/y/z.w\") => \"z.w\"") (example "(file-name-proper-and-extension \"z\") => \"z\"") (example "(file-name-proper-and-extension \"z.w\") => \"z.w\"") (example "(file-name-proper-and-extension \"\") => \"\""))) ((cross-references (reference "Scheme source file" "file-name-extension" "general-ep/general-1.html#file-name-extension")) (kind "manual-page") (description "Return the extension of file-name. Is also applicable on relative/absolute file path, and on URLs. If there is no extension, return the empty string. The extension, in a file name, is the part that follows the last `.'. This function handles dots in the initial path properly. ") (title "file-name-extension") (form (file-name-extension file-name)) (examples (example "(file-name-extension \"a.b\") => \"b\"") (example "(file-name-extension \"a.b.c\") => \"c\"") (example "(file-name-extension \"a\") => \"\"") (example "(file-name-extension \"x/y/a.b\") => \"b\"") (example "(file-name-extension \"/x/y/a.b\") => \"b\"") (example "(file-name-extension \"/x/y/a\") => \"\"") (example "(file-name-extension \"x/y/a\") => \"\""))) ((cross-references (reference "Scheme source file" "file-name-initial-path" "general-ep/general-1.html#file-name-initial-path")) (kind "manual-page") (description "Return the initial path of file-path. The initial path of a file path is the prefix of the file path, without the proper file name and without the extension. The initial path ends in a forward or backward slash, or it is empty. Can also be applied on both absolute and relative file paths, and on absolute and relative URLs. ") (title "file-name-initial-path") (form (file-name-initial-path file-path)) (examples (example "(file-name-initial-path \"x/y/a\") => \"x/y/\"") (example "(file-name-initial-path \"/x/y/a\") => \"/x/y/\"") (example "(file-name-initial-path \"a.b\") => \"\"") (example "(file-name-initial-path \"a\") => \"\"") (example "(file-name-initial-path \"http://a/b/c.d\") => \"http://a/b/\""))) ((cross-references (reference "Scheme source file" "absolute-file-path?" "general-ep/general-1.html#absolute-file-path?")) (kind "manual-page") (parameters (parameter "x" "A file path (a string)")) (description "Return whether x represents an absolute path to a file. Works on both Unix and Windows. ") (title "absolute-file-path?") (form (absolute-file-path? x)) (examples (example "(absolute-file-path? \"/x/y/z.w\") => #t") (example "(absolute-file-path? \"x/y/z.w\") => #f") (example "(absolute-file-path? \"x\") => #f") (example "(absolute-file-path? \"/x\") => #t") (example "(absolute-file-path? \"c:/x/y\") => #t") (example "(absolute-file-path? \"z:/x/y\") => #t") (example "(absolute-file-path? \"z:x/y\") => #f"))) ((cross-references (reference "Scheme source file" "absolute-url?" "general-ep/general-1.html#absolute-url?")) (kind "manual-page") (description "Does the string x represent an absolute URL. ") (title "absolute-url?") (form (absolute-url? x)) (examples)) ((cross-references (reference "Scheme source file" "relative-url?" "general-ep/general-1.html#relative-url?")) (kind "manual-page") (description "Does the string x represen a relative URL. ") (misc "Experimental definition.") (title "relative-url?") (form (relative-url? x)) (examples)) ((cross-references (reference "Scheme source file" "parent-directory" "general-ep/general-1.html#parent-directory")) (kind "manual-page") (description "Return the name of the parent directory of dir (a string), or #f if dir is the root directory. Also return #f in case dir is the value #f. ") (title "parent-directory") (form (parent-directory dir)) (examples (example "(parent-directory \"/x/y/z/\") => \"/x/y/\"") (example "(parent-directory \"x/y/z/\") => \"x/y/\"") (example "(parent-directory \"x/\") => #f") (example "(parent-directory \"\") => #f") (example "(parent-directory #f) => #f"))) ((cross-references (reference "Scheme source file" "directory-leave-name" "general-ep/general-1.html#directory-leave-name")) (kind "manual-page") (parameters (parameter "dir" "A relative or absolute directory path (ends with '/').")) (description "Return the name of the leave directory of the directory dir. In case dir is the absolute root, the value #f, or the empty directory string, this function returns #f. ") (title "directory-leave-name") (form (directory-leave-name dir)) (examples (example "(directory-leave-name \"xxx/yyy/\") => \"yyy\"") (example "(directory-leave-name #f) => #f"))) ((cross-references (reference "Scheme source file" "directory-level-difference" "general-ep/general-1.html#directory-level-difference")) (kind "manual-page") (description "Return the number of directory levels in between dir1 and dir2. If dir1 is not a subdirectory of dir2, or dir2 is not a subdirectory of dir1 return #f. ") (title "directory-level-difference") (form (directory-level-difference dir1 dir2)) (examples (example "(directory-level-difference \"/x/x/z/v/\" \"/x/x/\") = 2") (example "(directory-level-difference \"/x/x/\" \"/x/x/z/v/\") = -2"))) ((cross-references (reference "Scheme source file" "relative-path-to-path-list" "general-ep/general-1.html#relative-path-to-path-list")) (kind "manual-page") (description "Given a relative file path, return a list of path constituents. This function supports both forward and backward slashes as separator between directory levels (both unix and windows conventions). ") (pre-condition "dir is not an absolute file path.") (title "relative-path-to-path-list") (form (relative-path-to-path-list dir)) (examples (example "(relative-path-to-path-list \"xxx/yyy/zzz/\") = (\"xxx\" \"yyy\" \"zzz\")") (example "(relative-path-to-path-list \"xxx/yyy/zzz\") = (\"xxx\" \"yyy\" \"zzz\")") (example "(relative-path-to-path-list \"xxx\") = (\"xxx\")"))) ((cross-references (reference "Scheme source file" "path-list-to-relative-path" "general-ep/general-1.html#path-list-to-relative-path")) (kind "manual-page") (description "Return the relative path formed by the element of path-list. The reverse function of relative-path-to-path-list. ") (title "path-list-to-relative-path") (form (path-list-to-relative-path path-list)) (examples (example "(path-list-to-relative-path (list \"x\" \"y\" \"z\")) => \"x/y/z/\"") (example "(path-list-to-relative-path (list \"x\")) => \"x/\""))) ((cross-references (reference "Scheme source file" "ensure-directory-existence!" "general-ep/general-1.html#ensure-directory-existence!")) (kind "manual-page") (parameters (parameter "prefix-dir" "An absolute directory path.") (parameter "dir" "A single directory name")) (description "Ensure that the directory with path (string-append prefix-dir dir) exists. If necessary, create dir in prefix-dir. ") (pre-condition "prefix-dir should be normalized (using for instance normalize-file-path) before calling this function.") (title "ensure-directory-existence!") (form (ensure-directory-existence! prefix-dir dir)) (examples)) ((cross-references (reference "Scheme source file" "ensure-directory-path-existence!" "general-ep/general-1.html#ensure-directory-path-existence!")) (kind "manual-page") (parameters (parameter "prefix-dir" "An absolute directory path.") (parameter "path" "A relative file path.")) (description "Ensure that the relative path, as represented by the parameter path, exists in prefix-dir. This procedure creates the necessary directories in prefix-dir. ") (pre-condition "Both prefix-dir and path should be normalized (using for instance normalize-file-path) before calling this function.") (title "ensure-directory-path-existence!") (form (ensure-directory-path-existence! prefix-dir path)) (examples)) ((cross-references (reference "Scheme source file" "ensure-non-existing-file-in-dir" "general-ep/general-1.html#ensure-non-existing-file-in-dir")) (kind "manual-page") (description "Ensure that the file f (proper name and extension) is non-existing in the directory d. If not, add a numeric suffix to the proper name of f. Return the possibly modified file name (proper name and extension). ") (title "ensure-non-existing-file-in-dir") (form (ensure-non-existing-file-in-dir f d)) (examples)) ((cross-references (reference "Scheme source file" "normalize-file-path" "general-ep/general-1.html#normalize-file-path")) (kind "manual-page") (parameters (parameter "path" "An absolute or relative file path.")) (description "Normalizes the abolute or relative file path by removal of redundant \"..\" levels. ") (returns "A normalized absolute or relative file path. Always slash terminated.") (title "normalize-file-path") (form (normalize-file-path path)) (examples (example "(normalize-file-path \"xxx/yyy/../zzz\") => \"xxx/zzz/\"") (example "(normalize-file-path \"xxx/yyy/..\") => \"xxx/\"") (example "(normalize-file-path \"/..\"): ERROR") (example "(normalize-file-path \"xxx/yyy/zzz\") => \"xxx/yyy/zzz/\"") (example "(normalize-file-path \"/xxx/yyy/..\") => \"/xxx/\""))) ((cross-references (reference "Scheme source file" "normalize-relative-file-path" "general-ep/general-1.html#normalize-relative-file-path")) (kind "manual-page") (parameters (parameter "path" "A relative file path. May be empty (the empty string).")) (description "Normalizes the relative file path for redundant \"..\" levels. Does always return a forward slash terminated relative path, or and empty path (the emtpy string). Does never lead to a fatal error. ") (returns "The normalized relative path (a string).") (title "normalize-relative-file-path") (form (normalize-relative-file-path path)) (examples (example "(normalize-relative-file-path \"xxx/yyy/../\") => \"xxx/\"") (example "(normalize-relative-file-path \"xxx/yyy/../../\") => \"\"") (example "(normalize-relative-file-path \"xxx/yyy/../../..\") => \"../\"") (example "(normalize-relative-file-path \"\") => \"\"") (example "(normalize-relative-file-path \"xxx\") => \"xxx/\""))) ((cross-references (reference "Scheme source file" "normalize-absolute-file-path" "general-ep/general-1.html#normalize-absolute-file-path")) (kind "manual-page") (parameters (parameter "path" "An absoulte file path.")) (description "Normalizes the absolute file path for redundant \"..\" levels. May result in a fatal error in cases where we try to exit through the root level via \"..\". Returns a forward slash terminated absolute path. ") (pre-condition "path is an absolute file path.") (returns "The normalized absolute path (a string).") (title "normalize-absolute-file-path") (form (normalize-absolute-file-path abs-path)) (examples (example "(normalize-absolute-file-path \"xxx/yyy/..\"): ERROR") (example "(normalize-absolute-file-path \"/xxx/yyy/..\") => \"/xxx/\"") (example "(normalize-absolute-file-path \"/xxx/yyy/../../\") => \"/\"") (example "(normalize-absolute-file-path \"/xxx/yyy/../..\") => \"/\"") (example "(normalize-absolute-file-path \"/xxx/yyy/../../..\"): ERROR"))) ((cross-references (reference "Scheme source file" "relative-part-of-absolute-path" "general-ep/general-1.html#relative-part-of-absolute-path")) (kind "manual-page") (description "Return the suffix part of the absolute file path (the part following the initial \"/\" for instance). ") (pre-condition "abs-path is an absolute file path.") (title "relative-part-of-absolute-path") (form (relative-part-of-absolute-path abs-path)) (examples (example "(relative-part-of-absolute-path \"/xxx/yyy/\") => \"xxx/yyy/\"") (example "(relative-part-of-absolute-path \"c:/xxx/yyy/\") => \"xxx/yyy/\"") (example "(relative-part-of-absolute-path \"/x\") => \"x\"") (example "(relative-part-of-absolute-path \"xxx\"): ERROR") (example "(relative-part-of-absolute-path \"\"): ERROR"))) ((cross-references (reference "Scheme source file" "prefix-part-of-absolute-path" "general-ep/general-1.html#prefix-part-of-absolute-path")) (kind "manual-page") (description "Return the prefix part of the absolute file path (the \"/\" or the \"c:\\\" for instance). ") (pre-condition "abs-path is an absolute file path.") (title "prefix-part-of-absolute-path") (form (prefix-part-of-absolute-path abs-path)) (examples (example "(prefix-part-of-absolute-path \"/xxx/yyy\") => \"/\"") (example "(prefix-part-of-absolute-path \"c:/x\") => \"c:/\"") (example "(prefix-part-of-absolute-path \"\"): ERROR") (example "(prefix-part-of-absolute-path \"c:/x\") => \"c:/\"") (example "(prefix-part-of-absolute-path \"/\") => \"/\""))) ((cross-references (reference "Scheme source file" "but-prefix-part-of-absolute-path" "general-ep/general-1.html#but-prefix-part-of-absolute-path")) (kind "manual-page") (description "Return the complementary part of the absolute file path relative to (prefix-part-of-absolute-path abs-path). Notice that (string-append (prefix-part-of-absolute-path abs-path) (but-prefix-part-of-absolute-path abs-path)) equals abs-path. ") (pre-condition "abs-path is an absolute file path.") (returns "The largest possible relative file path taken from abs-path.") (title "but-prefix-part-of-absolute-path") (form (but-prefix-part-of-absolute-path abs-path)) (examples (example "(but-prefix-part-of-absolute-path \"c:\\\\xx/yy\") => \"xx/yy\"") (example "(but-prefix-part-of-absolute-path \"/x/y\") => \"x/y\"") (example "(but-prefix-part-of-absolute-path \"/xxx/yyy\") => \"xxx/yyy\"") (example "(but-prefix-part-of-absolute-path \"/x\") => \"x\"") (example "(but-prefix-part-of-absolute-path \"xxx\"): ERROR"))) ((cross-references (reference "Scheme source file" "inverse-return-path" "general-ep/general-1.html#inverse-return-path")) (kind "manual-page") (parameters (parameter "path" "A relative file path from dir") (parameter "dir" "A directory, identified by an absolute file path")) (description "Return the inverse file path of path, as taken relative to dir. Given dir as the current directory. If we follow path, and then follow the inverse return path (the result of this function) we are back in dir. ") (returns "A relative file path.") (title "inverse-return-path") (form (inverse-return-path path dir)) (examples (example "(inverse-return-path \"d\" \"a/b/c\") => \"../\"") (example "(inverse-return-path \"..\" \"a/b/c\") => \"c/\"") (example "(inverse-return-path \"d/e/f/\" \"a/b/c\") => \"../../../\"") (example "(inverse-return-path \"../../../\" \"a/b/c\") => \"a/b/c/\""))) ((kind "manual-section") (section-title "Other functions.") (section-body " Here follows a set of miscellaneous functions.")) ((cross-references (reference "Scheme source file" "type-of" "general-ep/general-1.html#type-of")) (kind "manual-page") (parameters (parameter "x" "An arbitrary value of either type boolean, symbol, char, procedure, pair, number, string or port.")) (description "Return the type of the value x. ") (returns "One of boolean, symbol, char, procedure, pair, number, string, port (a symbol).") (title "type-of") (form (type-of x)) (examples)) ((cross-references (reference "Scheme source file" "re-break" "general-ep/general-1.html#re-break")) (kind "manual-page") (description "A quite special HTML line breaking function. Html format str, either with br og p tags between lines. depends on break-at-all from decoding stuff. Should perhaps be in the convenience library??? ") (title "re-break") (form (re-break str)) (examples)) ((cross-references (reference "Scheme source file" "CR" "general-ep/general-1.html#CR")) (kind "manual-page") (description "Return a CR string ") (title "CR") (form CR) (examples (example "(hex-to-binary-string-relaxed (string-append \"61 62\" CR   \"63    64\")) => \"abcd\"") (example "(filter-string (lambda (ch) (memv ch white-space-char-list)) (string-append \"a b c d\" CR \"x y\"))  => \"abcdxy\""))) ((cross-references (reference "Scheme source file" "newline-string" "general-ep/general-1.html#newline-string")) (kind "manual-page") (description "Return a CR string. Please notice that there is a conflict between this function and the MzScheme url.ss net stuff. (We should get rid of this function in LAML). ") (title "newline-string") (form (newline-string)) (examples)) ((cross-references (reference "Scheme source file" "save-a-list" "general-ep/general-1.html#save-a-list")) (kind "manual-page") (description "Save the alist on a file named filename. Filename is assumed to be a full path to the file. ") (title "save-a-list") (form (save-a-list alist filename)) (examples)) ((cross-references (reference "Scheme source file" "unique-timed-file-name" "general-ep/general-1.html#unique-timed-file-name")) (kind "manual-page") (description "Return a unique file name with prefix. The suffic becomes the current-time i seconds representation ") (title "unique-timed-file-name") (form (unique-timed-file-name prefix)) (examples)) ((cross-references (reference "Scheme source file" "file-append" "general-ep/general-1.html#file-append")) (kind "manual-page") (description "Append x to file-name. The file is assumed to contain a Lisp list. x is added (actually pre-pended) to the list on the file, and the file is written back. The ordering of the elements in the file list is not assumed to be important. As a precondition, the file named file-name is assumed to exists. ") (title "file-append") (form (file-append file-name x)) (examples)) ((cross-references (reference "Scheme source file" "file-read" "general-ep/general-1.html#file-read")) (kind "manual-page") (parameters (parameter "file-name" "The name of file to read from.") (parameter "n" "Skip n-1 expressions and read expression number n. Defaults to 1.")) (description "Read a Lisp expression from a file named file-name. With an optional second parameter, read form number n from the file. Per default, n is 1. ") (form "(file-read file-name [n])") (pre-condition "Assume that there are at least n forms on file.") (title "file-read") (examples)) ((cross-references (reference "Scheme source file" "file-read-all" "general-ep/general-1.html#file-read-all")) (kind "manual-page") (description "Read all Lisp expression from file-name. This function returns these forms as a list of top level forms from the file. ") (title "file-read-all") (form (file-read-all file-name)) (examples)) ((cross-references (reference "Scheme source file" "file-write" "general-ep/general-1.html#file-write")) (kind "manual-page") (parameters (parameter "x" "An arbitrary value that can be written with write.") (parameter "filename" "The name of the file (a string).")) (description "Write the list expression x to the file named file-name. The writing is done using the Scheme write function. ") (title "file-write") (form (file-write x file-name)) (examples)) ((cross-references (reference "Scheme source file" "save-on-file" "general-ep/general-1.html#save-on-file")) (kind "manual-page") (parameters (parameter "x" "The string to be written.") (parameter "filename" "The name of the file (a string).")) (description "Displays the first parameter x on a file named filename. This is a minor convenience function, and an alternative to using the standard Scheme output functions. ") (title "save-on-file") (form (save-on-file x filename)) (examples)) ((cross-references (reference "Scheme source file" "id-1" "general-ep/general-1.html#id-1")) (kind "manual-page") (description "The identify function of one parameter ") (title "id-1") (form (id-1 x)) (examples (example "(sort-list (list 3 3 5 5 7 7) (generate-leq (list 5 3 7) id-1 =)) => (5 5 3 3 7 7)") (example "(element-before 4 '(1 2 3 4 5) id-1) => 3") (example "(element-before 1 '(1 2 3 4 5) id-1) => #f") (example "(element-before 6 '(1 2 3 4 5) id-1) => #f") (example "(element-before 5 '(1 2 3 4 5) id-1 =) => 4") (example "(element-after 5 '(1 2 3 4 5) id-1 =) => #f") (example "(element-after 3 '(1 2 3 4 5) id-1 =) => 4"))) ((cross-references (reference "Scheme source file" "multiplum-of" "general-ep/general-1.html#multiplum-of")) (kind "manual-page") (description "Is a (the first par) a multiplum of b (the last par)? ") (title "multiplum-of") (form (multiplum-of a b)) (examples)) ((cross-references (reference "Scheme source file" "copy-text-file" "general-ep/general-1.html#copy-text-file")) (kind "manual-page") (description "Copy the text file in from-path to the file in to-path. A quick and dirty solution by reading and writing strings to and from files. If the destination file exists you must pass a third parameter, overwrite, with the value #t ") (title "copy-text-file") (form (copy-text-file from-path to-path overwrite?)) (examples)) ((cross-references (reference "Scheme source file" "copy-files" "general-ep/general-1.html#copy-files")) (kind "manual-page") (parameters (parameter "files" "A list of file names (without initial path).") (parameter "source-dir" "The source directory in which the files are supposed to exist.") (parameter "target-dir" "An existing directory to which the files are copied.") (parameter "warn-if-non-existing-source" "A boolean parameter that controls the error reaction. Defaults to #f.")) (description "Copy each of the files in the list files from source-dir to target-dir. Both source-dir and target-dir ends in a slash. If the optional boolean parameter warn-if-non-existing-source is #t a non-fatal warning is issued if the source file does not exist. If the boolean parameter is #f, a fatal error will occur. ") (form "(copy-files files source-dir target-dir [warn-if-non-existing-source])") (title "copy-files") (examples)) ((cross-references (reference "Scheme source file" "min-max-limited" "general-ep/general-1.html#min-max-limited")) (kind "manual-page") (description "Ensure that the number x is in between min and max, or that min or max is returned. More specifically, if x is not between min and max, the closest of min and max is returned. ") (pre-condition "min <= max") (title "min-max-limited") (form (min-max-limited x min max)) (examples)) ((cross-references (reference "Scheme source file" "log2" "general-ep/general-1.html#log2")) (kind "manual-page") (description "The base 2 logarithm function. ") (title "log2") (form (log2 x)) (examples)) ((cross-references (reference "Scheme source file" "power" "general-ep/general-1.html#power")) (kind "manual-page") (description "Return n * n * ... n (m times). A quick and dirty recursive version. ") (title "power") (form (power n m)) (examples)) ((cross-references (reference "Scheme source file" "fac" "general-ep/general-1.html#fac")) (kind "manual-page") (description "Return the factorial of n: n * (n-1) * ... 1. A quick and dirty recursive version. ") (title "fac") (form (fac n)) (examples (example "(fac 5) => 120") (example "(fac 0) => 1") (example "(fac 1) => 1") (example "(fac 3) => 6"))) ((kind "manual-section") (section-title "Bite Generators.") (section-body "This section contains higher-order bite generators, which can be used with the functions map-bites, filter-bites, and similar higher-order bite-processing functions, see <a href = \"#higher-order-bite-functions\"> here </a>. In this context a bite of a non-empty list is a non-empty prefix of the list. Consequtive bites of a list must append-accumulate to the original list. The first parameter of bite functions is the list from which a bite is taken. A second optional parameter denotes the number of this bite (one-based) as supplied by the computational context. Because of this second parameter, all bite functions (programmed or generated) should accept a second parameter, or a rest parameter: (lambda (lst . rest) ....)") (section-id "bite-generators")) ((cross-references (reference "Scheme source file" "bite-of-length" "general-ep/general-1.html#bite-of-length")) (kind "manual-page") (parameters (parameter "n" "A integer, n >= 1.") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not counted. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function: List -> List, which returns a bite of length n. If the input list is of length shorter than n, just return the list. ") (form "(bite-of-length n [noise-element?])") (returns "A bite function of the signature List, int -> List. The integer parameter denotes the number of the bite (supplied by context).") (title "bite-of-length") (examples (example "((bite-of-length 3) '(1 2 3 4 5)) => (1 2 3)") (example "((bite-of-length 3) '(1 2)) => (1 2)") (example "((bite-of-length 3) '()) => ()") (example "((bite-of-length 3 number?) '(a b 1 c 2 3 d e f)) => (a b 1 c)") (example "((bite-of-length 3 number?) ' (1 0 -5 c 2 3 d e f g)) => (1 0 -5 c 2 3 d e)"))) ((cross-references (reference "Scheme source file" "bite-of-varied-length" "general-ep/general-1.html#bite-of-varied-length")) (kind "manual-page") (parameters (parameter "f" "A function of the bite number to the length of the desired bite.") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not counted. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function: List Int -> List, which returns a bite of length f(n), where n is the bite number (1 based) passed as the second parameter to the generated function. If the input list is of length shorter than f(n) for some n, just return the list. ") (form "(bite-of-varied-length f [noise-element?])") (returns "A bite function of the signature List, int -> List. The integer parameter denotes the number of the bite (supplied by context when applied by functions such as map-bites and filter-bites).") (title "bite-of-varied-length") (examples (example "(map-bites (bite-of-varied-length (lambda (n) n)) list  '(1 2 3 4 5 6 7 8)) => ((1) (2 3) (4 5 6) (7 8))") (example "(map-bites (bite-of-varied-length (lambda (n) (if (even? n) 2 4))) list  '(1 2 3 4 5 6 7 8 9 10 11 12)) => ((1 2 3 4) (5 6) (7 8 9 10) (11 12))") (example "((bite-of-varied-length (lambda (n) (+ n 1))) '(1 2 3 4 5) 2) => (1 2 3)") (example "((bite-of-varied-length (lambda (n) (+ n 1))) '() 1) => ()") (example "(map-bites (bite-of-varied-length (lambda (n) (if (even? n) 3 4))) list (number-interval 1 20)) => ((1 2 3 4) (5 6 7) (8 9 10 11) (12 13 14) (15 16 17 18) (19 20))"))) ((kind "manual-page") (parameters (parameter "el-pred:" "A list element predicate. Signature: List-element -> Boolean. ")) (xml-in-laml-attributes (xml-in-laml-attribute "sentinel" "implied" "Controls how/if a sentiel element takes part in the contextually formed bites.\n                            Possible sentinel-values are first, last, and alone (a string or symbol). Default value: last.\n                            The value last prescribes that a bite is terminated by a single sentinel value.\n                            The value first prescribes that a bite is starts with a single sentinel value.\n                            The value alone prescribes that a single sentinel value forms a bite by itself.")) (description "Generate and return a function: List -> List, which returns the longest prefix bite in which each element, appart from sentinel elements, fulfills the prediciate el-pred. The construction of the bite terminates if/when a sentinel element is encountered, which does not satisfy el-pred. Due to the definition of bites, the sentinel elements must (in one way or another) be part of the bites of list. The attribute named sentinel controls the location of sentinel elements relative to non-sentinel elements. ") (form "(bite-while-element el-pred . attributes)") (returns "A function of the signature: List -> List, which returns a bit of the input list.") (title "bite-while-element") (cross-references (reference "Scheme source file" "bite-while-element" "general-ep/general-1.html#bite-while-element") (internal-references "Useful in context of" "map-bites" "filter-bites")) (examples (example "((bite-while-element number?) '(a b c)) => (a)") (example "((bite-while-element number?) '(1 2 a b c)) => (1 2 a)") (example "((bite-while-element number? 'sentinel \"last\") '(1 2 a b c)) => (1 2 a)") (example "((bite-while-element number? 'sentinel \"first\") '(a 1 2 a b c)) => (a 1 2)") (example "((bite-while-element number?) '()) => ()") (example "((bite-while-element number?) '(1 2)) => (1 2)") (example "((bite-while-element number? 'sentinel \"alone\") '(1 2 a b c)) => (1 2)") (example "((bite-while-element number? 'sentinel \"alone\") '(a 1 2 b c)) => (a)"))) ((cross-references (reference "Scheme source file" "bite-while-element-with-accumulation" "general-ep/general-1.html#bite-while-element-with-accumulation")) (kind "manual-page") (parameters (parameter "pred" "A predicate with the signature: T, S -> Boolean. The first parameter is a list element. The second parameter is the accumulated value. ") (parameter "accumulator" "A function of signature S, T -> S, where S is the type of init-acc-val, and T is the type of list elements in bites.") (parameter "init-acc-val" "The initial value (first parameter, of type S) of the accumulated value.") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not accumulated. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function: List<T> -> List<T>, which returns the longest prefix bite in which each element, appart from a sentinel element, fulfills the prediciate pred. The predicate pred depends on a single list element together with a value accumulated from all elements prior to (but not including) the current element. A sentinel element is an element which terminates a bites. In functions generated by bite-while-element-with-accumulation, a sentinel element may start a bite (thus this function always 'eats' the first element, without passing it to pred). Elements which fulfill the optional noise-element predicate are not tested by pred, they are not considered as sentinel elements, and they are not accumulated. ") (form "(bite-while-element-with-accumulation pred accumulator init-acc-val [noise-element?])") (title "bite-while-element-with-accumulation") (examples (example "((bite-while-element-with-accumulation (lambda (e v) (and (number? e) (<= v 5))) (lambda (v e) (+ v e)) 0) '()) => ()") (example "((bite-while-element-with-accumulation (lambda (e v) (and (number? e) (<= v 5))) (lambda (v e) (+ v e)) 0) '(0 1 2 -3 3 4 4 2 2)) => (0 1 2 -3 3 4)") (example "((bite-while-element-with-accumulation (lambda (e v) (and (number? e) (<= v 5))) (lambda (v e) (+ v e)) 0 symbol?) '(a 0 b 1 c d 2 -3 e f g 3 4 4 2 2)) => (a 0 b 1 c d 2 -3 e f g 3 4)") (example "((bite-while-element-with-accumulation (lambda (e v) (and (number? e) (<= v 5))) (lambda (v e) (+ v e)) 0 symbol?) '(a 0 b 2 4 d e 5)) => (a 0 b 2 4 d e)"))) ((cross-references (reference "Scheme source file" "bite-while-prefix" "general-ep/general-1.html#bite-while-prefix")) (kind "manual-page") (parameters (parameter "bite-pred" "A predicate on List-T, where T is the type of elements in the list. Signature T-List -> Boolean. ")) (description "Generate and return a function: List -> List, which returns the longest bite of the input list, of which each prefix bite satisfies bite-pred. A prefix bite of length one is automatically accepted (bite-pred is not applied on it). This ensures that no empty bite is encountered. ") (misc "The automatic acceptance of unity bites naturally goes hand in hand with bite predicates that accept such bites. This function does not accept a noise element predicate, because it is more natural (and more efficient) to incorporate it in the bite predicate.") (title "bite-while-prefix") (form (bite-while-prefix bite-pred)) (examples)) ((kind "manual-page") (parameters (parameter "bin-op." "A binary accumulator function of signature S x T -> S, where T is the type of the list elements, and S is the type of init-val.") (parameter "init-val" "The initial value (of type S).") (parameter "pred" "A predicate of signature: S -> Boolean, where S is the type of init-val. The predicate determines if a bite, as accumulated to some value in type S, is satisfactory. ") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not accumulated. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function, which returns the shortest (first) non-empty prefix bite that accumulates to a value which fulfills the predicate pred. The last bite of a list is not required to accumulate to a result which fulfills the predicate. The accumulation is carried out by the function bin-op, which initially is applied on init-val and the first element of the list. ") (form "(bite-while-accumulate bin-op init-val pred [noise-element?])") (returns "A bite function of the signature: T-List -> T-List.") (misc "This function passes the accumulated value to the predicate. In contrast, bite-while-element-with-accumulation passes both the acculated value and the current list element to its predicate.") (title "bite-while-accumulate") (cross-references (reference "Scheme source file" "bite-while-accumulate" "general-ep/general-1.html#bite-while-accumulate") (internal-references "Useful in context of" "map-bites" "filter-bites")) (examples (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5))) '(1 1 1 2 3 4 5 6)) => (1 1 1 2)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5))) '(1 1 1 1)) => (1 1 1 1)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5))) '(6 1 2)) => (6)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5))) '()) => ()") (example "((bite-while-accumulate (lambda (x y) (cons y x)) '() (lambda (lst) (= 3 (length lst)))) '(a b c d e f g h))  => (a b c)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5)) symbol?) '(a b c 1 2 3 4 5)) => (a b c 1 2 3)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5)) symbol?) '(1 a 2 b 3 c 4 d 5)) => (1 a 2 b 3)") (example "((bite-while-accumulate + 0 (lambda (n) (>= n 5)) symbol?) '(a b c)) => (a b c)"))) ((cross-references (reference "Scheme source file" "bite-while-compare" "general-ep/general-1.html#bite-while-compare")) (kind "manual-page") (parameters (parameter "el-relation" "A function of the signature T x T -> Boolean, which compares two elements from the list. T is the type of non-noise (only!) elements in the list on which the generated function is to be applied.") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not subject to comparison. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function, which - when applied on a list - returns the longest bite of the list in which successive elements fulfill the binary relation el-relation. ") (form "(bite-while-compare el-relation [noise-element?])") (returns "A bite function of the signature: T-List -> T-List.") (title "bite-while-compare") (examples (example "((bite-while-compare <=) '(2 4 6 6 7 1 2)) => (2 4 6 6 7)") (example "((bite-while-compare <=) '(2 4 6 6 7)) => (2 4 6 6 7)") (example "((bite-while-compare <=) '(3 2 1)) => (3)") (example "((bite-while-compare <=) '()) => ()") (example "((bite-while-compare < symbol?) '(a 0 b c 1 d 2 -1 e f g 7 2 3)) => (a 0 b c 1 d 2)"))) ((kind "manual-page") (parameters (parameter "el-comparator" "A function of the signature T x T -> Int which compares two elements from the list. T is the type of non-noise (only!) elements in the list on which the generated function is to be applied. (el-comparator x y) returns -1 if x is less than y, 0 if x equals y, and 1 if x is greater than y.") (parameter "noise-element?" "An optional predicate with the signature T -> Boolean. Elements that fulfill the predicate are not subject to comparison. Such elements are just passed to the resulting bite. The default value of this predicate is (lambda (e) #f).")) (description "Generate and return a function, which - when applied on a list - returns the longest bite of the list in which successive elements are monotone measured by the el-comparator function. Being monotone (in the context of this function) means to be either increasing, being decreasing, or being constant. Please notice that no fixed alternation between bites (such as increasing, decreasing, increasing, decreasing, ...) is assured by this function. When applied on a list of at least two element, a function generated by bite-while-monotone will never return a bite of length less than two. ") (form "(bite-while-monotone el-comparator [noise-element?])") (returns "A bite function of the signature: T-List -> T-List.") (title "bite-while-monotone") (cross-references (reference "Scheme source file" "bite-while-monotone" "general-ep/general-1.html#bite-while-monotone") (internal-references "comparator generation" "make-comparator")) (examples (example "((bite-while-monotone (make-comparator < >)) '()) => ()") (example "((bite-while-monotone (make-comparator < >)) '(1)) => (1)") (example "((bite-while-monotone (make-comparator < >)) '(1 2)) => (1 2)") (example "((bite-while-monotone (make-comparator < >)) '(1 2 1)) => (1 2)") (example "((bite-while-monotone (make-comparator < >)) '(2 1 2 1)) => (2 1)") (example "((bite-while-monotone (make-comparator < >)) '(1 2 3 4 5 1 2)) => (1 2 3 4 5)") (example "((bite-while-monotone (make-comparator < >)) '(5 4 3 2 1 1)) => (5 4 3 2 1)") (example "((bite-while-monotone (make-comparator < >)) '(1 1 1 2 3)) => (1 1 1)") (example "((bite-while-monotone (make-comparator < >) symbol?) '(a)) => (a)") (example "((bite-while-monotone (make-comparator < >) symbol?) '(a b)) => (a b)") (example "((bite-while-monotone (make-comparator < >) symbol?) '(a 1 b c 2 1 d 1)) => (a 1 b c 2)") (example "(map-bites (bite-while-monotone (make-comparator < >)) list  '(1 2 1 2 1 2 3 4)) => ((1 2) (1 2) (1 2 3 4))"))))