(((title . "Reference Manual of the Time Library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is the date and time library, on which many LAML facilities rely. Time is represented as an integer, which represents the number of seconds since January 1, 1970. This library contains functions which translate from seconds to year, month, day, hour, and second.  Also the reverse translation is provided for. Besides this, the library provides functions for calculating the weekday and the week number. Weekday and month names can be returned in either Danish og English, depending on the variable language-preference. The language-preference binds at a late time, not loadning time. Be aware that you need to modify the variable time-zone-info when summer time (daylight saving time) is started and ended. ") (scheme-source-file . "/user/normark/scheme/lib/time.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Time zone and Daylight Saving Time correction.") (section-body "")) ((cross-references (reference "Scheme source file" "time-zone-info" "time-ep/time-1.html#time-zone-info")) (kind "manual-page") (description "Defines the time-zone. We also use this variable to adjust for daylight saving time. This is, however, kind of a hack. How many hours in front relative to Greenwich, England. The US east coast: 5. California 8. Denmark -1. If the encoded time is already corrected on your system, time-zone-info must be 0. ") (title "time-zone-info") (form time-zone-info) (examples)) ((kind "manual-section") (section-title "Basic time functions.") (section-body "According to the conventions used in LAML, the function current-time is assumed to return the current time, represented as the number of seconds elapsed since January 1, 1970, 00:00:00. In this section there are functions that encode and decode a number of seconds to and from a conventional time representation (in terms of year, month, day, hour, minutes, second).")) ((cross-references (reference "Scheme source file" "time-decode" "time-ep/time-1.html#time-decode")) (kind "manual-page") (description "Given an integer n, which is the number of second since january 1, 1970, return a list: (year month day minutes seconds). The opposite function is called second-count ") (title "time-decode") (form (time-decode n)) (examples (example "(time-decode 1141249251) => (2006 3 1 21 40 51)") (example "(time-decode 0) => (1970 1 1 0 0 0)") (example "(time-decode tm0) => (2006 3 1 0 0 0)") (example "(time-decode tmn) => (2006 3 1 23 59 59)") (example "(time-decode (emacs-lisp-time-to-second-count (list 17414 9407 300383))) => (2006 3 1 22 48 31)"))) ((cross-references (reference "Scheme source file" "second-count" "time-ep/time-1.html#second-count")) (kind "manual-page") (description "Given date and time in terms of year y, month mo, day d, hour h, minutes mi, and seconds s, caluculate the second count. The second-count function compensates for time zone. The opposite function is called date-time. ") (title "second-count") (form (second-count y mo d h mi s)) (examples (example "(= (second-count 2006 3 1 0 0 0) tm0) => #t") (example "(= (- (second-count 2006 3 2 0 0 0) 1) tmn) => #t"))) ((cross-references (reference "Scheme source file" "time-encode" "time-ep/time-1.html#time-encode")) (kind "manual-page") (description "An alias of second-count - encode year, month, day, hour, minutes, and seconds to an integer. ") (form "(time-encode y mo d h mi s)") (title "time-encode") (examples (example "(weekday (time-encode 2006 3 1 0 0 0)) => \"Wednesday\""))) ((kind "manual-section") (section-title "Time selectors.") (section-body "The selectors in this section work on decoded time lists. It means that the selectors just return a given element from the decoded list representation of time. ")) ((cross-references (reference "Scheme source file" "year-of-time" "time-ep/time-1.html#year-of-time")) (kind "manual-page") (description "Return the year of a decoded time list. An integer greater or equal to 1970. ") (form "(year-of-time decoded-time-list)") (title "year-of-time") (examples (example "(year-of-time (list 2006 3 1 23 59 58)) => 2006"))) ((cross-references (reference "Scheme source file" "month-of-time" "time-ep/time-1.html#month-of-time")) (kind "manual-page") (description "Return the month of a decoded time list. An integer in the interval 1..12 ") (form "(month-of-time decoded-time-list)") (title "month-of-time") (examples (example "(month-of-time (list 2006 3 1 23 59 58)) => 3"))) ((cross-references (reference "Scheme source file" "day-of-time" "time-ep/time-1.html#day-of-time")) (kind "manual-page") (description "Return the days of a decoded time list. An integer in the interval 1..31 ") (form "(day-of-time decoded-time-list)") (title "day-of-time") (examples (example "(day-of-time (list 2006 3 1 23 59 58)) => 1"))) ((cross-references (reference "Scheme source file" "hour-of-time" "time-ep/time-1.html#hour-of-time")) (kind "manual-page") (description "Return the hour of a decoded time list. An integer in the interval 0..23 ") (form "(hour-of-time decoded-time-list)") (title "hour-of-time") (examples (example "(hour-of-time (list 2006 3 1 23 59 58)) => 23"))) ((cross-references (reference "Scheme source file" "minute-of-time" "time-ep/time-1.html#minute-of-time")) (kind "manual-page") (description "Return the minutes of a decoded time list. An integer in the interval 0..59. ") (form "(minute-of-time decoded-time-list)") (title "minute-of-time") (examples (example "(minute-of-time (list 2006 3 1 23 59 58)) => 59"))) ((cross-references (reference "Scheme source file" "second-of-time" "time-ep/time-1.html#second-of-time")) (kind "manual-page") (description "Return the seconds of a decoded time list. An integer in the interval 0..59. ") (form "(seconds-of-time decoded-time-list)") (title "second-of-time") (examples (example "(second-of-time (list 2006 3 1 23 59 58)) => 58"))) ((kind "manual-section") (section-title "Week days.") (section-body "The functions in this section deal with week days. Both English and Danish week day names are supported via use of the variable language-preference in laml-fundamental.scm.")) ((cross-references (reference "Scheme source file" "weekday" "time-ep/time-1.html#weekday")) (kind "manual-page") (description "Given an integer, second-count, return the weekday of the time second-count. Returns a string. ") (title "weekday") (form (weekday second-count)) (examples (example "(weekday 1141249251) => \"Wednesday\"") (example "(weekday tm0) => \"Wednesday\"") (example "(weekday tmn) => \"Wednesday\"") (example "(weekday (time-encode 2006 3 1 0 0 0)) => \"Wednesday\""))) ((cross-references (reference "Scheme source file" "brief-weekday" "time-ep/time-1.html#brief-weekday")) (kind "manual-page") (description "Given an integer, second-count, return the weekday as a brief string, of the time second-count. Returns a string. ") (title "brief-weekday") (form (brief-weekday second-count)) (examples (example "(brief-weekday 1141249251) => \"We\""))) ((kind "manual-section") (section-title "Week number and week day number.") (section-body "The functions in this section deal with week numbering and, more simple, week day numbering.")) ((cross-references (reference "Scheme source file" "danish-week-number" "time-ep/time-1.html#danish-week-number")) (kind "manual-page") (description "Given a number sc, return the week number in which sc i located. Weeknumbers are treated by means of Danish weeknumber rules ") (title "danish-week-number") (form (danish-week-number sc)) (examples (example "(danish-week-number 1141249251) => 9"))) ((cross-references (reference "Scheme source file" "weekday-number" "time-ep/time-1.html#weekday-number")) (kind "manual-page") (description "return the weekday-number of second-count (an integer). Monday is day number 1 in the week, sunday is day number 7. ") (title "weekday-number") (form (weekday-number second-count)) (examples (example "(weekday-number 1141249251) => 3"))) ((kind "manual-section") (section-title "Time pretty printing.") (section-body "The functions in this section return pretty printed string representation of time.")) ((cross-references (reference "Scheme source file" "date-time" "time-ep/time-1.html#date-time")) (kind "manual-page") (description "Given an integer, second-cound, return a list of two strings: (date time). This is useful in cases you need to print the data or time as a string. Takes the variable language preference into account. ") (title "date-time") (form (date-time second-count)) (examples (example "(date-time 1141249251) => (\"March 1, 2006\" \"21:40:51\")"))) ((cross-references (reference "Scheme source file" "date-time-one-string" "time-ep/time-1.html#date-time-one-string")) (kind "manual-page") (description "Return a single string that pretty prints the time represented by second count. Takes the variable language preference into account. ") (title "date-time-one-string") (form (date-time-one-string second-count)) (examples (example "(date-time-one-string 1141249251) => \"March 1, 2006, 21:40:51\""))) ((kind "manual-page") (description "Return a string that describes the current time as generation time. Takes the variable language-preference into account. ") (title "when-generated") (form (when-generated)) (cross-references (reference "Scheme source file" "when-generated" "time-ep/time-1.html#when-generated") (reference "similar function in xhtml1.0-convenience.scm" "when-modified" "xhtml10-convenience.html#when-modified")) (examples)) ((kind "manual-section") (section-title "Time interval functions.") (section-body "")) ((cross-references (reference "Scheme source file" "time-interval" "time-ep/time-1.html#time-interval")) (kind "manual-page") (description "Return the number of years, months, weeks, days, hours, minutes, and seconds from second-count. In this function, months are uniformly counted as 30 days, and a year is counted as 365 days. Due to this, a year is not exactly counted as 12 months, and therefore slightly unexpected results may occur. A list of seven integers is returned. ") (title "time-interval") (form (time-interval second-count)) (examples (example "(time-interval 3600) => (0 0 0 0 1 0 0)") (example "(time-interval (* 24 3600)) => (0 0 0 1 0 0 0)") (example "(time-interval 1) => (0 0 0 0 0 0 1)") (example "(time-interval (* 30 (* 24 3600))) => (0 1 0 0 0 0 0)") (example "(time-interval (* 7 (* 24 3600))) => (0 0 1 0 0 0 0)") (example "(time-interval (* 365 (* 24 3600))) => (1 0 0 0 0 0 0)") (example "(time-interval (- (* 365 (* 24 3600)) 1)) => (0 12 0 4 23 59 59)"))) ((cross-references (reference "Scheme source file" "present-time-interval" "time-ep/time-1.html#present-time-interval")) (kind "manual-page") (description "Return a string which presens the number of years, months, weeks, days, hours, minutes, and seconds of second-count ") (title "present-time-interval") (form (present-time-interval second-count)) (examples (example "(present-time-interval (* 365 (* 24 3600))) => \"1 years \"") (example "(present-time-interval (- (* 365 (* 24 3600)) 1)) => \"12 months 4 days 23 hours 59 minutes 59 seconds \"") (example "(present-time-interval (* 30 (* 24 3600))) => \"1 months \"") (example "(present-time-interval (* 7 (* 24 3600))) => \"1 weeks \"") (example "(present-time-interval  (* 24 3600)) => \"1 days \""))) ((kind "manual-section") (section-title "Conventional string representation of time.") (section-body " This section contains a number of functions that deal with dates and time as strings in the formats such as \"ddmmyyyy\" and \"hhmm\". The seconds are not part of the string representation.")) ((cross-references (reference "Scheme source file" "transform-year-month-day-hour-minutes-strings" "time-ep/time-1.html#transform-year-month-day-hour-minutes-strings")) (kind "manual-page") (description "Transform date and time strings to a second count (a large integer number of seconds elapsed since january 1, 1970). The date parameter is a string of the form \"ddmmyyyy\" (eight ciffers). The time parameter is of the form \"hhmm\" (four ciffers). Assumes as a prefix that date and time represent a legal point in time. Use date-ok? and time-ok? to assure this. Return #f if date is blank (or if both date and time is blank). ") (title "transform-year-month-day-hour-minutes-strings") (form (transform-year-month-day-hour-minutes-strings date time)) (examples (example "(transform-year-month-day-hour-minutes-strings \"01032006\" \"0000\") => 1141171200") (example "(transform-year-month-day-hour-minutes-strings \"01032006\" \"2359\") => 1141257540"))) ((cross-references (reference "Scheme source file" "date-string" "time-ep/time-1.html#date-string")) (kind "manual-page") (description "Return the date, in the format \"ddmmyyyy\" of second-count, which represents the time in seconds elapsed since January 1, 1970. ") (title "date-string") (form (date-string second-count)) (examples (example "(date-string 1141257540) => \"01032006\""))) ((cross-references (reference "Scheme source file" "time-string" "time-ep/time-1.html#time-string")) (kind "manual-page") (description "Return the date, in the format \"ddmmyyyy\" of second-count, which represents the time in seconds elapsed since January 1, 1970. ") (title "time-string") (form (time-string second-count)) (examples (example "(time-string 1141257540) => \"2359\""))) ((cross-references (reference "Scheme source file" "date-ok?" "time-ep/time-1.html#date-ok?")) (kind "manual-page") (description "Return whether x is a legal date string (of the form \"ddmmyyyy\"). Exact determination, including february and leap years. Uses days-in-month from the time library. ") (title "date-ok?") (form (date-ok? x)) (examples (example "(date-ok? \"01032006\") => #t") (example "(date-ok? \"28022006\") => #t") (example "(date-ok? \"29022006\") => #f") (example "(date-ok? \"01012006\") => #t") (example "(date-ok? \"31012006\") => #t") (example "(date-ok? \"32012006\") => #f") (example "(date-ok? \"31042006\") => #f") (example "(date-ok? \"30042006\") => #t") (example "(date-ok? \"31132006\") => #f") (example "(date-ok? \"31122006\") => #t"))) ((cross-references (reference "Scheme source file" "time-ok?" "time-ep/time-1.html#time-ok?")) (kind "manual-page") (description "Return whether x is a legal time string (of the form \"hhmm\") ") (title "time-ok?") (form (time-ok? x)) (examples (example "(time-ok? \"00\") => #f") (example "(time-ok? \"0000\") => #t") (example "(time-ok? \"0160\") => #f") (example "(time-ok? \"0159\") => #t") (example "(time-ok? \"2359\") => #t") (example "(time-ok? \"2459\") => #f") (example "(time-ok? \"2360\") => #f"))) ((cross-references (reference "Scheme source file" "hours-minutes-decode-string" "time-ep/time-1.html#hours-minutes-decode-string")) (kind "manual-page") (description "Decode a string of the form \"h:m\" or \"h.m\" to a list of the form (h m). Does also accept the juxtaposition \"hm\" in which case m is taken as the last two ciffers. Given for instance \"12:35\", \"12.35\" or \"1235\" return (12 35). ") (title "hours-minutes-decode-string") (form (hours-minutes-decode-string hour-minute-string)) (examples (example "(hours-minutes-decode-string \"10.65\") => (10 65)") (example "(hours-minutes-decode-string \"2231\") => (22 31)") (example "(hours-minutes-decode-string \"22.31\") => (22 31)"))) ((cross-references (reference "Scheme source file" "year-month-day-decode-string" "time-ep/time-1.html#year-month-day-decode-string")) (kind "manual-page") (description "Decode a string of the form \"y-m-d\" to a list of the form (y m d). A proper list of three integers. Given for instance \"2005-9-12\", return the list (2005 9 12) representing September 12, 2005. ") (title "year-month-day-decode-string") (form (year-month-day-decode-string year-month-day-string)) (examples (example "(year-month-day-decode-string \"2006-3-1\") => (2006 3 1)"))) ((kind "manual-section") (section-title "Underlying time related constants and functions.") (section-body "In this section there is a number of auxiliary time functions. In addition, we document a number of time related constants.")) ((cross-references (reference "Scheme source file" "seconds-in-a-normal-year" "time-ep/time-1.html#seconds-in-a-normal-year")) (kind "manual-page") (description "The number of seconds in a non-leap year. ") (title "seconds-in-a-normal-year") (form seconds-in-a-normal-year) (examples)) ((cross-references (reference "Scheme source file" "seconds-in-a-leap-year" "time-ep/time-1.html#seconds-in-a-leap-year")) (kind "manual-page") (description "The number of seconds in a leap year. ") (title "seconds-in-a-leap-year") (form seconds-in-a-leap-year) (examples)) ((cross-references (reference "Scheme source file" "seconds-in-a-normal-month" "time-ep/time-1.html#seconds-in-a-normal-month")) (kind "manual-page") (description "The number of seconds in a 30-day month. ") (title "seconds-in-a-normal-month") (form seconds-in-a-normal-month) (examples)) ((cross-references (reference "Scheme source file" "seconds-in-a-week" "time-ep/time-1.html#seconds-in-a-week")) (kind "manual-page") (description "The number of seconds in a week. ") (title "seconds-in-a-week") (form seconds-in-a-week) (examples)) ((cross-references (reference "Scheme source file" "seconds-in-a-day" "time-ep/time-1.html#seconds-in-a-day")) (kind "manual-page") (description "The number of seconds in a day. ") (title "seconds-in-a-day") (form seconds-in-a-day) (examples)) ((cross-references (reference "Scheme source file" "seconds-in-an-hour" "time-ep/time-1.html#seconds-in-an-hour")) (kind "manual-page") (description "The number of seconds in an hour. ") (title "seconds-in-an-hour") (form seconds-in-an-hour) (examples)) ((kind "manual-page") (description "Return the month name of month-number. January is number one. The result depends on the free variable language-preference. ") (title "get-month-name") (form (get-month-name month-number)) (cross-references (reference "Scheme source file" "get-month-name" "time-ep/time-1.html#get-month-name") (reference "applied variable" "language-preference" "../../man/laml.html#language-preference")) (examples (example "(get-month-name 1) => \"January\"") (example "(get-month-name 12) => \"December\""))) ((cross-references (reference "Scheme source file" "leap-year" "time-ep/time-1.html#leap-year")) (kind "manual-page") (description "Return whether y is a leap year. ") (title "leap-year") (form (leap-year y)) (examples (example "(leap-year 2006) => #f") (example "(leap-year 2000) => #t") (example "(leap-year 1900) => #f") (example "(leap-year 2004) => #t") (example "(leap-year 2003) => #f"))) ((cross-references (reference "Scheme source file" "days-in-month" "time-ep/time-1.html#days-in-month")) (kind "manual-page") (description "Return the number of days in month and year ") (title "days-in-month") (form (days-in-month month year)) (examples (example "(days-in-month 1 2006) => 31") (example "(days-in-month 2 2006) => 28") (example "(days-in-month 2 2004) => 29") (example "(days-in-month 5 2004) => 31") (example "(days-in-month 12 2004) => 31"))) ((cross-references (reference "Scheme source file" "hours-minutes-seconds-decode" "time-ep/time-1.html#hours-minutes-seconds-decode")) (kind "manual-page") (description "Return a list of (hours minutues seconds) given an integer second-count. ") (title "hours-minutes-seconds-decode") (form (hours-minutes-seconds-decode second-count)) (examples)) ((kind "manual-section") (section-title "Other time related functions.") (section-body "")) ((cross-references (reference "Scheme source file" "emacs-lisp-time-to-second-count" "time-ep/time-1.html#emacs-lisp-time-to-second-count")) (kind "manual-page") (parameters (parameter "time-list" "A list of three 16 bit integers (high low microsec) which represents a point in time after 1969. ")) (description "Given time-list, which is Emacs' representation of Universal time, return a single (large) integer that represents universal time. ") (returns "high * 2**16 + low") (title "emacs-lisp-time-to-second-count") (form (emacs-lisp-time-to-second-count time-list)) (examples (example "(emacs-lisp-time-to-second-count (list 17414 9407 300383)) => 1141253311") (example "(time-decode (emacs-lisp-time-to-second-count (list 17414 9407 300383))) => (2006 3 1 22 48 31)") (example "(second-count-to-emacs-lisp-time (emacs-lisp-time-to-second-count (list 17414 9407))) => (17414 9407 0)") (example "(second-count-to-emacs-lisp-time (emacs-lisp-time-to-second-count (list 17414 9407 300383))) => (17414 9407 0)") (example "(emacs-lisp-time-to-second-count (list 0 0)) => 0"))) ((cross-references (reference "Scheme source file" "second-count-to-emacs-lisp-time" "time-ep/time-1.html#second-count-to-emacs-lisp-time")) (kind "manual-page") (parameters (parameter "second-count" "An integer - the number of seconds elapsed since Jan 1, 1970.")) (description "Given a second count, which represents a point in time as a single large integer, return a list of three 16 bit numbers that corresponds to Emacs's representation. ") (returns "A list of three 16 bit integers (high low 0), for which high * 2**16 + low = second-count.") (title "second-count-to-emacs-lisp-time") (form (second-count-to-emacs-lisp-time second-count)) (examples (example "(second-count-to-emacs-lisp-time (emacs-lisp-time-to-second-count (list 17414 9407))) => (17414 9407 0)") (example "(second-count-to-emacs-lisp-time (emacs-lisp-time-to-second-count (list 17414 9407 300383))) => (17414 9407 0)"))))