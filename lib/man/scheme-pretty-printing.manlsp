(((title . "Reference Manual of the Scheme Pretty Printing Library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is a Lisp pretty printing library, which especially is oriented towards Scheme.<p> The pretty printer handles all aspects of Scheme which has special lexical syntax: lists, pairs (dot notation), booleans, chars, vectors, and quasi quotation (backquoting). In addition, the pretty printing function handles Scheme special forms such as cond, let, define, if, etc. <p> A few parameters (global variables) control the pretty printer.<p> Conventional comments, read by the this pretty printer, are lost. This library assumes that comments are represented as syntactical forms like (comment!!! n \"A comment\"). The LAML schemedoc tool contains a procedure lexical-to-syntactical-comments! which converts conventional, semicolon Lisp comments to the syntactical comments expected by the pretty printing library. The variable syntactical-comment-symbol (and the variable COMMENT-FORM-START in SchemeDoc) allows you to control the prefix symbol of syntactical comments.<p> The important top level functions of this library are pretty-print-lisp-file and pretty-print-lisp-form. <p> Internally, the pretty printer adds pretty-print tokens (strings or chars) to a list, which finally is reversed and linearized into a string.<p> This library relies on the general library (not loaded by this library).<p> In the laml.scm file there are LAML procedures <a href = \"../../man/laml.html#scheme-pp\">scheme-pp</a>  and <a href=\"../../man/laml.html#scheme-pp-simple\">scheme-pp-simple</a> which pretty print Scheme and Lisp files. <kbd>pp-scheme</kbd> handles comments properly. These are the most top-level Scheme pretty printing procedures in the  LAML system. ") (scheme-source-file . "/user/normark/scheme/lib/scheme-pretty-printing.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Pretty printing parameters.") (section-body "The variables in this section controls the pretty printing.")) ((cross-references (reference "Scheme source file" "indentation-delta" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#indentation-delta")) (kind "manual-page") (description "An integer which gives the level of indentation ") (title "indentation-delta") (form indentation-delta)) ((cross-references (reference "Scheme source file" "use-single-lining" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#use-single-lining")) (kind "manual-page") (description "A boolean which controls the application of single line pretty printing. If true, the Lisp pretty printer will pretty print short list forms on a single line ") (title "use-single-lining") (form use-single-lining)) ((cross-references (reference "Scheme source file" "prefered-maximum-width" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#prefered-maximum-width")) (kind "manual-page") (description "An integer that expresses the preferred maximum column width ") (title "prefered-maximum-width") (form prefered-maximum-width)) ((cross-references (reference "Scheme source file" "syntactical-comment-symbol" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#syntactical-comment-symbol")) (kind "manual-page") (description "The symbol which is used for syntactical comments, such as (comment 2 \"This is a comment\"). It is recommended to use a symbol which is unlikely to be used in 'normal programs', such as comment!!! ") (title "syntactical-comment-symbol") (form syntactical-comment-symbol)) ((kind "manual-section") (section-title "Top level pretty printing functions.") (section-body "In this section you will find the important, overall pretty printing functions.")) ((cross-references (reference "Scheme source file" "pretty-print-lisp-file" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#pretty-print-lisp-file")) (kind "manual-page") (description "Assume that in-file-path contains a lisp file with one or lisp forms. Pretty prints the Lisp forms taken from in-file-path. Output them on the optional out-file-path (which per default is in-file-path). <br> Important warning: If only one file is given as parameter, the input file is overwritten by the pretty printed result. ") (form "(pretty-print-lisp-file in-file-path [out-file-path])") (title "pretty-print-lisp-file")) ((cross-references (reference "Scheme source file" "pretty-print-lisp-form" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#pretty-print-lisp-form")) (kind "manual-page") (description "Pretty print form and return the pretty printed string ") (title "pretty-print-lisp-form") (form (pretty-print-lisp-form form))) ((cross-references (reference "Scheme source file" "pretty-print-lisp-string" "scheme-pretty-printing-ep/scheme-pretty-printing-1.html#pretty-print-lisp-string")) (kind "manual-page") (description "Pretty print the string str and the return pretty printed string. This function is not efficient, because it generates a temporary file, from which we parse the string, and after this the function pretty-print-lisp-form is used. ") (title "pretty-print-lisp-string") (form (pretty-print-lisp-string str))))