(((title . "The SVG Extension Library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This library provides a number of SVG abstractions on top of the SVG mirror library. The primary abstractions are related to drawing of graph-like structures, composed of nodes and edges.   There exists a set of <a href=\"../../examples/svg-extensions/index.html\">examples</a> which accompany the paper <a href = \"http://www.cs.auc.dk/~normark/laml/papers/svg-open-2007/paper.html\"> A Graph Library Extension of SVG</a>.") (scheme-source-file . "/user/normark/scheme/lib/svg-extensions.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "SVG configuration constants.") (section-body "A number of constants. Most of the constant details of the graph library extension of SVG.")) ((cross-references (reference "Scheme source file" "svg-language" "svg-extensions-ep/svg-extensions-1.html#svg-language")) (kind "manual-page") (description "The version of SVG to be used in this library. Either svg10 or svg11 (a symbol). The given version must be supported by LAML (the DTD must be parsed, and the mirror of the XML in Scheme must be generated). Use the value svg11. ") (title "svg-language") (form svg-language)) ((cross-references (reference "Scheme source file" "standard-svg-1-1-element-attributes" "svg-extensions-ep/svg-extensions-1.html#standard-svg-1-1-element-attributes")) (kind "manual-page") (description "Recommended list of attributes of the svg element in SVG 1.1 which should always be used. The list contains the attributes version, baseProfile, xmlsn, and xmlsn:xlink. ") (title "standard-svg-1-1-element-attributes") (form standard-svg-1-1-element-attributes)) ((cross-references (reference "Scheme source file" "emphasis-color" "svg-extensions-ep/svg-extensions-1.html#emphasis-color")) (kind "manual-page") (description "The color used to emphasize a node or edge, during the supported animations. ") (title "emphasis-color") (form emphasis-color)) ((cross-references (reference "Scheme source file" "button-color" "svg-extensions-ep/svg-extensions-1.html#button-color")) (kind "manual-page") (description "The color used for control buttons. ") (title "button-color") (form button-color)) ((cross-references (reference "Scheme source file" "expl-dur" "svg-extensions-ep/svg-extensions-1.html#expl-dur")) (kind "manual-page") (description "The time periode used to reveal an explanation during animation. ") (title "expl-dur") (form expl-dur)) ((cross-references (reference "Scheme source file" "node-dur" "svg-extensions-ep/svg-extensions-1.html#node-dur")) (kind "manual-page") (description "The time period used to reveal a node during animation ") (title "node-dur") (form node-dur)) ((cross-references (reference "Scheme source file" "edge-dur" "svg-extensions-ep/svg-extensions-1.html#edge-dur")) (kind "manual-page") (description "The time period used to reveal an edge during animation ") (title "edge-dur") (form edge-dur)) ((cross-references (reference "Scheme source file" "edge-move-dur" "svg-extensions-ep/svg-extensions-1.html#edge-move-dur")) (kind "manual-page") (description "The time period used to move the token on an edge during animation ") (title "edge-move-dur") (form edge-move-dur)) ((cross-references (reference "Scheme source file" "disappear-dur" "svg-extensions-ep/svg-extensions-1.html#disappear-dur")) (kind "manual-page") (description "The time periode for disappearance of some element during animation. ") (title "disappear-dur") (form disappear-dur)) ((kind "manual-section") (section-title "Graph Abstractions.") (section-body "The major SVG abstractions of this library allows convenient drawing of graphs, in terms of (text) nodes and edges.")) ((kind "manual-page") (xml-in-laml-attributes (xml-in-laml-attribute "from-step" "implied" "The initial step number. Used only when the graph is animated.") (xml-in-laml-attribute "to-step" "implied" "The final step number. Used only when the graph is animated.") (xml-in-laml-attribute "button-x" "implied" "The x coordinate of the animation control buttons. Used only when the graph is animated.") (xml-in-laml-attribute "button-y" "implied" "The y coordinate of the animation control buttons (bottom of triangle). Used only when the graph is animated.")) (description "Draw an SVG graph. The outer abstraction of an an SVG graph. The contentes of this elements is the svg-node and svg-edge elements together with an optional explanations clause. (Notice plural form of explanations. Explanations are only used together with animated graphs). The nodes, edges, and the explanations form can be given in arbitrary order. It is good style, however, to pass two separate lists of nodes and edges to svg-graph. This abstraction is mainly syntactic sugar for an SVG g (group) element. ") (form "(svg-graph . xml-contents-and-attributes)") (title "svg-graph") (cross-references (reference "Scheme source file" "svg-graph" "svg-extensions-ep/svg-extensions-1.html#svg-graph") (internal-references "possible embedded forms" "svg-node" "empty-svg-node" "svg-composite-node" "svg-edge" "svg-edge-broken" "explanations"))) ((kind "manual-page") (parameters (parameter "x" "the x coordinate of the node (in pixels, without units)") (parameter "y" "the y coordinate of the node (in pixels, without units)") (parameter "shape-path-function" "A function that draws the boundary of the svg node. A shape function accepts five required parameters: (shape-path-function x y w h . rest-attributes). (x,y) is the upper left corner of the bounding box. w is the horizontal width and h is the vertical height. The rest-attributes is SVG attributes passed on to the path. See more about shape path functions in a separate section of the documentation.")) (xml-in-laml-attributes (xml-in-laml-attribute "lc" "implied" "A locator (a two letter string) which determines the node's position relative to the given x and y parameters.\n                      The first letter defines the horizontal location (l,c,r), left, center, or right.\n                      The second leter defines the vertical location (t,c,b), top, center, or bottom.\n                      Notice that in the vertical dimension, top has a lower y coordinate that bottom. (This may be slightly confusing).") (xml-in-laml-attribute "id" "implied" "An id to be part of the underlying rect element instance. The id can also be used in svg-edge for exact identification of the from-node and to-node.") (xml-in-laml-attribute "font-size" "implied" "The font size of the text which is embeded in the node.") (xml-in-laml-attribute "font-style" "implied" "Native SVG attribute propagated to the node text.") (xml-in-laml-attribute "text-color" "implied" "The color of the text in the rectangle") (xml-in-laml-attribute "text-align" "implied" "A locator that defines the alignment of the textual label within the rectangular bounding box of the node. A two letter string. Defaults to \"cc\".\n                              The first letter defines the horizontal alignment (l,c,r). The second leter defines the vertical alingment (t,c,b). ") (xml-in-laml-attribute "bg-color" "implied" "The background color of the rectangle.") (xml-in-laml-attribute "min-width" "implied" "The minimum width (pixels, no units) of the rectangle. You can supply this attribute if the automatically computed width of the node turns out to be inappropriate.") (xml-in-laml-attribute "min-height" "implied" "The minimum height (pixels, no units) of the rectangle. You can supply this attribute if the automatically computed height of the node turns out to be inappropriate.") (xml-in-laml-attribute "delta-width" "implied" "A compensating delta width (pixels, no units) added to the computed width. Use this attribute to fine tune the node width.") (xml-in-laml-attribute "delta-height" "implied" "A compensating delta height (pixels, no units) added to the computed height. Use this attribute to fine tune the node height.") (xml-in-laml-attribute "stroke" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "stroke-width" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "stroke-dasharray" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "stroke-offset" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "rx" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "ry" "implied" "Native SVG attribute propagated to the boundary shape (including the mandatory visible or invisible rectangle)") (xml-in-laml-attribute "ldx" "implied" "A delta x used to move the label text relative to its default position. The default value of ldx is 0.") (xml-in-laml-attribute "ldy" "implied" "A delta y used to move the label text relative to its default position. The default value of ldy is 0.") (xml-in-laml-attribute "step" "implied" "The step number of this node. Only used when the surrounding graph is animated.") (xml-in-laml-attribute "steps" "implied" "The step numbers of this node. Comma separated. Used instead of singular step. ")) (description "Draws a graph node with embedded textual contents within a given rectangular bounding box. The graph node is placed at (x,y) relative to the lc locator attribute. More specifically, the point determined by the lc locator attribute (defaulted to the center of the node) is placed at (x,y). The size of the rectangular bounding box is, in part, controlled by the min-width and min-height attributes, and in part by the required size of the embedded textual node contents. The drawn shape is controlled by shape-path-function (which must draw a closed figure inside the given bounding box). There exists a number of predefined shape path functions (see below). The element contents passed to svg-node becomes the textual contents (the label) of the node. Defaults to \"cc\", which means that the given (x,y) coordinate denotes the center.\\ As an example, the locator \"lt\" places the left top corner of the rectangle at (x,y). ") (form "(svg-node shape-path-function x y . xml-contents-and-attributes)") (title "svg-node") (cross-references (reference "Scheme source file" "svg-node" "svg-extensions-ep/svg-extensions-1.html#svg-node") (internal-references "simple alternative" "empty-svg-node") (internal-references "shape path functions" "shape-path-functions"))) ((kind "manual-page") (description "An invisible SVG node with empty textual content. Empty nodes are often useful for source or target of svg-edges. A list of empty svg nodes can also be used as the fifth parameter of svg-edge-broken. ") (form "(empty-svg-node x y . xml-contents-and-attributes)") (title "empty-svg-node") (cross-references (reference "Scheme source file" "empty-svg-node" "svg-extensions-ep/svg-extensions-1.html#empty-svg-node") (internal-references "non empty svg node" "svg-node") (internal-references "broken edges" "svg-edge-broken"))) ((cross-references (reference "Scheme source file" "svg-composite-node" "svg-extensions-ep/svg-extensions-1.html#svg-composite-node")) (kind "manual-page") (parameters (parameter "x" "x coordinate (in pixels, without units)") (parameter "y" "y coordinate (in pixels, without units)") (parameter "inner-graph" "The graph that plays the role as the node contents. An instance of svg-graph (underlying an SVG g (group) element).")) (xml-in-laml-attributes (xml-in-laml-attribute "lc" "implied" "A locator (a two letter string) which determines the node's position relative to x and y. First letter defines the horizontal location (l,c,r). The second leter defines the vertical location (t,c,b). ") (xml-in-laml-attribute "bg-color" "implied" "The background color of the rectangle.") (xml-in-laml-attribute "padding" "implied" "A number of blank pixels between the outer rectangle boundary and the embedded graph. ") (xml-in-laml-attribute "width" "implied" "The width (pixels, no units) of the composite graph node. The height is automatically determined (preserving the aspect ratio of the embedded graph).") (xml-in-laml-attribute "stroke" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "stroke-width" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "stroke-dasharray" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "stroke-offset" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "rx" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "ry" "implied" "Native SVG attribute propagated to the rectangle") (xml-in-laml-attribute "step" "implied" "The step number of this node. Used only when surrounding graph is animated.") (xml-in-laml-attribute "steps" "implied" "The step numbers of this node. Comma separated. Used instead of singular step. ")) (description "Draw a node with an embeded svg graph. You can think of a composite node as a node that consists of an entire graph. This is a convenient way to compose nodes of nodes. Per default, the surrounding node is rectangular, but you can use the rx and ry attributes to obtain elliplic or circular boundaries. ") (form "(svg-composite-node x y inner-graph . xml-contents-and-attributes)") (title "svg-composite-node")) ((kind "manual-page") (parameters (parameter "from-node" "The source node of the edge. An AST as returned by svg-node or svg-composite-node.") (parameter "from-connector" "A locator (a two letter string) which determines where the edge leaves the from-node. First letter defines the horizontal location (l,c,r). The second leter defines the vertical location (t,c,b). ") (parameter "to-node" "The destination node of the edge. An AST as returned by svg-node or svg-composite-node.") (parameter "to-connector" "A locator (a two letter string) which determines where the edge enters the to-node. First letter defines the horizontal location (l,c,r). The second leter defines the vertical location (t,c,b). ")) (xml-in-laml-attributes (xml-in-laml-attribute "from-connector" "implied" "A locator (a two letter string) which determines where the edge leaves the from-node. First letter defines the horizontal location (l,c,r). The second leter defines the vertical location (t,c,b).\nOnly applicable in the variant of svg-edge that takes two required parameters.\nThe from-connector defaults to a connector calculated from the mutual positions of from-node and to-node.\nThe default connector may turn out to be surprising in case the widths of the involved nodes are large.") (xml-in-laml-attribute "to-connector" "implied" "A locator (a two letter string) which determines where the edge enters the to-node. First letter defines the horizontal location (l,c,r). The second leter defines the vertical location (t,c,b).\nOnly applicable in the variant of svg-edge that takes two required parameters.\nThe to-connector defaults to a connector calculated from the mutual positions of from-node and to-node.\nThe default connector may turn out to be surprising in case the widths of the involved nodes are large.") (xml-in-laml-attribute "break-path" "implied" "A path relative to the source node, which makes it possible to break the edge in a number of segments. The final segment is implicitly given, and it goes from the end of the given break-path to the designated attachment point of the destination node. ") (xml-in-laml-attribute "style" "implied" "The edge style. Either straight, hv, or hv. Straight means a straight lined edge. hv gives a broken, right angeled edge, first horizontal then vertical. vh gives a broken, right angeled edge, first vertical then horizontal. If break-path is given it overrules the style attribute.") (xml-in-laml-attribute "arrow" "implied" "Draw an arrow (yes or no). Default is no.") (xml-in-laml-attribute "from-id" "implied" "The id of the from-node. Useful in case the from-node is a group of two or more svg-nodes. In this case, a particular of these svg-nodes can be addressed.") (xml-in-laml-attribute "to-id" "implied" "The id of the to-node. Useful in case the to-node is a group of two or more svg-nodes. In this case, a particular of these svg-nodes can be addressed.") (xml-in-laml-attribute "step" "implied" "The step number of this edge. Used only when surrounding graph is animated.") (xml-in-laml-attribute "steps" "implied" "The step numbers of this edge. Comma separated. Used instead of singular step. ") (xml-in-laml-attribute "dx" "implied" "An value to be added to both the source and destination x coordinates of the edge connection points. Defaults to 0.") (xml-in-laml-attribute "dy" "implied" "An value to be added to both the source and destination y coordinates of the edge connection points. Defaults to 0.") (xml-in-laml-attribute "ldx" "implied" "A delta x used to move the label text relative to its default position. The default value of ldx is 0.") (xml-in-laml-attribute "ldy" "implied" "A delta y used to move the label text relative to its default position. The default value of ldy is 0.") (xml-in-laml-attribute "font-size" "implied" "The font size of the label text.") (xml-in-laml-attribute "font-style" "implied" "The font style of the label text.") (xml-in-laml-attribute "text-color" "implied" "The color of the edge label text.") (xml-in-laml-attribute "stroke" "implied" "The stroke attribute of the edge, passed directly to the underlying edge path. ") (xml-in-laml-attribute "stroke-width" "implied" "The stroke-width attribute of the edge, passed directly to the underlying edge path. ") (xml-in-laml-attribute "stroke-dasharray" "implied" "The stroke-dasharray attribute of the edge, passed directly to the underlying edge path. ") (xml-in-laml-attribute "stroke-dashoffset" "implied" "The stroke-dashoffset attribute of the edge, passed directly to the underlying edge path. ") (xml-in-laml-attribute "stroke-linecap" "implied" "The stroke-line attribute of the edge, passed directly to the underlying edge path. ") (xml-in-laml-attribute "dur" "implied" "The duration of an animation of the edge. Only applied for step-buttons-walk-through-edge-motion animation.\n   Either a string or an integer (implicitly given as a number of seconds).")) (description "Draw a line or arrow from one svg-node to another. The contents of svg-edge is used as the textual label of the edge. As a special property, svg-edge either accepts two or four required, positional parameters. If two parameters are supplied, it must be two svg-nodes (from and two node resp). If four parameters are supplied, it must be (1) the svg from node, (2) the from connector, (3) the svg to node, and (4) the svg to connector. ") (form "(svg-edge from-node from-locator to-node to-locator . xml-contents-and-attributes)") (title "svg-edge") (cross-references (reference "Scheme source file" "svg-edge" "svg-extensions-ep/svg-extensions-1.html#svg-edge") (internal-references "similar function" "svg-edge-broken"))) ((kind "manual-page") (description "Almost identical with svg-edge. The only difference is that this function requires an extra fifth parameter, name a list of (empty) svg nodes used for edge breaking. Causes a call the svg-edge with an appropriate break-path attribute. Do not pass any explicit break-path attribute to this function. ") (form "(svg-edge-broke from-node from-locator to-node to-locator node-break-list . xml-contents-and-attributes)") (title "svg-edge-broken") (cross-references (reference "Scheme source file" "svg-edge-broken" "svg-extensions-ep/svg-extensions-1.html#svg-edge-broken") (internal-references "similar function" "svg-edge"))) ((cross-references (reference "Scheme source file" "explanations" "svg-extensions-ep/svg-extensions-1.html#explanations")) (kind "manual-page") (xml-in-laml-attributes (xml-in-laml-attribute "x" "implied" "The x coordinate of the explanation text") (xml-in-laml-attribute "y" "implied" "The y coordinate of the explanation text") (xml-in-laml-attribute "font-size" "implied" "The font size of the explanation text")) (description "A container of a number of explanation clauses. The explanations clause is a possible constituent of an svg-graph. ") (form "(explanations explanation-list)") (title "explanations")) ((cross-references (reference "Scheme source file" "explanation" "svg-extensions-ep/svg-extensions-1.html#explanation")) (kind "manual-page") (description "A single explanation clause. Holds a step attribute and the textual explanational content. A given step should be explained at most once within an explanations clause. A list of explanation clauses can be nested in an explanations clause, which is a possible constituent of svg-graph. Defined as an XML-in-LAML abstraction. ") (form "(explanation 'step s explanation-text)") (title "explanation")) ((kind "manual-section") (section-title "SVG node shape path functions.") (section-body "The shape path functions are used as the first parameter to the svg-node function. The svg-node function calls the shape path function, which is passed as the first parameter to svg-node. A shape path function is supposed to draw a path that serves as the boundary around the svg node. The first four parameters of an SVG node shape path function receives a bounding box in terms of x, y, w, and h. (x,y) is the upper left corner of the bounding box. w is the width (pixels), and h the height (pixels). Internally a shape path function MUST draw a visible or hidden SVG rect, possibly together with another path inside a group element. ") (section-id "shape-path-functions")) ((kind "manual-page") (description "A rectangular svg node shape path function. ") (title "rectangular") (form (rectangular x y w h . attributes)) (cross-references (reference "Scheme source file" "rectangular" "svg-extensions-ep/svg-extensions-1.html#rectangular") (internal-references "relevant for" "svg-node"))) ((kind "manual-page") (description "A circular svg node shape path function. ") (title "circular") (form (circular x y w h . attributes)) (cross-references (reference "Scheme source file" "circular" "svg-extensions-ep/svg-extensions-1.html#circular") (internal-references "relevant for" "svg-node"))) ((kind "manual-page") (description "A diamond svg node shape path function. ") (title "diamond") (form (diamond x y w h . attributes)) (cross-references (reference "Scheme source file" "diamond" "svg-extensions-ep/svg-extensions-1.html#diamond") (internal-references "relevant for" "svg-node"))) ((kind "manual-page") (description "A triangle svg node shape path function. ") (title "triangular") (form (triangular x y w h . attributes)) (cross-references (reference "Scheme source file" "triangular" "svg-extensions-ep/svg-extensions-1.html#triangular") (internal-references "relevant for" "svg-node"))) ((kind "manual-page") (description "A cloud svg node shape path function. ") (title "cloud") (form (cloud x y w h . attributes)) (cross-references (reference "Scheme source file" "cloud" "svg-extensions-ep/svg-extensions-1.html#cloud") (internal-references "relevant for" "svg-node"))) ((kind "manual-section") (section-title "Graph Animations.") (section-body "Svg graphs can be animated in a number of different ways. Use the syntactic form with-animation around an svg-graph form to specify the kind of animation to use. The following kinds are supported: <ul> <li> none. Do not use any animation at all. <li> node-emphasize: Emphasize the node with a particular color when it gets focus with the mouse. <li> edge-emphasize: Emphasize the edge with a particular color and thickness when it gets focus with the mouse. <li> step-buttons-reveal: The nodes and edges are revealed one after the other, controlled by triangular shaped buttons. The step attribute tells when to reveal the graph node or edge. A given step attribute value should only appear once with this kind of animation. As an alternative to the step attribute, you can use the step-from and step-to attributes to given step interval. The node or edge is revealed at step step-to and and hidden at step step-from. Several nodes or edges can have the same step value. This leads to simultaneous revealing of these nodes and edges. <li> step-buttons-walk-through: The nodes and edges are highlighted in a given order, controlled by triangular shaped buttons. By means of the steps attribute (plural) a given node or edge can be highlighted more than once during the walk through. Several nodes or edges can have the same step value. <li> step-buttons-walk-through-edge-motion: The nodes are highlighted in a given order. The edges are animated with a moving token. The animation is controlled by triangular shaped buttons. </ul> Within with-animation, you can use node-emphasize and edge-emphasize together. You can also use node-emphasize or edge-emphasize (or both) together with step-buttons-reveal and step-buttons-walk-through. step-buttons-reveal and step-buttons-walk-through cannot be used together.<p> The non-animated part of the graph has implicitly assigned step number 0. You can Assign step numbers higher than 0 to selected nodes and edges. Use the svg-graph attributes to from-step and to-step to control the animated step interval. ")) ((cross-references (reference "Scheme source file" "with-animation" "svg-extensions-ep/svg-extensions-1.html#with-animation")) (kind "manual-page") (parameters (parameter "animation-type" "A symbol, or a list of symbols. The following types of animation are supported: none, node-emphasize, edge-emphasize, step-buttons-reveal, step-buttons-walk-through, and step-buttons-walk-through-edge-motion.")) (description "Set the variable current-animation-type fluidly while evaluating forms. The animation taking place in the svg graph forms depend on animation-type. A syntactic abstraction (macro) intended to be used around an svg-graph form. ") (form "(with-animation animation-type . forms)") (title "with-animation")) ((kind "manual-section") (section-title "Transform attribute functions.") (section-body "SVG uses a little language for values of transform attributes. In this section you will find Scheme counterparts of such expresssions.")) ((cross-references (reference "Scheme source file" "svg-translate" "svg-extensions-ep/svg-extensions-1.html#svg-translate")) (kind "manual-page") (description "The translate expression. ") (title "svg-translate") (form (svg-translate tx ty))) ((cross-references (reference "Scheme source file" "svg-scale" "svg-extensions-ep/svg-extensions-1.html#svg-scale")) (kind "manual-page") (description "The scale expression. ") (form "(svg-scale sx [sy])") (title "svg-scale")) ((cross-references (reference "Scheme source file" "svg-rotate" "svg-extensions-ep/svg-extensions-1.html#svg-rotate")) (kind "manual-page") (description "The rotate expression. ") (form "(svg-rotate angle [cx cy])") (title "svg-rotate")) ((cross-references (reference "Scheme source file" "svg-skewX" "svg-extensions-ep/svg-extensions-1.html#svg-skewX")) (kind "manual-page") (description "The skewX expression. ") (title "svg-skewX") (form (svg-skewX angle))) ((cross-references (reference "Scheme source file" "svg-skewY" "svg-extensions-ep/svg-extensions-1.html#svg-skewY")) (kind "manual-page") (description "The skewY expression. ") (title "svg-skewY") (form (svg-skewY angle))) ((kind "manual-section") (section-title "Path functions.") (section-body "Functions for definition of SVG paths. You can think of the functions as constructors of SVG paths. The functions in this section can be used as the value of d attributes of the SVG path element. The functions model a path as a linear recursive structures for instance in the style of lists in Lisp. All functions return strings. As a naming convention, the first letter in the prefix tells if we draw in absolute or relative mode ('a' or 'r'). The next letter in the prefix mimics the type of the path ('l' for line, 'm' for move). This letter corresponds to the (lower case) SVG path letter name. The suffix of the name is always \"-p\", which is a short name for \"-path\". If you dislike the functions you can use native SVG path strings, or you can program your own set of path constructors.")) ((cross-references (reference "Scheme source file" "e-p" "svg-extensions-ep/svg-extensions-1.html#e-p")) (kind "manual-page") (description "The empty path. ") (title "e-p") (form (e-p))) ((cross-references (reference "Scheme source file" "al-p" "svg-extensions-ep/svg-extensions-1.html#al-p")) (kind "manual-page") (description "Absolute line path to x,y continued in path. ") (title "al-p") (form (al-p x y path))) ((cross-references (reference "Scheme source file" "rl-p" "svg-extensions-ep/svg-extensions-1.html#rl-p")) (kind "manual-page") (description "Relative line path to x,y continued in path. ") (title "rl-p") (form (rl-p x y path))) ((cross-references (reference "Scheme source file" "ah-p" "svg-extensions-ep/svg-extensions-1.html#ah-p")) (kind "manual-page") (description "Absolute horizontal path to x continued in path. ") (title "ah-p") (form (ah-p x path))) ((cross-references (reference "Scheme source file" "rh-p" "svg-extensions-ep/svg-extensions-1.html#rh-p")) (kind "manual-page") (description "Relative horizontal path to x continued in path. ") (title "rh-p") (form (rh-p x path))) ((cross-references (reference "Scheme source file" "av-p" "svg-extensions-ep/svg-extensions-1.html#av-p")) (kind "manual-page") (description "Absolute vertical path to y continued in path. ") (title "av-p") (form (av-p y path))) ((cross-references (reference "Scheme source file" "rv-p" "svg-extensions-ep/svg-extensions-1.html#rv-p")) (kind "manual-page") (description "Relative vertical path to y continued in path. ") (title "rv-p") (form (rv-p y path))) ((cross-references (reference "Scheme source file" "rm-p" "svg-extensions-ep/svg-extensions-1.html#rm-p")) (kind "manual-page") (description "Relative move to x, y - without drawing. The path is continued in path. ") (title "rm-p") (form (rm-p x y path))) ((cross-references (reference "Scheme source file" "am-p" "svg-extensions-ep/svg-extensions-1.html#am-p")) (kind "manual-page") (description "Absolute move to x,y - without drawing. The path is continued in path. ") (title "am-p") (form (am-p x y path))) ((cross-references (reference "Scheme source file" "ra-p" "svg-extensions-ep/svg-extensions-1.html#ra-p")) (kind "manual-page") (parameters (parameter "x" "the target x coordinate (absolute)") (parameter "y" "the target y coordinate (absolute)") (parameter "x-axis-rotation" "the rotation of the x axis (degrees).") (parameter "large-arc?" "controls if the large arc or small arc is drawn. Boolean or one of 0 or 1.") (parameter "sweep?" "if true, draw in positive direction, else draw in negative direction. Boolean or one of 0 or 1.") (parameter "path" "The continuation of the arc path.")) (description "An elliptic arc from the current point to the point with the relative coordinates (x,y). The path is continued in path. ") (title "ra-p") (form (ra-p rx ry x-axis-rotation large-arc? sweep? x y path))) ((kind "manual-page") (description "An elliptic arc from the current point to the point with the absolute coordinates (x,y). The path is continued in path. See the similar relative function for description of the parameters. ") (title "aa-p") (form (aa-p rx ry x-axis-rotation large-arc? sweep? x y path)) (cross-references (reference "Scheme source file" "aa-p" "svg-extensions-ep/svg-extensions-1.html#aa-p") (internal-references "similar function" "ra-p"))) ((cross-references (reference "Scheme source file" "rq-p" "svg-extensions-ep/svg-extensions-1.html#rq-p")) (kind "manual-page") (description "Relative quadratic bezier curve from the implicit starting point to the ending point (x,y). (cx, cy) control point of the curve ") (title "rq-p") (form (rq-p cx cy x y path))) ((cross-references (reference "Scheme source file" "aq-p" "svg-extensions-ep/svg-extensions-1.html#aq-p")) (kind "manual-page") (description "Absolute quadratic bezier curve from the implicit starting point to the ending point (x,y). (cx, cy) control point of the curve ") (title "aq-p") (form (aq-p cx cy x y path))) ((cross-references (reference "Scheme source file" "rt-p" "svg-extensions-ep/svg-extensions-1.html#rt-p")) (kind "manual-page") (description "Relative quadratic bezier curve from the implicit starting point to the ending point (x,y). The control point is the reflection of the quadratic bezier curve. ") (title "rt-p") (form (rt-p x y path))) ((cross-references (reference "Scheme source file" "at-p" "svg-extensions-ep/svg-extensions-1.html#at-p")) (kind "manual-page") (description "Absolute quadratic bezier curve from the implicit starting point to the ending point (x,y). The control point is the reflection of the quadratic bezier curve. ") (title "at-p") (form (at-p x y path))) ((cross-references (reference "Scheme source file" "rc-p" "svg-extensions-ep/svg-extensions-1.html#rc-p")) (kind "manual-page") (description "Relative cubic bezier curve from the implicity starting point to the ending point (x,y). (cx1, cy1) controls the curve at the starting point. (cx2, cy2) controls the curve at the ending point. ") (title "rc-p") (form (rc-p cx1 cy1 cx2 cy2 x y path))) ((cross-references (reference "Scheme source file" "ac-p" "svg-extensions-ep/svg-extensions-1.html#ac-p")) (kind "manual-page") (description "Absolute cubic bezier curve from the implicity starting point to the ending point (x,y). (cx1, cy1) controls the curve at the starting point. (cx2, cy2) controls the curve at the ending point. ") (title "ac-p") (form (ac-p cx1 cy1 cx2 cy2 x y path))) ((cross-references (reference "Scheme source file" "rs-p" "svg-extensions-ep/svg-extensions-1.html#rs-p")) (kind "manual-page") (description "Relative cubic bezier curve from the implicity starting point to the ending point (x,y). Thus, (x,y) is given relative to the implicit starting point of this curve. The control point of the implicit starting point is the reflection of the previous cubic bezier curve. (cx2, cy2) controls the curve at the ending point. ") (title "rs-p") (form (rs-p cx2 cy2 x y path))) ((cross-references (reference "Scheme source file" "as-p" "svg-extensions-ep/svg-extensions-1.html#as-p")) (kind "manual-page") (description "Absolute cubic bezier curve from the implicity starting point to the ending point (x,y). The control point of the implicit starting point is the reflection of the previous cubic bezier curve. (cx2, cy2) controls the curve at the ending point. ") (title "as-p") (form (as-p cx2 cy2 x y path))) ((cross-references (reference "Scheme source file" "z-p" "svg-extensions-ep/svg-extensions-1.html#z-p")) (kind "manual-page") (description "Closing of path. With this alternative to the (e-p) closing, the path returns to its starting point. ") (title "z-p") (form (z-p))) ((cross-references (reference "Scheme source file" "append-path" "svg-extensions-ep/svg-extensions-1.html#append-path")) (kind "manual-page") (description "Append path p2 to path p1 ") (title "append-path") (form (append-path p1 p2))) ((kind "manual-section") (section-title "Aditional basic shapes") (section-body "")) ((cross-references (reference "Scheme source file" "triangle" "svg-extensions-ep/svg-extensions-1.html#triangle")) (kind "manual-page") (description "A triangle defined as a path through three points x1, y1, x2, y2, x3, and y3. Attributes and additional content is passed to the underlying path. ") (form "(triangle x1 y1 x2 y2 x3 y3 . cont-and-attr)") (title "triangle")) ((kind "manual-section") (section-title "Extended text management.") (section-body "Not yet completed. Please disregard this function.")) ((cross-references (reference "Scheme source file" "text-box" "svg-extensions-ep/svg-extensions-1.html#text-box")) (kind "manual-page") (xml-in-laml-attributes (xml-in-laml-attribute "x" "required" "x coordiate of the text box  ") (xml-in-laml-attribute "y" "required" "y coordiate of the text box  ") (xml-in-laml-attribute "width" "required" "the with of the text box (pixels)") (xml-in-laml-attribute "height" "required" "the height of the text box") (xml-in-laml-attribute "font-family" "implied" "the name of the font family. Defaults to times-roman.") (xml-in-laml-attribute "font-size" "implied" "the size of the font (in user units). Defaults to 30.")) (description "Type set the textual content of textbox within the box formed by the x, y, width and height attributes. Break the text into lines. It is possible to use em, kbd, and b to achieve italic, keyboard, and bold effects. The elements em, kbd, and b are ad hoc SVG elements, but similar to the XHTML elements of the same name. ") (title "text-box") (form text-box)))