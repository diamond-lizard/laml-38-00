(((title . "Reference Manual of the Text File Reading and Writing Library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This library provides a number of functions that reads a string from a text file, and functions which write a string to a text file. In particular the library supports very useful functions that read selected parts of a text file to strings.<p> The main functions are: read-text-file and write-text-file. The selective reading functions are read-text-file-between-marks and read-text-file-including-marks. ") (scheme-source-file . "/user/normark/scheme/lib/file-read.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Reading stuff.") (section-body "")) ((cross-references (reference "Scheme source file" "read-text-file" "file-read-ep/file-read-1.html#read-text-file")) (kind "manual-page") (description "Return the textual contents of file-name, as a string") (title "read-text-file") (form (read-text-file file-name))) ((cross-references (reference "Scheme source file" "read-text-file-from-input-port" "file-read-ep/file-read-1.html#read-text-file-from-input-port")) (kind "manual-page") (description "Return the textual contents of input-port, as a string") (title "read-text-file-from-input-port") (form (read-text-file-from-input-port input-port))) ((cross-references (reference "Scheme source file" "read-text-file-between-marks" "file-read-ep/file-read-1.html#read-text-file-between-marks")) (kind "manual-page") (description "Reads the part of the file between - but excluding - two occurences of mark, and return it as a text string. Specifically, it read and return the string from, but excluding, the first occurence of mark to, but excluding, the next occurence of mark. If no occurence of mark can be located, return the empty string. If only one occurence of mark occurs, return a suffix of the file from the mark to the end of file. This function is implemented by means of a state machine which controls when the actual reading must take place.") (title "read-text-file-between-marks") (form (read-text-file-between-marks file-name mark))) ((cross-references (reference "Scheme source file" "read-text-file-including-marks" "file-read-ep/file-read-1.html#read-text-file-including-marks")) (kind "manual-page") (description "Reads the part of the file between and including occurences of start-mark and end-mark, and return it as a text string. Specifically, read and return the string from and including the first occurence of start-mark to and including the next occurence of end-mark. If no occurence of the mark can be located, return the empty string. If only the start-mark occurs, return a suffix of the file from the start-mark to the end of file. This function is implemented by means of a state machine which controls when the actual reading must take place.") (title "read-text-file-including-marks") (form (read-text-file-including-marks file-name start-mark end-mark))) ((cross-references (reference "Scheme source file" "code-example" "file-read-ep/file-read-1.html#code-example")) (kind "manual-page") (description "Convenient and specialized function returning the contents of a program file. Other usages are also possible. Reads an external file, either an entire file (if no optional mark parameter) or a region surrounded by mark. ") (title "code-example") (form (code-example file . mark))) ((kind "manual-section") (section-title "Writing stuff.") (section-body "")) ((cross-references (reference "Scheme source file" "write-text-file" "file-read-ep/file-read-1.html#write-text-file")) (kind "manual-page") (parameters (parameter "suppress-cr" "If true, never write a cr (character 13). Ie. never use PC end of line conventions.")) (description "Write the text string str to the file named file-name. After this function call, the file contains exactly the string str. Opening and closing is done by this function. ") (form "(write-text-file str file-name [suppress-cr])") (title "write-text-file")) ((kind "manual-page") (parameters (parameter "suppress-cr" "If true, never write a cr (character 13). Ie. never use PC end of line conventions.")) (description "Write the string str to port, which is assumed to be open. This procedure does not close the port. ") (form "(write-string-to-port str port [suppress-cr])") (title "write-string-to-port") (cross-references (reference "Scheme source file" "write-string-to-port" "file-read-ep/file-read-1.html#write-string-to-port") (internal-references "similar function" "write-port-strings"))) ((kind "manual-page") (parameters (parameter "port" "An open output port") (parameter "strings" "A list of strings (a rest parameter of the function).")) (description "Write each of the strings in the parameter strings to port. The output port port is assumed to be open. This procedure does not close the port. ") (misc "Notice the order of the parameters compared with write-string-to-port.") (title "write-port-strings") (form (write-port-strings port . strings)) (cross-references (reference "Scheme source file" "write-port-strings" "file-read-ep/file-read-1.html#write-port-strings") (internal-references "similar function" "write-string-to-port"))))