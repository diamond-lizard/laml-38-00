; This file is generated by the program tools/tools/validating-html-mirroring-from-dtd/laml-mirror-via-dtd.scm. Do not edit!

;;;; This an accurate, validating mirror of HTML 4.01 (transitional) on basic form. A basic form has a rigid syntactic composition:<font size = 3><pre>   (html4:tag contents . attributes)</pre></font><p>The type of contents must be a list of content elements (strings, sub-elements, space suppress, and lists of these) and the attributes must be alternating symbol attribute names and string attribute values.<p>Here is a concrete example: <font size = 3><pre>   (html4:a (list "AAU CS") 'href "www.cs.auc.dk")</pre></font>In general we recommend that you use the HTML mirror on its <a href = "surface.html">surface form</a>. Use the basic form if you need to write more efficient programs (such as CGI programs) which emit HTML, represented as internal ASTs. The function <kbd>render</kbd> converts an AST to a string. The function <kbd>write-html</kbd> from the <kbd>laml.scm</kbd> file is helpful when rendering, linearizing and writing an AST to a text file. <p>Each function in this file mirrors and generates an HTML element instance. If the boolean variable <kbd>check-html-attributes?</kbd> is true the functions check the attributes of the tag against the attribute definitions in the document type definition. If the boolean variable <kbd>validate-html?</kbd> is true the mirror functions perform a <b>full HTML validity check.</b> <p>CSS inline style attributes can be given side by side with the HTML attributes. A CSS attribute is prefixed with 'css:'. Here is an example: <font size = 3><pre>   (html4:a "AAU CS" 'href "www.cs.auc.dk" 'css:text-decoration "none" 'css:background-color "yellow")</pre></font><p>This library requires the general library.<p>This library provides links to the <a href = "../../../html-doc/html401/cover.html">W3 document which defines the HTML tags</a>. The underlying WWW pages are supplied as part of the LAML software bundle.<p>See also the <a href = "surface.html">surface form library</a> of the mirror and the HTML <a href = "convenience.html">convenience library</a>.<b>From LAML version 20 we strongly recommend that you use an XHTML mirror (strict, frameset, or transitional) instead of HTML4.01.</b>

(define xml-syntax? #f)

;;; The document type declaration.
;;; This section contains a single function, <kbd>document-type-declaration</kbd>, that returns the appropriate
;;; document type declaration of this mirror. The document type declaration function is called by the <kbd>standard-prolog</kbd>
;;; function of laml.scm

;;; Document type definition. 
;;; This section contains <kbd>document-type-declaration</kbd>, that returns the appropriate
;;; document type declaration of this mirror.

;; Return a document type declaration of this mirror.
;; Even if announced as HTML4.0 loose, it is HTML4.01 transitional.
(define (document-type-declaration)
  "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
        \"http://www.w3.org/TR/html4/loose.dtd\">")


;;; Configuration part.
;;; The variables and functions in this part controls the checking, validation, and error reporting of the HTML mirror functions.

;; A boolean variable which controls the checking of tag attributes.
;; If true, check the tag (element) attributes against the attributes as defined in the DTD file.
;; The default value is true.
(define check-html-attributes? #t)

;; A boolean variable that controls the HTML validation.
;; If true, do validate the generated HTML string against the DTD (the grammar of HTML).
;; The default value is true.
(define validate-html? #t)

;; A boolean variable that controls whether CDATA (Character data) are transformed
;; through the HTML character transformation table. The default value is true.
;; .reference "Character transformation table" "table" "../../../man/laml.html#html-char-transformation-table"
(define transliterate-character-data? #t)

;; A list of elements for which content data - CDATA - is never transformed.
;; As an example, it will often cause problems if scripts are being modified by means of transliterations using
;; the HTML character transformation table.
;; A list of strings.
;; Defaults to (list "script" "style").
;; You can redefine it after the document style has been loaded.
(define non-transliteration-elements (list "script" "style"))

;; How many characters of the HTML validation error messages to be presented.
(define error-truncation-length 150)

; --------------------------------------------------------------------------------------------------------------------------------
; Tag functions. Redefined temporarily to make ASTs.

; Return a balanced html tag of both start and end tag, based on the parameters name (tag name) contents and attributes.
; The attributes is supposed to be a property list of symbol string pairs.
(define (internal-ast-node name contents attributes)    ; former itag
 (make-ast name contents attributes 'double))


; Return a single tag of name with attributes.
; The attributes is supposed to be a property list of symbol string pairs.
(define (terminal-ast-node name attributes)  ; former itag1
 (make-ast name '() attributes 'single))

; Individual tag functions, which could be used above if we wanted to:

; Return an HTML start tag.
; The parameter kind is a string or a symbol.
; attributes is a lisp property list of key-symbol value pairs, including the possibility of CSS attributes on the form css:attr-name.
(define (start-tag kind . attributes)
  (if (null? attributes) 
      (string-append "<" (as-string kind) ">")
      (let* ((attributes (linearize-attributes attributes))
              (html-attributes (car attributes))
              (css-attributes (cdr attributes)))
         (string-append "<" (as-string kind) " " html-attributes  
                        (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
                        " >"))))


; Retun an HTML end tag.
; The parameter kind is a string or a symbol.
(define (end-tag kind)
  (string-append "</" (as-string kind) ">"))

; --------------------------------------------------------------------------------------------------------------------------------
; Attribute linearization. 

; convert the Lisp property list attr-list to a string conforming
; to the rules of an html attribute list
; (define (linearize-attributes attr-list)
;   (string-append  (linearize-attributes-1 (reverse attr-list) "" (length attr-list))))
; 
; (define (linearize-attributes-1 attr-list res-string lgt)
;   (cond ((= lgt  0 ) res-string)
;         ((>= lgt 2) (linearize-attributes-1 
;                        (cddr attr-list)
;                        (string-append (linearize-attribute-pair (car attr-list) (cadr attr-list)) " " res-string)
;                        (- lgt 2)))
;         ((< lgt 2) (error "Linearize-attributes-1: Called with an odd length attribute list. Not a Lisp property list"))))
; 
; (define (linearize-attribute-pair val attr)
;   (string-append (as-string attr) " = " (string-it (as-string val))))

; Return a pair of strings: The head is the string represeting html attributes.
; The tail is the string representing the css attributes (to go into an HTML style attribute).
(define (linearize-attributes attr-list)
 (let ((lgt (length attr-list)))
  ; catch a typical error here: non-symbol key, probably old-fashioned calling convention from html-v1.
  (if (and (>= lgt 1) (not (symbol? (car attr-list))))
      (error (string-append "linearize-attributes: Non-symbol key encountered: " (as-string (car attr-list)) " in attribute list " (as-string attr-list) ". Maybe conversion problem from html-v1.")))
  (linearize-attributes-1 (reverse attr-list) "" "" lgt attr-list)))

; Internal helping operation to linearize-attributes. The parameter whole-attr-list is for error messaging purposes
(define (linearize-attributes-1 attr-list html-attr-string css-attr-string lgt whole-attr-list)
  (cond ((= lgt  0 ) (cons (strip-trailing-characters (list #\space) html-attr-string) css-attr-string))
        ((>= lgt 2) (let* ((val (car attr-list))   ; val and key are reversed at this time
                           (key (cadr attr-list))
                           (css-key (css-key? key))
                         )
                     (cond (css-key                  ; CSS attribute
                              (linearize-attributes-1 
                                (cddr attr-list)
                                html-attr-string 
                                (string-append (linearize-attribute-pair-css val css-key) ";" css-attr-string)
                                (- lgt 2)
                                whole-attr-list))
                           (else                            ; HTML attribute
                             (linearize-attributes-1 
                               (cddr attr-list)
                               (string-append (linearize-attribute-pair-html val key) " " html-attr-string)
                               css-attr-string
                               (- lgt 2)
                               whole-attr-list)))))
        ((< lgt 2) (error (string-append "Linearize-attributes-1: Called with an odd length attribute list. Not a Lisp property list: " (as-string whole-attr-list))))))

; Return whether key is a css-key, for instance a key like css:k or CSS:k
; A true value is the key propper, such as k (as a string).
(define (css-key? key)
  (let* ((key-str (symbol->string key))
         (lgt (string-length key-str)))
   (if
    (and (>= lgt 4) 
         (or (eqv? (string-ref key-str 0) #\c) (eqv? (string-ref key-str 0) #\C))
         (or (eqv? (string-ref key-str 1) #\s) (eqv? (string-ref key-str 1) #\S))
         (or (eqv? (string-ref key-str 2) #\s) (eqv? (string-ref key-str 2) #\S))
         (eqv? (string-ref key-str 3) #\:))
    (substring key-str 4 lgt)
    #f)))

(define (linearize-attribute-pair-html val key)
  (string-append (as-string key) " = " (string-it (as-string val))))

(define (linearize-attribute-pair-css val key)
  (string-append key ": " (as-string val)))

; --------------------------------------------------------------------------------------------------------------------------------
; Attribute checking.  

; Attribute tripple selectors
(define att-name (make-selector-function 1))
(define att-type (make-selector-function 2))
(define att-status (make-selector-function 3))

; Check the attributes (first par) in the calling form against the attribute definitions taken from the DTD file (second par).
; The first parameter, attribute, is the attributes of the calling form, on property list form:
; (a1 v1 ... an vn). ai is a symbol and vi is a string.
; The second parameter dtd-attribute-definition is the attributes as defined
; in the dtd for the element in question. The third parameter number-of-req-attributes is the number
; of required attributes in dtd-attr-definitions. The fourth parameter, tag-name, is the
; name of the enclosing tag. dtd-attribute-definition is a list of 
; triples (attr-name attr-type require-status). attr-name is a string, attr-type is
; a string or a list of strings (possibilities), and require-status is a string
; such as "#IMPLIED" or "#REQUIRED"
(define (check-attributes! attributes dtd-attribute-definition number-of-req-attributes tag-name)
 (if (even? (length attributes))  ; if not, we report the error elsewhere
  (let ((required-attribute-names 
           (map (compose as-symbol car) (front-sublist dtd-attribute-definition number-of-req-attributes)))
        (dtd-attribute-names (map (compose as-symbol car) dtd-attribute-definition))
        (attribute-names (if (null? attributes) '() (every-second-element attributes)))
        (attribute-values (if (null? attributes) '() (every-second-element (cdr attributes))))
       )
    (check-required-attributes! attribute-names required-attribute-names tag-name)
    (check-for-attribute-existence! attribute-names dtd-attribute-names tag-name)
    (check-for-attribute-types! attribute-names attribute-values dtd-attribute-definition tag-name)
)))


; the symbols in required-attribute-names must all be found as attribute names in the property list attributes
; if not an error is issued.
; tag-name is the name of the enclosing tag
(define (check-required-attributes! attribute-names required-attribute-names tag-name)
  (if (not (null? required-attribute-names))
      (begin
         (chek-one-required-attribute! attribute-names (car required-attribute-names) tag-name)
         (check-required-attributes! attribute-names (cdr required-attribute-names) tag-name))))

(define (chek-one-required-attribute! attribute-names required-attribute tag-name)
  (if (not (memq required-attribute attribute-names))
      (check-error (string-append "The required attribute  " (as-string required-attribute) "  is not present in the " (upcase-string tag-name) " element."))))

;; The definition of the procedure that reports validation errors.
;; The default value is display-warning, which issues non-fatal warning messages.
;; Alternative value: laml-error (fatal error messaging).
(define check-error display-warning)

; Are all names in attribute-names found in the list of names dtd-attribute-names
; tag-name is the name of the enclosing tag
; CSS attributes should not be checked for existence. 
(define (check-for-attribute-existence! attribute-names dtd-attribute-names tag-name)
   (if (not (null? attribute-names))
       (begin
         (check-one-attribute-existence! (car attribute-names) dtd-attribute-names tag-name)
         (check-for-attribute-existence! (cdr attribute-names) dtd-attribute-names tag-name))))

(define (check-one-attribute-existence! name dtd-attribute-names tag-name)
  (if (and (not (css-key? name)) (not (memq name dtd-attribute-names)))
      (check-error (string-append "The HTML attribute  " (as-string name) "  is not valid in the "  (upcase-string tag-name) " element."))))

; Check that the attributes (as splitted into attribute-names and attribute-values - list of equal lengths)
; have correct types accoring the dtd-attribute-names.
(define (check-for-attribute-types! attribute-names attribute-values dtd-attributes tag-name)
  (if (not (null? attribute-names))
      (begin
         (check-one-attribute-type! (car attribute-names) (car attribute-values) dtd-attributes tag-name)
         (check-for-attribute-types! (cdr attribute-names) (cdr attribute-values) dtd-attributes tag-name))))

(define (check-one-attribute-type! name value dtd-attributes tag-name)
  (let ((attribute-descriptor 
          (find-in-list (lambda (tripple) (eq? (as-symbol (car tripple)) name)) dtd-attributes)))
    (if attribute-descriptor
        (check-attribute-value! name value (att-type attribute-descriptor) tag-name))))

; is value a 'member of' attribute-type. value is a string.
; Attribute is a string such as "NUMBER" "CDATA" or a list of strings, in which case value must be a member.
(define (check-attribute-value! name value attribute-type tag-name)
  (cond ((list? attribute-type) 
            (if (not (member (downcase-string value) (map downcase-string attribute-type)))  ; too expensive to downcase list here 
                (check-error (string-append "The value  " (string-it value) "  of the html attribute  "
                                            (as-string name) "  is not valid in the "  (upcase-string tag-name) " element."))))
        ((equal? "NUMBER" attribute-type)
            (if (not (numeric-string? value))
                (check-error (string-append "The attribute value  " (string-it value) "  should be numeric (but enclosed in string quotes)"))))
        (else 'incomplete)  ; not implemented yet
  ))


; --------------------------------------------------------------------------------------------------------------------------------
; HTML rendering from ASTs.
; Simple recursive processing - can probably be made better.

;(define (render ast)
; (let* ((tag-name (ast-element-name ast)) 
;        (contents-list (ast-subtrees ast))
;        (linearized-contents (linearize-contents contents-list))
;        (attribute-properlist (ast-attributes ast))
;        (kind (ast-kind ast))
;       )
;  (if (eq? kind 'double)
;      (itag-html tag-name linearized-contents attribute-properlist)
;      (itag1-html tag-name attribute-properlist))))
;
;(define (linearize-contents contents-list)
;  (linearize-contents-1 contents-list ""))
;
;; html-protecting of (car contents-list) and other possible char converting must be controlled by an array, and be made much more efficient.
;(define (linearize-contents-1 contents-list res)
;  (cond ((null? contents-list) res)
;        ((cdata? (car contents-list)) (linearize-contents-1 (cdr contents-list) (string-append res (html-text-transform (car contents-list)))))
;        ((forced-white-space? (car contents-list)) (linearize-contents-1 (cdr contents-list) (string-append res " ")))
;        ((ast? (car contents-list)) (linearize-contents-1 (cdr contents-list) (string-append res (render (car contents-list)))))))
;
;
;; Return a balanced html tag of both start and end tag, based on the parameters name (tag name) contents and attributes.
;; The attributes is supposed to be a property list of symbol string pairs.
;; The 'i' in the function name means 'internal'.
;(define (itag-html name contents attributes)
; (if (null? attributes)
;  (string-append "<" (as-string name) ">"
;                  (as-string contents)
;                  "</" name ">")
;  (let* ((attributes (linearize-attributes attributes))
;         (html-attributes (car attributes))
;         (css-attributes (cdr attributes)))
;   (string-append "<" (as-string name) " " html-attributes
;                  (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
;                   ">"
;                  (as-string contents)
;                  "</" name ">"))))
;
;; Return a single tag of name with attributes.
;; The attributes is supposed to be a property list of symbol string pairs.
;; The 'i' in the function name means 'internal'.
;(define (itag1-html name attributes)
; (if (null? attributes)
;	 (string-append "<" (as-string name) (if xml-syntax? "/>" ">"))
;	 (let* ((attributes (linearize-attributes attributes))
;		(html-attributes (car attributes))
;		(css-attributes (cdr attributes)))
;	   (string-append "<" (as-string name) " " html-attributes 
;			  (if (empty-string? css-attributes) "" (string-append " style = " (string-it css-attributes)))
;			  (if xml-syntax? "/>" ">")
;			  ))))

; ---------------------------------------------------------------------------------------------------
; HTM Character transformation:
; Does not convert '&'.

; Mutations that cause literal presentation of the characters #\< , #\>, #\", #\' and #\&
(set-html-char-transformation-entry! html-char-transformation-table (char->integer #\<) "&lt;")
(set-html-char-transformation-entry! html-char-transformation-table (char->integer #\>) "&gt;")
(set-html-char-transformation-entry! html-char-transformation-table (char->integer #\") "&quot;")
(set-html-char-transformation-entry! html-char-transformation-table (char->integer #\') "&#39;")


; ---------------------------------------------------------------------------------------------------
; Fast AST rendering.

;; Render the html-clause (an AST) to output-port.
;; output-port is assumed to be open. output-port will not be closed by this procedure.
;; .form (render-to-output html-clause output-port [prolog epilog])
;; .parameter html-clause an AST
;; .parameter output-port an open output port
;; .parameter prolog The symbol prolog, in which case (standard-prolog) is inserted, or a prolog string to be inserted
;; .parameter epilog The symbol epilog in which case (standard-epilog) is inserted, or a epilog string to be inserted
(define (render-to-output-port html-clause output-port . optional-parameter-list)
 (let* ((prolog (optional-parameter 1 optional-parameter-list #f))
        (epilog (optional-parameter 2 optional-parameter-list #f))
        (prolog-text (cond ((and (symbol? prolog) (eq? prolog 'prolog)) (standard-prolog))
                           ((string? prolog) prolog)
                           (else "")))
        (epilog-text (cond ((and (symbol? epilog) (eq? epilog 'epilog)) (standard-epilog))
                           ((string? epilog) epilog)
                           (else "")))
        (put-fn (put-in-sink-stream-generator output-port))
       )
  (put-fn prolog-text)
  (render-fast html-clause put-fn)
  (put-fn epilog-text)))

;; Render the html-clause (an AST) and return the rendered string
;; .form (render html-clause [prolog epilog])
;; .parameter html-clause an AST
;; .parameter prolog The symbol prolog, in which case (standard-prolog) is inserted, or a prolog string to be inserted
;; .parameter epilog The symbol epilog in which case (standard-epilog) is inserted, or a epilog string to be inserted
(define (render html-clause . optional-parameter-list)
 (let* ((prolog (optional-parameter 1 optional-parameter-list #f))
        (epilog (optional-parameter 2 optional-parameter-list #f))
        (prolog-text (cond ((and (symbol? prolog) (eq? prolog 'prolog)) (standard-prolog))
                           ((string? prolog) prolog)
                           (else "")))
        (epilog-text (cond ((and (symbol? epilog) (eq? epilog 'epilog)) (standard-epilog))
                           ((string? epilog) epilog)
                           (else "")))
       )
   (reset-sink-string)
   (render-fast html-clause put-in-sink-text-string)
   (string-append
     prolog-text
     (sink-string)  
     epilog-text)))



; --------------------------------------------------------------------
; String sink in terms of segments (a list) of strings.

(define sink-string-segment-size 20000)
(define sink-string-segment-limit (- sink-string-segment-size 1))
(define output-sink-segments '())
(define output-sink-string (make-string sink-string-segment-size))
(define next-sink-ptr 0)

; Put x (string or char) into output sink.
(define (put-in-sink-text-string x)
  (cond ((char? x) 
          (begin
	   (string-set! output-sink-string next-sink-ptr x)
	   (set! next-sink-ptr (+ 1 next-sink-ptr))
           (if (= next-sink-ptr sink-string-segment-size) (prepare-next-sink-segment))))

        ((string? x)
          (do ((lgt (string-length x))
	       (i 0 (+ i 1))
               (j next-sink-ptr (if (< j sink-string-segment-limit) (+ j 1) 0))
              )
	      ((= i lgt) (set! next-sink-ptr j))
	       (string-set! output-sink-string j (string-ref x i))
               (if (= j sink-string-segment-limit) (prepare-next-sink-segment))
              ))

        (else "put-in-sink-string: Can only output chars or strings")))

(define (prepare-next-sink-segment)
 (set! output-sink-segments (cons (string-copy output-sink-string) output-sink-segments))
 (set! next-sink-ptr 0)
)

; Return the resulting sink string
(define (sink-string)
 (string-append 
   (list-to-string (reverse output-sink-segments) "")
   (substring output-sink-string 0 next-sink-ptr)))

(define (reset-sink-string)
 (set! output-sink-segments '())
 (set! next-sink-ptr 0))

; --------------------------------------------------------------------
; Stream sink.

; Generate an output port put procedure
(define (put-in-sink-stream-generator port)
 (lambda (x)
  (cond ((char? x) 
          (write-char x port))
        ((string? x)
          (do ((lgt (string-length x))
               (i 0 (+ i 1))
              )
	      ((= i lgt) 'done)
  	       (write-char (string-ref x i) port)))
        (else "put-in-sink-stream: Can only output chars or strings"))))


; --------------------------------------------------------------------
; Sink independet rendering stuff. 
; Depends on linearize-attributes and html-text-transform

(define (render-fast ast put)
 (let* ((tag-name (ast-element-name ast)) 
        (contents-list (ast-subtrees ast))
        (attribute-properlist (ast-attributes ast))
        (attributes-res (linearize-attributes attribute-properlist))
        (html-attributes-string (car attributes-res))
        (css-attributes-string (cdr attributes-res))
        (kind (ast-kind ast))
       )
  (cond ((eq? kind 'single)
          (put #\<) 
          (put tag-name) 
          (if (not (null? attribute-properlist)) 
	      (begin
	       (put #\space)
	       (put html-attributes-string)
	       (if (not (empty-string? css-attributes-string))
		   (begin (put " style = ")
			  (put #\") (put css-attributes-string) (put #\")))
	       ))
          (put (if xml-syntax? "/>" #\>)))

        ((eq? kind 'double)
          (put #\<) 
          (put tag-name) 
          (if (not (null? attribute-properlist)) 
	      (begin
	       (put #\space)
	       (put html-attributes-string)
	       (if (not (empty-string? css-attributes-string))
		   (begin (put " style = ")
			  (put #\") (put css-attributes-string) (put #\")))
	       ))
          (put #\>)
          (linearize-contents-list-fast contents-list put tag-name)
          (put "</")  (put tag-name) (put #\>))

        (error "render-fast: Either a single or double kind of ast expected."))))

(define (linearize-contents-list-fast contents-list put tag-name)
  (for-each 
    (lambda (contents) (linearize-contents-fast contents put tag-name))
    contents-list))

(define (linearize-contents-fast contents put tag-name)
  (cond ((cdata? contents) 
          (if (and transliterate-character-data? (not (member tag-name non-transliteration-elements)))
              (do ((lgt (string-length contents))
		   (i 0 (+ i 1))
		   )
		  ((= i lgt) 'done)
		(put (html-char-transform (string-ref contents i))))
              (put contents)))
        ((forced-white-space? contents) (put #\space))
        ((ast? contents) (render-fast contents put))))


 
; ---------------------------------------------------------------------------------------------------
; Contents validation. Common stuff.

(define problem-contents-list '())

; A variant of member which registers context on problem-contents-list in case (not (member el lst))
(define (member-remember el lst context)
 (let ((res (member el lst)))
   (if (not res)
       (set! problem-contents-list (cons context problem-contents-list)))
   res))

; Element constituent-list is a list of strings, namely element tag names or
; "#PCDATA".
; A true results means OK - no error
; Avoid a O(n^2) algorithm here in the final implementation
(define (one-or-more . element-constituent-list)
  (lambda (contents)
    (set! problem-contents-list '())
    (cond ((or (and (boolean? contents) (not contents))
               (and (list? contents) (null? contents))) 
             (begin
                  (set! problem-contents-list (cons "Empty contents not acceptable" problem-contents-list))
                  #f))  ; empty contents not acceptable
          ((ast? contents) (member-remember (ast-element-name contents) element-constituent-list contents))
	  ((cdata? contents) (member-remember "#pcdata" element-constituent-list contents))
	  ((forced-white-space? contents) #t)
	  ((list contents)
            (and 
	     (>= (length contents) 1)	; implement more efficienly
	     (accumulate-right
	      (lambda (x y) (and x y))
	      #t
	      (map 
	       (lambda (cont)
		 (cond ((and (boolean? cont) (not cont))
                         (begin
			   (set! problem-contents-list (cons "Empty contents not acceptable" problem-contents-list))
			   #f)) ; even a single #f is not acceptable
                       ((ast? cont) (member-remember (ast-element-name cont) element-constituent-list cont))
		       ((cdata? cont) (member-remember "#pcdata" element-constituent-list cont))
		       ((forced-white-space? cont) #t)
		       (else #f)))
	       contents)))
          )
	  (else (laml-error "one-or-more: Unknown contents: " (as-string contents))))))


(define (zero-or-more . element-constituent-list)
  (lambda (contents)
    (set! problem-contents-list '())
    (cond ((and (boolean? contents) (not contents)) #t)  ; no contents, which is acceptable
          ((ast? contents) (member-remember (ast-element-name contents) element-constituent-list contents))
	  ((cdata? contents) (member-remember "#pcdata" element-constituent-list contents))
	  ((forced-white-space? contents) #t)
	  ((list contents)
	    (accumulate-right
	     (lambda (x y) (and x y))
	     #t
	     (map 
	      (lambda (cont)
		(cond ((and (boolean? cont) (not cont)) #t) ; list no contents, which is acceptable
                      ((ast? cont) (member-remember (ast-element-name cont) element-constituent-list cont))
		      ((cdata? cont) (member-remember "#pcdata" element-constituent-list contents))
		      ((forced-white-space? cont) #t)
		      (else #f)))
	      contents))
	   )
	  (else (laml-error "one-or-more: Unknown contents: " (as-string contents))))))

; temporary:
(define (generic-checker contents)
  (set! problem-contents-list '())
  #t)


; Apply error-predicate on contents. If the validation-error-predicate returns a true result,
; issue a warning. The result is suposed to give a hint about the actual error. 
(define (validate-contents! contents validation-predicate tag-name)
 (set! problem-contents-list '())
 (let ((validation-status (validation-predicate contents)))
  (if (not validation-status)
      (let ((count (length problem-contents-list)))
        (if (> count 0) ; should always be true
          (check-error
           (string-append 
            (string-append (if (= count 1) 
                               "HTML validation error(s) encountered in an instance of the  "
                               (string-append  "HTML validation error(s) encountered in an instance of the  "))
                                                                                        ; too confusing to tell how many errors - some are double reported...
                           (upcase-string (as-string tag-name)) "  element")
            (indented-terminal-lines (map (compose truncate-string render-1) problem-contents-list)))))))))

(define (indented-terminal-lines line-list)
 (let ((sep (string-append (as-string #\newline) "  ")))
  (string-append sep (list-to-string line-list sep))))

(define (render-1 contents)
  (cond ((ast? contents) (render contents))
	((cdata? contents) contents)
	((forced-white-space? contents) "SPACE")
	((list? contents) (list-to-string (map render-1 contents) " "))
        (else "??")))

(define (truncate-string str)
 (if (> (string-length str) error-truncation-length)
     (string-append (substring str 0 error-truncation-length) "...")
     str))




; ---------------------------------------------------------------------------------------------------
; The explicitly programmed HTML 4.0 validation prediates.
; The majority of the predicates are produced automatically, via calls to one-or-more 
; and zero-and-more. The remaining hard - but interesting and important - cases are programmed
; here via hard work.

; VALIDATION PROBLEMS:
; The only major problem, which is probably not of any practical relevance: INS or DEL instances
; are almost certainly reported as illegal, although af accepted in any deep constituent of a body.
; In general, inclusions +(x|x...|z) cannot be handled by our validation approach.
; A similar, but less urgent problem is mayby also present in HEAD wrt. +(SCRIPT|STYLE|META|LINK|OBJECT).


; The parameters contents is supposed to be a list of constituents of an html node.
; check them against:   "(HEAD, BODY)"
(define (html-checker contents)
 (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
  (cond ((not (list? contents-1))		; #f - no contents probably
           (add-problem! (enrich-error-message "The HTML instance is not allowed to be empty" contents-1)))
	((list? contents-1)
	 (if (not
	      (and (= 2 (length contents-1))
		   (ast? (first contents-1)) (equal? (ast-element-name (first contents-1)) "head")
		   (ast? (second contents-1)) (equal? (ast-element-name (second contents-1)) "body")))
             (add-problem! (enrich-error-message "A HTML instance must consist of exactly two constituents: HEAD followed by BODY" contents-1))
	     #t))
	(else #f))))

; CDATA
(define (script-checker contents)
 (cdata-checker contents))

; CDATA
(define (style-checker contents)
 (cdata-checker contents))

; Interpreted as #PCDATA - 
; Real: "(#PCDATA) -(SCRIPT|STYLE|META|LINK|OBJECT)"
; No difference between CDATA and PCDATA
(define (title-checker contents)
 (if (not 
      (and (cdata-checker contents)
	   (deep-excluding-element-names 
	    (list  "script" "style" "meta" "link" "object")
	    contents
	    )
	   ))
     (add-problem! (enrich-error-message 
		    (string-append "Illegal immediate constituent")
		    contents))
     #t))

;(TITLE & ISINDEX? & BASE?) +(SCRIPT|STYLE|META|LINK|OBJECT)
; strange inclusion!
; Practical interpretation:
; A single TITLE required, optional ISINDEX, BASE (zero or more). Zero or more of SCRIPT, STYLE, META, LINK, or OBJECT at the
; immediate constituent level.
; Could in fact be a little too restrictive due to our sloppy implementation of +(...), but I don't really think so.
(define (head-checker contents)
 (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
  (cond ((not (list? contents-1))		; #f - no contents probably
          (add-problem! (enrich-error-message "The instance is not allowed to be empty" contents-1)))
	((list? contents-1)
          (if (not
	       (and
		  (accumulate-right and-fn #t (map ast? contents-1)) ; all ast?
  		  (= (length (instances-of-ast "title" contents-1)) 1)
  		  (<= (length (instances-of-ast "isindex" contents-1)) 1)
  		  (<= (length (instances-of-ast "base" contents-1)) 1)
                  (all-ast-member-of? (list "title" "isindex" "base" "script" " style" "meta" "link" "object") contents-1)
		))
	      (add-problem! (enrich-error-message 
			     (string-append "A HEAD instance must have one TITLE element, zero or more ISINDEX, zero or more BASE, "
                                            "no textual contents, and possibly one or more of "
					    "SCRIPT, STYLE, META, LINK, or OBJECT") contents-1))
	      #t)
	 )
	(else #f))))

(define (head-checker contents)
 (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
  (cond ((not (list? contents-1))	                             ; #f - no contents probably
          (add-problem! (enrich-error-message "The instance is not allowed to be empty" contents-1)))

        ((not (accumulate-right and-fn #t (map ast? contents-1)))    ; not all asts
          (add-problem! (enrich-error-message "A HEAD instance is not allowed to contain textual contents outside sub-elements" contents-1)))

        ((not (= (length (instances-of-ast "title" contents-1)) 1))  ; not one TITLE element
          (add-problem! (enrich-error-message "A HEAD element must have exactly one TITLE sub-element" contents-1)))

        ((not (<= (length (instances-of-ast "isindex" contents-1)) 1)) ; not zero or more ISINDEX
          (add-problem! (enrich-error-message "A HEAD element must have one or zero ISINDEX sub-elements" contents-1)))

        ((not (<= (length (instances-of-ast "base" contents-1)) 1))    ; not zero or more BASE
          (add-problem! (enrich-error-message "A HEAD element must have one or zero BASE sub-elements" contents-1)))

        ((not (all-ast-member-of? (list "title" "isindex" "base" "script" " style" "meta" "link" "object") contents-1))
                                                                       ; not exclusively  TITLE, BASE, ..., OBJECT elements
          (add-problem! (enrich-error-message "In HEAD only TITLE, ISINDEX, BASE, SCRIPT, STYLE, META, LINK, and OBJECT subelements are allowed" contents-1)))
        (else #t))))


; ((FRAMESET|FRAME)+ & NOFRAMES?)
(define (frameset-checker contents)
 (let ((checker-1 (one-or-more "frameset" "frame" "noframes")))
   (if (not 
        (and (checker-1 contents)
             (<= (length (filter-contents ; at most one noframe
			    (lambda (x) (cond ((ast? x)
					       (equal? "noframes" (ast-element-name x))) ; asts that are noframes count
					      ((forced-white-space? x) #f) ; white space does not count
					      (else #t))) ; there should be nothing else
			    contents))
		   1)))
       (add-problem! (enrich-error-message 
                       "Only FRAMESET, FRAME instances and a single NOFRAMES instance are allowed here"
                       contents))
       #t)))

;(CAPTION?, (COL*|COLGROUP*), THEAD?, TFOOT?, TBODY+)
(define (table-checker contents)
 (let ((constituent-name 
        (lambda (x)
          (cond ((ast? x) (ast-element-name x))
                ((cdata? x) "text")
                (else "???")))))  ; never relevant
  (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
    (cond ((cdata? contents-1)		
	   (add-problem! (enrich-error-message "The table instance is not allowed to contain pure text" contents-1)))
          ((or (not (list? contents-1)) (null? contents-1))		
	   (add-problem! (enrich-error-message "The instance is not allowed to be empty" contents-1)))
	  ((list? contents-1)
           (let ((actual-constituents (map constituent-name contents-1))) ; a list of tag names (strings) of table constituent. 
					; "text" means pctext.
	     (table-automata-accept? actual-constituents contents-1)
	     )
	   )
	  (else #f)))))


; (P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS | #PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* 
; -(A|INPUT | SELECT | TEXTAREA | LABEL | BUTTON|FORM|ISINDEX|FIELDSET|IFRAME)
(define (button-checker contents)
(let* ((legal-el-names 
         (list "#pcdata" "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript"
               "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "tt" "i"
               "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym"
               "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo"
               "iframe" "input" "select" "textarea" "label" "button"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names (list "a" "input" "select" "textarea" "label" 
                                                 "button" "form" "isindex" "fieldset" "iframe") contents)))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituents")
                       contents))
       #t))

)

;(#PCDATA,LEGEND,(P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS | #PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)*)
(define (fieldset-checker contents)
 (let ((locate-legend 
          (lambda (x-lst) 
             (index-in-list-by-predicate x-lst "legend"
               (lambda (legend x) (if (ast? x) (equal? legend (ast-element-name x)) #f)))))
       (suffix-elements (list "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div"
                              "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address"
                              "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd"
                              "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" 
                              "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button"))
       )
  (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
    (cond ((cdata? contents-1)		
	   (add-problem! (enrich-error-message "The fieldset instance is not allowed to contain pure text only" contents-1)))

          ((not (list? contents-1))	; #f - no contents probably
	   (add-problem! (enrich-error-message "The instance is not allowed to be empty" contents-1)))

	  ((list? contents-1)
	   (let ((legend-index (locate-legend contents-1)))
	     (if legend-index
		 (let ((before-legend (if (= 0 legend-index) '() (list-part 1 legend-index contents-1)))
		       (after-legend (if (>= legend-index (- (length contents-1) 1))
                                          '()
                                          (list-part (+ legend-index 2) (length contents-1)  contents-1)))
                      )
		   (and ((zero-or-more "#pcdata") before-legend)
			((apply zero-or-more suffix-elements) after-legend)))
		 (add-problem! (enrich-error-message "No LEGEND constituent found in FIELDSET" contents-1)))))

	  (else #f)))))

; (#PCDATA)
(define (textarea-checker contents)
  (cdata-checker contents))

; (#PCDATA)
(define (option-checker contents)
  (cdata-checker contents))

; (#PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* -(LABEL)
(define (label-checker contents)
 (let* ((legal-el-names 
         (list "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var"
               "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub"
               "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names (list "label") contents)))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

; (P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS | #PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* -(FORM)
(define (form-checker contents)
 (let* ((legal-el-names 
         (list  "#pcdata" "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes"
                      "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "tt" "i" "b" "u" "s" "strike"
                      "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" 
                      "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select"
                      "textarea" "label" "button"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names (list "form") contents)))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))


; (LI)+ -(P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS)"
(define (dir-checker contents)
 (let* ((legal-el-names 
         (list "li"))
        (immediate-constituents-ok (apply one-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names 
                 (list "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" 
                       "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address")
                 contents
             )
         ))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

; "(LI)+ -(P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS)"
(define (menu-checker contents)
  (let* ((legal-el-names 
         (list "li"))
        (immediate-constituents-ok (apply one-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names 
                 (list "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" 
                       "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address")
                 contents
             )
         ))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

; (#PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* 
; -(IMG|OBJECT|APPLET|BIG|SMALL|SUB|SUP|FONT|BASEFONT)
(define (pre-checker contents)
 (let* ((legal-el-names 
         (list "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr"
               "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe"
               "input" "select" "textarea" "label" "button"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names (list "img" "object" "applet" "big" "small" "sub" "sup" "font" "basefont") contents)))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))


;  ((P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS)+ | AREA+)
; trivivally rewritten to
; (P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS | AREA)+
(define (map-checker contents)
  (let* ((legal-el-names (list "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl"
                               "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" 
                               "hr" "table" "fieldset" "address" "area"))
        (immediate-constituents-ok (apply one-or-more legal-el-names))
       )
   (if (not (immediate-constituents-ok contents))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

; (#PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* -(A)
; The expressions is strange: First a is allowed as an immediate constituent, but later disallowed by exclusion deeply.
(define (a-checker contents)
 (let* ((legal-el-names 
         (list "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr"
               "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe"
                "input" "select" "textarea" "label" "button"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not 
        (and (immediate-constituents-ok contents)
             (deep-excluding-element-names (list "a") contents)))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

;  ((#PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)|P)*
; trivially rewritten to
;  (#PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON|P)*
(define (address-checker contents)
 (let* ((legal-el-names (list "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code"
                "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont"
                "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button" "p"))
        (immediate-constituents-ok (apply zero-or-more legal-el-names))
       )
   (if (not (immediate-constituents-ok contents))
       (add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
       #t)))

; (P | H1|H2|H3|H4|H5|H6 | UL | OL |  DIR | MENU | PRE | DL | DIV | CENTER |
;      NOSCRIPT | NOFRAMES | BLOCKQUOTE | FORM | ISINDEX | HR |
;      TABLE | FIELDSET | ADDRESS | #PCDATA | TT | I | B | U | S | STRIKE | BIG | SMALL | EM | STRONG | DFN | CODE |
;                   SAMP | KBD | VAR | CITE | ABBR | ACRONYM | A | IMG | APPLET | OBJECT | FONT | BASEFONT | BR | SCRIPT |
;    MAP | Q | SUB | SUP | SPAN | BDO | IFRAME | INPUT | SELECT | TEXTAREA | LABEL | BUTTON)* +(INS|DEL)
; Is it no possible to check for inclusion of INS or DEL. This is in fact the only real problem in the entire
; validation task of HTML4.0
(define (body-checker contents)
  (let* ((legal-el-names (list "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript"
                               "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u"
                               "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym"
                               "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span"
                               "bdo" "iframe" "input" "select" "textarea" "label" "button" "ins" "del"))
         (immediate-constituents-ok (apply zero-or-more legal-el-names))
	)
    (if (not (immediate-constituents-ok contents))
	(add-problem! (enrich-error-message 
                       (string-append "Illegal immediate constituent")
                       contents))
	#t)))

; ---------------------------------------------------------------------------------------------------
; Auxilary functions and procedures for HTML validation.

; Adds error message to problem-contents-list and returns #f, as an indication of validation failure.
(define (add-problem! error-message)
 (set! problem-contents-list (cons error-message problem-contents-list))
 #f)

(define (enrich-error-messages error-message-list constituent)
  (if (list? error-message-list)
      (map (lambda (e) (string-append e ": " (render-1 constituent))) error-message-list)
      error-message-list))

(define (enrich-error-message error-message constituent)
  (string-append error-message ": " (render-1 constituent)))

(define husk #f)

(define (and-fn x y) (and x y))

(define (cdata-checker contents)
 (let ((contents-1 (if (list? contents) (filter (negate white-space-related?) contents) contents)))
  (cond ((cdata? contents-1)		; #f - no contents probably
           #t)
        ((not (list? contents-1))
          (begin
	   (set! problem-contents-list 
		 (cons (enrich-error-message "The instance should not be empty" contents-1)
		       problem-contents-list))
	   #f))
	((list? contents-1)
	 (if (not
	       (accumulate-right and-fn #t (map cdata? contents-1))) ; all cdata?
	     (begin
	       (set! problem-contents-list 
		     (cons (enrich-error-message 
                             "The instance must consist of textual contents - no embedded elements allowed" contents-1)
			   problem-contents-list))
	       #f)
	     #t))
	(else #f))))

; Is there an AST with el-name in the list of ASTs.
; precondition: contents is a list of ASTs
(define (there-exists-ast? el-name contents-list)
  (find-in-list (lambda (ast) (equal? (ast-element-name ast) el-name)) contents-list))

; Return the instances of ast element name in the contents list.
; precondition: contents is a list of ASTs
(define (instances-of-ast el-name contents-list)
  (filter (lambda (ast) (equal? (ast-element-name ast) el-name)) contents-list))


; Do all ASTs have element names in el-name-list
; precondition: contents is a list of ASTs
; Should not be O(n^2) in a more finished implementation
(define (all-ast-member-of? el-name-list contents-list)
 (accumulate-right and-fn #t 
  (map (lambda (ast) (member (ast-element-name ast) el-name-list)) contents-list)))

(define (filter-contents pred contents-list)
 (if (list? contents-list)
     (filter pred contents-list)
     '()))

; Check that no sub AST in contents contains any node with tag in the list element-name-list.
; contents can be a list of ASTs.
; Returns true if no occurrence of any string from element-name-list is found.
(define (deep-excluding-element-names element-name-list contents)
 (cond ((ast? contents) (deep-excluding-element-names-ast element-name-list contents))
       ((cdata? contents) #t)
       ((forced-white-space? contents) #t)
       ((white-space-related? contents) #t)
       ((list? contents)
         (accumulate-right and-fn #t  
          (map (lambda (c) (deep-excluding-element-names element-name-list c)) contents))) ; notice direct recursion
       (else (laml-error "deep-excluding-element-names: Unknown type of contents"))))

; Like deep-excluding-element-names, but with the precondition that
; the parameter - ast-contents - is in fact an AST
(define (deep-excluding-element-names-ast element-name-list ast-contents)
 (let* ((root-name (ast-element-name ast-contents))
        (mem-test (member root-name element-name-list)))
   (if mem-test
       (add-problem! 
         (enrich-error-message 
           "Encountered illegal deep constituent"
          ast-contents))
       (deep-excluding-element-names element-name-list (ast-subtrees ast-contents)))))
       
; ----------------------------------------------------------------------------------------------------------
; Table automata

(define state-list '()) ; for debugging purposes
(define debugging-table-automata #f)

; Do we accept the list of actual constituents (a list of ast node names - string).
; constituents is the corresponding ast's etc, passed for error message purposes.
(define (table-automata-accept? actual-constituent-names constituents)
 (set! state-list '())
 (call-with-current-continuation
  (lambda (exit)
    (table-automata-accept-1? actual-constituent-names constituents 0 (length actual-constituent-names) exit 'start))))

(define (table-automata-accept-1? elements constituents i inlgt failure current-state)
  (if (and (eq? current-state 'tbody) (>= i inlgt))
      #t  ; accept
      (let* ((el (list-ref elements i))
             (const (list-ref constituents i))
             (next-state (table-automata-transition current-state el))
            )
       (if debugging-table-automata
            (set! state-list (cons next-state state-list)))
       (if (failure-state? next-state)
           (report-and-exit next-state el const failure))
       (table-automata-accept-1? elements constituents (+ 1 i) inlgt failure next-state))))

(define (failure-state? state)
  (memq state (list 'failure 'caption-failure 'cols-failure 'thead-failure 'tfoot-failure)))

(define (report-and-exit state el const failure)
 (let ((error-message
        (cond ((eq? state 'caption-failure)
                 "CAPTION encountered at wrong position")
              ((eq? state 'cols-failure)
                 "COL or COLGROUP encountered at wrong position")
              ((eq? state 'thead-failure)
                 "THEAD encountered at wrong position")
              ((eq? state 'tfoot-failure)
                 "TFOOT encountered at wrong position")
              (else "Only CAPTION, COL, COLGROUP, THEAD, TFOOT, and TBODY allowed"))))
    (add-problem! (enrich-error-message error-message const))
    (failure #f)))

(define (table-automata-transition in-state el)
  (cond 
         ((eq? in-state 'start)
            (cond ((equal? el "caption")         'caption)
                  ((equal? el "col")             'cols)
                  ((equal? el "colgroup")        'cols)
                  ((equal? el "thead")           'thead)
                  ((equal? el "tfoot")           'tfoot)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))

         ((eq? in-state 'caption)
            (cond ((equal? el "caption")         'caption-failure)
                  ((equal? el "col")             'cols)
                  ((equal? el "colgroup")        'cols)
                  ((equal? el "thead")           'thead)
                  ((equal? el "tfoot")           'tfoot)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))

         ((eq? in-state 'cols)
            (cond ((equal? el "caption")         'caption-failure)
                  ((equal? el "col")             'cols)
                  ((equal? el "colgroup")        'cols)
                  ((equal? el "thead")           'thead)
                  ((equal? el "tfoot")           'tfoot)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))

         ((eq? in-state 'thead)
            (cond ((equal? el "caption")         'caption-failure)
                  ((equal? el "col")             'cols-failure)
                  ((equal? el "colgroup")        'cols-failure)
                  ((equal? el "thead")           'thead-failure)
                  ((equal? el "tfoot")           'tfoot)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))

         ((eq? in-state 'tfoot)
            (cond ((equal? el "caption")         'caption-failure)
                  ((equal? el "col")             'cols-failure)
                  ((equal? el "colgroup")        'cols-failure)
                  ((equal? el "thead")           'thead-failure)
                  ((equal? el "tfoot")           'tfoot-failure)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))

         ((eq? in-state 'tbody)
            (cond ((equal? el "caption")         'caption-failure)
                  ((equal? el "col")             'cols-failure)
                  ((equal? el "colgroup")        'cols-failure)
                  ((equal? el "thead")           'thead-failure)
                  ((equal? el "tfoot")           'tfoot-failure)
                  ((equal? el "tbody")           'tbody)
                  (else                          'failure)))


         (else                                   (laml-error "table automata transition error 2" in-state))

  ))

; ----------------------------------------------------------------------------------------------------------



;;; The HTML basic mirror functions

;; The LAML mirror of the HTML 4.01 (transitional) <b>HTML</b> tag element, which can be applied as a single tag via a #f contents parameter (document root element ). <br>
;; .parameter contents The contents of the HTML element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "html" "surface.html#html"
;; .reference "HTML documentation" "HTML" "../../../html-doc/html401/struct/global.html#edef-HTML"
;; .misc No required attributes. <p>Optional attributes: lang, dir, version. <br><p><font size = 2>Content model: (head, body)</font>
(define (html4:html contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("version" "CDATA" "#FIXED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "html")) (if validate-html? (validate-contents! contents html-checker "html")) (if (not contents) (terminal-ast-node "html" attributes) (internal-ast-node "html" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>NOSCRIPT</b> double tag element (alternate content container for non script-based rendering ). <br>
;; .parameter contents The contents of the NOSCRIPT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "noscript" "surface.html#noscript"
;; .reference "HTML documentation" "NOSCRIPT" "../../../html-doc/html401/interact/scripts.html#edef-NOSCRIPT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:noscript contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "noscript")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "noscript")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "noscript" " - " "We embed 'false' in a double tag"))) (internal-ast-node "noscript" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SCRIPT</b> double tag element (script statements ). <br>
;; .parameter contents The contents of the SCRIPT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "script" "surface.html#script"
;; .reference "HTML documentation" "SCRIPT" "../../../html-doc/html401/interact/scripts.html#edef-SCRIPT"
;; .misc Required attributes: type. <p>Optional attributes: charset, language, src, defer, event, for. <br><p><font size = 2>Content model: cdata</font>
(define (html4:script contents  . attributes) (let ((attributes-of-elements (quote (("type" "CDATA" "#REQUIRED") ("charset" "CDATA" "#IMPLIED") ("language" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("defer" ("defer") "#IMPLIED") ("event" "CDATA" "#IMPLIED") ("for" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "script")) (if validate-html? (validate-contents! contents script-checker "script")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "script" " - " "We embed 'false' in a double tag"))) (internal-ast-node "script" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>STYLE</b> double tag element (style info ). <br>
;; .parameter contents The contents of the STYLE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "style" "surface.html#style"
;; .reference "HTML documentation" "STYLE" "../../../html-doc/html401/present/styles.html#edef-STYLE"
;; .misc Required attributes: type. <p>Optional attributes: lang, dir, media, title. <br><p><font size = 2>Content model: cdata</font>
(define (html4:style contents  . attributes) (let ((attributes-of-elements (quote (("type" "CDATA" "#REQUIRED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("media" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "style")) (if validate-html? (validate-contents! contents style-checker "style")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "style" " - " "We embed 'false' in a double tag"))) (internal-ast-node "style" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>META</b> single tag element (generic metainformation ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "meta" "surface.html#meta"
;; .reference "HTML documentation" "META" "../../../html-doc/html401/struct/global.html#edef-META"
;; .misc Required attributes: content. <p>Optional attributes: lang, dir, http-equiv, name, scheme. <br>
(define (html4:meta  . attributes) (let ((attributes-of-elements (quote (("content" "CDATA" "#REQUIRED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("http-equiv" "NAME" "#IMPLIED") ("name" "NAME" "#IMPLIED") ("scheme" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "meta")) (terminal-ast-node "meta" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BASE</b> single tag element (document base URI ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "base" "surface.html#base"
;; .reference "HTML documentation" "BASE" "../../../html-doc/html401/struct/links.html#edef-BASE"
;; .misc No required attributes. <p>Optional attributes: href, target. <br>
(define (html4:base  . attributes) (let ((attributes-of-elements (quote (("href" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "base")) (terminal-ast-node "base" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>ISINDEX</b> single tag element (single line prompt ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "isindex" "surface.html#isindex"
;; .reference "HTML documentation" "ISINDEX" "../../../html-doc/html401/interact/forms.html#edef-ISINDEX"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, prompt. <br>
(define (html4:isindex  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("prompt" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "isindex")) (terminal-ast-node "isindex" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TITLE</b> double tag element (document title ). <br>
;; .parameter contents The contents of the TITLE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "title" "surface.html#title"
;; .reference "HTML documentation" "TITLE" "../../../html-doc/html401/struct/global.html#edef-TITLE"
;; .misc No required attributes. <p>Optional attributes: lang, dir. <br><p><font size = 2>Content model: (#pcdata) -(script|style|meta|link|object)</font>
(define (html4:title contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "title")) (if validate-html? (validate-contents! contents title-checker "title")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "title" " - " "We embed 'false' in a double tag"))) (internal-ast-node "title" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>HEAD</b> tag element, which can be applied as a single tag via a #f contents parameter (document head ). <br>
;; .parameter contents The contents of the HEAD element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "head" "surface.html#head"
;; .reference "HTML documentation" "HEAD" "../../../html-doc/html401/struct/global.html#edef-HEAD"
;; .misc No required attributes. <p>Optional attributes: lang, dir, profile. <br><p><font size = 2>Content model: (title & isindex? & base?) +(script|style|meta|link|object)</font>
(define (html4:head contents  . attributes) (let ((attributes-of-elements (quote (("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("profile" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "head")) (if validate-html? (validate-contents! contents head-checker "head")) (if (not contents) (terminal-ast-node "head" attributes) (internal-ast-node "head" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>NOFRAMES</b> double tag element (alternate content container for non frame-based rendering ). <br>
;; .parameter contents The contents of the NOFRAMES element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "noframes" "surface.html#noframes"
;; .reference "HTML documentation" "NOFRAMES" "../../../html-doc/html401/present/frames.html#edef-NOFRAMES"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:noframes contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "noframes")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "noframes")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "noframes" " - " "We embed 'false' in a double tag"))) (internal-ast-node "noframes" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>IFRAME</b> double tag element (inline subwindow ). <br>
;; .parameter contents The contents of the IFRAME element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "iframe" "surface.html#iframe"
;; .reference "HTML documentation" "IFRAME" "../../../html-doc/html401/present/frames.html#edef-IFRAME"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, longdesc, name, src, frameborder, marginwidth, marginheight, scrolling, align, height, width. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:iframe contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("frameborder" ("1" "0") "1") ("marginwidth" "CDATA" "#IMPLIED") ("marginheight" "CDATA" "#IMPLIED") ("scrolling" ("yes" "no" "auto") "auto") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "iframe")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "iframe")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "iframe" " - " "We embed 'false' in a double tag"))) (internal-ast-node "iframe" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>FRAME</b> single tag element (subwindow ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "frame" "surface.html#frame"
;; .reference "HTML documentation" "FRAME" "../../../html-doc/html401/present/frames.html#edef-FRAME"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, longdesc, name, src, frameborder, marginwidth, marginheight, noresize, scrolling. <br>
(define (html4:frame  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("frameborder" ("1" "0") "1") ("marginwidth" "CDATA" "#IMPLIED") ("marginheight" "CDATA" "#IMPLIED") ("noresize" ("noresize") "#IMPLIED") ("scrolling" ("yes" "no" "auto") "auto")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "frame")) (terminal-ast-node "frame" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>FRAMESET</b> double tag element (window subdivision). <br>
;; .parameter contents The contents of the FRAMESET element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "frameset" "surface.html#frameset"
;; .reference "HTML documentation" "FRAMESET" "../../../html-doc/html401/present/frames.html#edef-FRAMESET"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, rows, cols, onload, onunload. <br><p><font size = 2>Content model: ((frameset|frame)+ & noframes?)</font>
(define (html4:frameset contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("rows" "CDATA" "#IMPLIED") ("cols" "CDATA" "#IMPLIED") ("onload" "CDATA" "#IMPLIED") ("onunload" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "frameset")) (if validate-html? (validate-contents! contents frameset-checker "frameset")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "frameset" " - " "We embed 'false' in a double tag"))) (internal-ast-node "frameset" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TH</b> tag element, which can be applied as a single tag via a #f contents parameter (table header cell, table data cell). <br>
;; .parameter contents The contents of the TH element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "th" "surface.html#th"
;; .reference "HTML documentation" "TH" "../../../html-doc/html401/struct/tables.html#edef-TH"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, abbr, axis, headers, scope, rowspan, colspan, align, char, charoff, valign, nowrap, bgcolor, width, height. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:th contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("abbr" "CDATA" "#IMPLIED") ("axis" "CDATA" "#IMPLIED") ("headers" "IDREFS" "#IMPLIED") ("scope" ("row" "col" "rowgroup" "colgroup") "#IMPLIED") ("rowspan" "NUMBER" "1") ("colspan" "NUMBER" "1") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("nowrap" ("nowrap") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "th")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "th")) (if (not contents) (terminal-ast-node "th" attributes) (internal-ast-node "th" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TD</b> tag element, which can be applied as a single tag via a #f contents parameter (table header cell, table data cell). <br>
;; .parameter contents The contents of the TD element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "td" "surface.html#td"
;; .reference "HTML documentation" "TD" "../../../html-doc/html401/struct/tables.html#edef-TD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, abbr, axis, headers, scope, rowspan, colspan, align, char, charoff, valign, nowrap, bgcolor, width, height. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:td contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("abbr" "CDATA" "#IMPLIED") ("axis" "CDATA" "#IMPLIED") ("headers" "IDREFS" "#IMPLIED") ("scope" ("row" "col" "rowgroup" "colgroup") "#IMPLIED") ("rowspan" "NUMBER" "1") ("colspan" "NUMBER" "1") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("nowrap" ("nowrap") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "td")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "td")) (if (not contents) (terminal-ast-node "td" attributes) (internal-ast-node "td" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TR</b> tag element, which can be applied as a single tag via a #f contents parameter (table row ). <br>
;; .parameter contents The contents of the TR element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "tr" "surface.html#tr"
;; .reference "HTML documentation" "TR" "../../../html-doc/html401/struct/tables.html#edef-TR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign, bgcolor. <br><p><font size = 2>Content model: (th | td)+</font>
(define (html4:tr contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tr")) (if validate-html? (validate-contents! contents (one-or-more "th" "td") "tr")) (if (not contents) (terminal-ast-node "tr" attributes) (internal-ast-node "tr" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>COL</b> single tag element (table column ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "col" "surface.html#col"
;; .reference "HTML documentation" "COL" "../../../html-doc/html401/struct/tables.html#edef-COL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, span, width, align, char, charoff, valign. <br>
(define (html4:col  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("span" "NUMBER" "1") ("width" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "col")) (terminal-ast-node "col" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>COLGROUP</b> tag element, which can be applied as a single tag via a #f contents parameter (table column group ). <br>
;; .parameter contents The contents of the COLGROUP element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "colgroup" "surface.html#colgroup"
;; .reference "HTML documentation" "COLGROUP" "../../../html-doc/html401/struct/tables.html#edef-COLGROUP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, span, width, align, char, charoff, valign. <br><p><font size = 2>Content model: (col)*</font>
(define (html4:colgroup contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("span" "NUMBER" "1") ("width" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "colgroup")) (if validate-html? (validate-contents! contents (zero-or-more "col") "colgroup")) (if (not contents) (terminal-ast-node "colgroup" attributes) (internal-ast-node "colgroup" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TBODY</b> tag element, which can be applied as a single tag via a #f contents parameter (table body ). <br>
;; .parameter contents The contents of the TBODY element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "tbody" "surface.html#tbody"
;; .reference "HTML documentation" "TBODY" "../../../html-doc/html401/struct/tables.html#edef-TBODY"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br><p><font size = 2>Content model: (tr)+</font>
(define (html4:tbody contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tbody")) (if validate-html? (validate-contents! contents (one-or-more "tr") "tbody")) (if (not contents) (terminal-ast-node "tbody" attributes) (internal-ast-node "tbody" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TFOOT</b> tag element, which can be applied as a single tag via a #f contents parameter (table footer ). <br>
;; .parameter contents The contents of the TFOOT element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "tfoot" "surface.html#tfoot"
;; .reference "HTML documentation" "TFOOT" "../../../html-doc/html401/struct/tables.html#edef-TFOOT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br><p><font size = 2>Content model: (tr)+</font>
(define (html4:tfoot contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tfoot")) (if validate-html? (validate-contents! contents (one-or-more "tr") "tfoot")) (if (not contents) (terminal-ast-node "tfoot" attributes) (internal-ast-node "tfoot" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>THEAD</b> tag element, which can be applied as a single tag via a #f contents parameter (table header ). <br>
;; .parameter contents The contents of the THEAD element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "thead" "surface.html#thead"
;; .reference "HTML documentation" "THEAD" "../../../html-doc/html401/struct/tables.html#edef-THEAD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, char, charoff, valign. <br><p><font size = 2>Content model: (tr)+</font>
(define (html4:thead contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify" "char") "#IMPLIED") ("char" "CDATA" "#IMPLIED") ("charoff" "CDATA" "#IMPLIED") ("valign" ("top" "middle" "bottom" "baseline") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "thead")) (if validate-html? (validate-contents! contents (one-or-more "tr") "thead")) (if (not contents) (terminal-ast-node "thead" attributes) (internal-ast-node "thead" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>CAPTION</b> double tag element (table caption ). <br>
;; .parameter contents The contents of the CAPTION element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "caption" "surface.html#caption"
;; .reference "HTML documentation" "CAPTION" "../../../html-doc/html401/struct/tables.html#edef-CAPTION"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:caption contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("top" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "caption")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "caption")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "caption" " - " "We embed 'false' in a double tag"))) (internal-ast-node "caption" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TABLE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the TABLE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "table" "surface.html#table"
;; .reference "HTML documentation" "TABLE" "../../../html-doc/html401/struct/tables.html#edef-TABLE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, summary, width, border, frame, rules, cellspacing, cellpadding, align, bgcolor, datapagesize. <br><p><font size = 2>Content model: (caption?, (col*|colgroup*), thead?, tfoot?, tbody+)</font>
(define (html4:table contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("summary" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("frame" ("void" "above" "below" "hsides" "lhs" "rhs" "vsides" "box" "border") "#IMPLIED") ("rules" ("none" "groups" "rows" "cols" "all") "#IMPLIED") ("cellspacing" "CDATA" "#IMPLIED") ("cellpadding" "CDATA" "#IMPLIED") ("align" ("left" "center" "right") "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("datapagesize" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "table")) (if validate-html? (validate-contents! contents table-checker "table")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "table" " - " "We embed 'false' in a double tag"))) (internal-ast-node "table" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BUTTON</b> double tag element (push button ). <br>
;; .parameter contents The contents of the BUTTON element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "button" "surface.html#button"
;; .reference "HTML documentation" "BUTTON" "../../../html-doc/html401/interact/forms.html#edef-BUTTON"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, value, type, disabled, tabindex, accesskey, onfocus, onblur. <br><p><font size = 2>Content model: (p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* -(a|input | select | textarea | label | button|form|isindex|fieldset|iframe)</font>
(define (html4:button contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("type" ("button" "submit" "reset") "submit") ("disabled" ("disabled") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "button")) (if validate-html? (validate-contents! contents button-checker "button")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "button" " - " "We embed 'false' in a double tag"))) (internal-ast-node "button" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>LEGEND</b> double tag element (fieldset legend ). <br>
;; .parameter contents The contents of the LEGEND element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "legend" "surface.html#legend"
;; .reference "HTML documentation" "LEGEND" "../../../html-doc/html401/interact/forms.html#edef-LEGEND"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, accesskey, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:legend contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("align" ("top" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "legend")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "legend")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "legend" " - " "We embed 'false' in a double tag"))) (internal-ast-node "legend" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>FIELDSET</b> double tag element (form control group ). <br>
;; .parameter contents The contents of the FIELDSET element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "fieldset" "surface.html#fieldset"
;; .reference "HTML documentation" "FIELDSET" "../../../html-doc/html401/interact/forms.html#edef-FIELDSET"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata,legend,(p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*)</font>
(define (html4:fieldset contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "fieldset")) (if validate-html? (validate-contents! contents fieldset-checker "fieldset")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "fieldset" " - " "We embed 'false' in a double tag"))) (internal-ast-node "fieldset" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TEXTAREA</b> double tag element (multi-line text field ). <br>
;; .parameter contents The contents of the TEXTAREA element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "textarea" "surface.html#textarea"
;; .reference "HTML documentation" "TEXTAREA" "../../../html-doc/html401/interact/forms.html#edef-TEXTAREA"
;; .misc Required attributes: rows, cols. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, disabled, readonly, tabindex, accesskey, onfocus, onblur, onselect, onchange. <br><p><font size = 2>Content model: (#pcdata)</font>
(define (html4:textarea contents  . attributes) (let ((attributes-of-elements (quote (("rows" "NUMBER" "#REQUIRED") ("cols" "NUMBER" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("readonly" ("readonly") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onselect" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "textarea")) (if validate-html? (validate-contents! contents textarea-checker "textarea")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "textarea" " - " "We embed 'false' in a double tag"))) (internal-ast-node "textarea" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>OPTION</b> tag element, which can be applied as a single tag via a #f contents parameter (selectable choice ). <br>
;; .parameter contents The contents of the OPTION element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "option" "surface.html#option"
;; .reference "HTML documentation" "OPTION" "../../../html-doc/html401/interact/forms.html#edef-OPTION"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, selected, disabled, label, value. <br><p><font size = 2>Content model: (#pcdata)</font>
(define (html4:option contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("selected" ("selected") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("label" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "option")) (if validate-html? (validate-contents! contents option-checker "option")) (if (not contents) (terminal-ast-node "option" attributes) (internal-ast-node "option" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>OPTGROUP</b> double tag element (option group ). <br>
;; .parameter contents The contents of the OPTGROUP element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "optgroup" "surface.html#optgroup"
;; .reference "HTML documentation" "OPTGROUP" "../../../html-doc/html401/interact/forms.html#edef-OPTGROUP"
;; .misc Required attributes: label. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, disabled. <br><p><font size = 2>Content model: (option)+</font>
(define (html4:optgroup contents  . attributes) (let ((attributes-of-elements (quote (("label" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("disabled" ("disabled") "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "optgroup")) (if validate-html? (validate-contents! contents (one-or-more "option") "optgroup")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "optgroup" " - " "We embed 'false' in a double tag"))) (internal-ast-node "optgroup" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SELECT</b> double tag element (option selector ). <br>
;; .parameter contents The contents of the SELECT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "select" "surface.html#select"
;; .reference "HTML documentation" "SELECT" "../../../html-doc/html401/interact/forms.html#edef-SELECT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, name, size, multiple, disabled, tabindex, onfocus, onblur, onchange. <br><p><font size = 2>Content model: (optgroup | option)+</font>
(define (html4:select contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("size" "NUMBER" "#IMPLIED") ("multiple" ("multiple") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "select")) (if validate-html? (validate-contents! contents (one-or-more "optgroup" "option") "select")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "select" " - " "We embed 'false' in a double tag"))) (internal-ast-node "select" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>INPUT</b> single tag element (form control ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "input" "surface.html#input"
;; .reference "HTML documentation" "INPUT" "../../../html-doc/html401/interact/forms.html#edef-INPUT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, name, value, checked, disabled, readonly, size, maxlength, src, alt, usemap, ismap, tabindex, accesskey, onfocus, onblur, onselect, onchange, accept, align. <br>
(define (html4:input  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" ("TEXT" "PASSWORD" "CHECKBOX" "RADIO" "SUBMIT" "RESET" "FILE" "HIDDEN" "IMAGE" "BUTTON") "TEXT") ("name" "CDATA" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("checked" ("checked") "#IMPLIED") ("disabled" ("disabled") "#IMPLIED") ("readonly" ("readonly") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("maxlength" "NUMBER" "#IMPLIED") ("src" "CDATA" "#IMPLIED") ("alt" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("ismap" ("ismap") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED") ("onselect" "CDATA" "#IMPLIED") ("onchange" "CDATA" "#IMPLIED") ("accept" "CDATA" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "input")) (terminal-ast-node "input" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>LABEL</b> double tag element (form field label text ). <br>
;; .parameter contents The contents of the LABEL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "label" "surface.html#label"
;; .reference "HTML documentation" "LABEL" "../../../html-doc/html401/interact/forms.html#edef-LABEL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, for, accesskey, onfocus, onblur. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* -(label)</font>
(define (html4:label contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("for" "IDREF" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "label")) (if validate-html? (validate-contents! contents label-checker "label")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "label" " - " "We embed 'false' in a double tag"))) (internal-ast-node "label" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>FORM</b> double tag element (interactive form ). <br>
;; .parameter contents The contents of the FORM element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "form" "surface.html#form"
;; .reference "HTML documentation" "FORM" "../../../html-doc/html401/interact/forms.html#edef-FORM"
;; .misc Required attributes: action. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, method, enctype, accept, name, onsubmit, onreset, target, accept-charset. <br><p><font size = 2>Content model: (p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* -(form)</font>
(define (html4:form contents  . attributes) (let ((attributes-of-elements (quote (("action" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("method" ("GET" "POST") "GET") ("enctype" "CDATA" ""application/x-www-form-urlencoded"") ("accept" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("onsubmit" "CDATA" "#IMPLIED") ("onreset" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("accept-charset" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "form")) (if validate-html? (validate-contents! contents form-checker "form")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "form" " - " "We embed 'false' in a double tag"))) (internal-ast-node "form" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>LI</b> tag element, which can be applied as a single tag via a #f contents parameter (list item ). <br>
;; .parameter contents The contents of the LI element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "li" "surface.html#li"
;; .reference "HTML documentation" "LI" "../../../html-doc/html401/struct/lists.html#edef-LI"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, value. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:li contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("value" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "li")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "li")) (if (not contents) (terminal-ast-node "li" attributes) (internal-ast-node "li" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DIR</b> double tag element (directory list, menu list ). <br>
;; .parameter contents The contents of the DIR element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "dir" "surface.html#dir"
;; .reference "HTML documentation" "DIR" "../../../html-doc/html401/struct/lists.html#edef-DIR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br><p><font size = 2>Content model: (li)+ -(p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address)</font>
(define (html4:dir contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dir")) (if validate-html? (validate-contents! contents dir-checker "dir")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dir" " - " "We embed 'false' in a double tag"))) (internal-ast-node "dir" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>MENU</b> double tag element (directory list, menu list ). <br>
;; .parameter contents The contents of the MENU element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "menu" "surface.html#menu"
;; .reference "HTML documentation" "MENU" "../../../html-doc/html401/struct/lists.html#edef-MENU"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br><p><font size = 2>Content model: (li)+ -(p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address)</font>
(define (html4:menu contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "menu")) (if validate-html? (validate-contents! contents menu-checker "menu")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "menu" " - " "We embed 'false' in a double tag"))) (internal-ast-node "menu" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>UL</b> double tag element (unordered list ). <br>
;; .parameter contents The contents of the UL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "ul" "surface.html#ul"
;; .reference "HTML documentation" "UL" "../../../html-doc/html401/struct/lists.html#edef-UL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, compact. <br><p><font size = 2>Content model: (li)+</font>
(define (html4:ul contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" ("disc" "square" "circle") "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ul")) (if validate-html? (validate-contents! contents (one-or-more "li") "ul")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ul" " - " "We embed 'false' in a double tag"))) (internal-ast-node "ul" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>OL</b> double tag element (ordered list ). <br>
;; .parameter contents The contents of the OL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "ol" "surface.html#ol"
;; .reference "HTML documentation" "OL" "../../../html-doc/html401/struct/lists.html#edef-OL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, type, compact, start. <br><p><font size = 2>Content model: (li)+</font>
(define (html4:ol contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED") ("start" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ol")) (if validate-html? (validate-contents! contents (one-or-more "li") "ol")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ol" " - " "We embed 'false' in a double tag"))) (internal-ast-node "ol" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DD</b> tag element, which can be applied as a single tag via a #f contents parameter (definition description ). <br>
;; .parameter contents The contents of the DD element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "dd" "surface.html#dd"
;; .reference "HTML documentation" "DD" "../../../html-doc/html401/struct/lists.html#edef-DD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:dd contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dd")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "dd")) (if (not contents) (terminal-ast-node "dd" attributes) (internal-ast-node "dd" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DT</b> tag element, which can be applied as a single tag via a #f contents parameter (definition term ). <br>
;; .parameter contents The contents of the DT element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "dt" "surface.html#dt"
;; .reference "HTML documentation" "DT" "../../../html-doc/html401/struct/lists.html#edef-DT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:dt contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dt")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "dt")) (if (not contents) (terminal-ast-node "dt" attributes) (internal-ast-node "dt" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DL</b> double tag element (definition list ). <br>
;; .parameter contents The contents of the DL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "dl" "surface.html#dl"
;; .reference "HTML documentation" "DL" "../../../html-doc/html401/struct/lists.html#edef-DL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, compact. <br><p><font size = 2>Content model: (dt | dd)+</font>
(define (html4:dl contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("compact" ("compact") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dl")) (if validate-html? (validate-contents! contents (one-or-more "dt" "dd") "dl")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dl" " - " "We embed 'false' in a double tag"))) (internal-ast-node "dl" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>INS</b> double tag element (inserted text, deleted text ). <br>
;; .parameter contents The contents of the INS element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "ins" "surface.html#ins"
;; .reference "HTML documentation" "INS" "../../../html-doc/html401/struct/text.html#edef-INS"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite, datetime. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:ins contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED") ("datetime" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "ins")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "ins")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "ins" " - " "We embed 'false' in a double tag"))) (internal-ast-node "ins" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DEL</b> double tag element (inserted text, deleted text ). <br>
;; .parameter contents The contents of the DEL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "del" "surface.html#del"
;; .reference "HTML documentation" "DEL" "../../../html-doc/html401/struct/text.html#edef-DEL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite, datetime. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:del contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED") ("datetime" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "del")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "del")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "del" " - " "We embed 'false' in a double tag"))) (internal-ast-node "del" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BLOCKQUOTE</b> double tag element (long quotation ). <br>
;; .parameter contents The contents of the BLOCKQUOTE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "blockquote" "surface.html#blockquote"
;; .reference "HTML documentation" "BLOCKQUOTE" "../../../html-doc/html401/struct/text.html#edef-BLOCKQUOTE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:blockquote contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "blockquote")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "blockquote")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "blockquote" " - " "We embed 'false' in a double tag"))) (internal-ast-node "blockquote" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>Q</b> double tag element (short inline quotation ). <br>
;; .parameter contents The contents of the Q element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "q" "surface.html#q"
;; .reference "HTML documentation" "Q" "../../../html-doc/html401/struct/text.html#edef-Q"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, cite. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:q contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("cite" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "q")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "q")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "q" " - " "We embed 'false' in a double tag"))) (internal-ast-node "q" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>PRE</b> double tag element (preformatted text ). <br>
;; .parameter contents The contents of the PRE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "pre" "surface.html#pre"
;; .reference "HTML documentation" "PRE" "../../../html-doc/html401/struct/text.html#edef-PRE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, width. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* -(img|object|applet|big|small|sub|sup|font|basefont)</font>
(define (html4:pre contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("width" "NUMBER" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "pre")) (if validate-html? (validate-contents! contents pre-checker "pre")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "pre" " - " "We embed 'false' in a double tag"))) (internal-ast-node "pre" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H1</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H1 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h1" "surface.html#h1"
;; .reference "HTML documentation" "H1" "../../../html-doc/html401/struct/global.html#edef-H1"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h1 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h1")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h1")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h1" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h1" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H2</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H2 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h2" "surface.html#h2"
;; .reference "HTML documentation" "H2" "../../../html-doc/html401/struct/global.html#edef-H2"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h2 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h2")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h2")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h2" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h2" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H3</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H3 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h3" "surface.html#h3"
;; .reference "HTML documentation" "H3" "../../../html-doc/html401/struct/global.html#edef-H3"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h3 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h3")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h3")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h3" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h3" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H4</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H4 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h4" "surface.html#h4"
;; .reference "HTML documentation" "H4" "../../../html-doc/html401/present/frames.html#edef-H4"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h4 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h4")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h4")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h4" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h4" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H5</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H5 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h5" "surface.html#h5"
;; .reference "HTML documentation" "H5" "../../../html-doc/html401/present/frames.html#edef-H5"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h5 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h5")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h5")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h5" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h5" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>H6</b> double tag element (heading ). <br>
;; .parameter contents The contents of the H6 element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "h6" "surface.html#h6"
;; .reference "HTML documentation" "H6" "../../../html-doc/html401/present/frames.html#edef-H6"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:h6 contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "h6")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "h6")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "h6" " - " "We embed 'false' in a double tag"))) (internal-ast-node "h6" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>P</b> tag element, which can be applied as a single tag via a #f contents parameter (paragraph ). <br>
;; .parameter contents The contents of the P element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "p" "surface.html#p"
;; .reference "HTML documentation" "P" "../../../html-doc/html401/struct/text.html#edef-P"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:p contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "p")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "p")) (if (not contents) (terminal-ast-node "p" attributes) (internal-ast-node "p" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>HR</b> single tag element (horizontal rule ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "hr" "surface.html#hr"
;; .reference "HTML documentation" "HR" "../../../html-doc/html401/present/graphics.html#edef-HR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align, noshade, size, width. <br>
(define (html4:hr  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right") "#IMPLIED") ("noshade" ("noshade") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "hr")) (terminal-ast-node "hr" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>APPLET</b> double tag element (Java applet ). <br>
;; .parameter contents The contents of the APPLET element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "applet" "surface.html#applet"
;; .reference "HTML documentation" "APPLET" "../../../html-doc/html401/struct/objects.html#edef-APPLET"
;; .misc Required attributes: width, height. <p>Optional attributes: id, class, style, title, codebase, archive, code, object, alt, name, align, hspace, vspace. <br><p><font size = 2>Content model: (param | p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:applet contents  . attributes) (let ((attributes-of-elements (quote (("width" "CDATA" "#REQUIRED") ("height" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("codebase" "CDATA" "#IMPLIED") ("archive" "CDATA" "#IMPLIED") ("code" "CDATA" "#IMPLIED") ("object" "CDATA" "#IMPLIED") ("alt" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "applet")) (if validate-html? (validate-contents! contents (zero-or-more "param" "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "applet")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "applet" " - " "We embed 'false' in a double tag"))) (internal-ast-node "applet" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>PARAM</b> single tag element (named property value ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "param" "surface.html#param"
;; .reference "HTML documentation" "PARAM" "../../../html-doc/html401/struct/objects.html#edef-PARAM"
;; .misc Required attributes: name. <p>Optional attributes: id, value, valuetype, type. <br>
(define (html4:param  . attributes) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("value" "CDATA" "#IMPLIED") ("valuetype" ("DATA" "REF" "OBJECT") "DATA") ("type" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "param")) (terminal-ast-node "param" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>OBJECT</b> double tag element (generic embedded object ). <br>
;; .parameter contents The contents of the OBJECT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "object" "surface.html#object"
;; .reference "HTML documentation" "OBJECT" "../../../html-doc/html401/struct/objects.html#edef-OBJECT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, declare, classid, codebase, data, type, codetype, archive, standby, height, width, usemap, name, tabindex, align, border, hspace, vspace. <br><p><font size = 2>Content model: (param | p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:object contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("declare" ("declare") "#IMPLIED") ("classid" "CDATA" "#IMPLIED") ("codebase" "CDATA" "#IMPLIED") ("data" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("codetype" "CDATA" "#IMPLIED") ("archive" "CDATA" "#IMPLIED") ("standby" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "object")) (if validate-html? (validate-contents! contents (zero-or-more "param" "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "object")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "object" " - " "We embed 'false' in a double tag"))) (internal-ast-node "object" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>IMG</b> single tag element (Embedded image ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "img" "surface.html#img"
;; .reference "HTML documentation" "IMG" "../../../html-doc/html401/struct/objects.html#edef-IMG"
;; .misc Required attributes: src, alt. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, longdesc, name, height, width, usemap, ismap, align, border, hspace, vspace. <br>
(define (html4:img  . attributes) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED") ("alt" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("longdesc" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED") ("width" "CDATA" "#IMPLIED") ("usemap" "CDATA" "#IMPLIED") ("ismap" ("ismap") "#IMPLIED") ("align" ("top" "middle" "bottom" "left" "right") "#IMPLIED") ("border" "CDATA" "#IMPLIED") ("hspace" "CDATA" "#IMPLIED") ("vspace" "CDATA" "#IMPLIED")))) (req-n 2)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "img")) (terminal-ast-node "img" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>LINK</b> single tag element (a media-independent link ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "link" "surface.html#link"
;; .reference "HTML documentation" "LINK" "../../../html-doc/html401/struct/links.html#edef-LINK"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, charset, href, hreflang, type, rel, rev, media, target. <br>
(define (html4:link  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("charset" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("hreflang" "NAME" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("rel" "CDATA" "#IMPLIED") ("rev" "CDATA" "#IMPLIED") ("media" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "link")) (terminal-ast-node "link" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>AREA</b> single tag element (client-side image map area ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "area" "surface.html#area"
;; .reference "HTML documentation" "AREA" "../../../html-doc/html401/struct/text.html#edef-AREA"
;; .misc Required attributes: alt. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, shape, coords, href, target, nohref, tabindex, accesskey, onfocus, onblur. <br>
(define (html4:area  . attributes) (let ((attributes-of-elements (quote (("alt" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("shape" ("rect" "circle" "poly" "default") "rect") ("coords" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("nohref" ("nohref") "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "area")) (terminal-ast-node "area" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>MAP</b> double tag element (client-side image map ). <br>
;; .parameter contents The contents of the MAP element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "map" "surface.html#map"
;; .reference "HTML documentation" "MAP" "../../../html-doc/html401/struct/objects.html#edef-MAP"
;; .misc Required attributes: name. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: ((p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address) | area)+</font>
(define (html4:map contents  . attributes) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "map")) (if validate-html? (validate-contents! contents map-checker "map")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "map" " - " "We embed 'false' in a double tag"))) (internal-ast-node "map" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>A</b> double tag element (anchor ). <br>
;; .parameter contents The contents of the A element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "a" "surface.html#a"
;; .reference "HTML documentation" "A" "../../../html-doc/html401/struct/links.html#edef-A"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, charset, type, name, href, hreflang, target, rel, rev, accesskey, shape, coords, tabindex, onfocus, onblur. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* -(a)</font>
(define (html4:a contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("charset" "CDATA" "#IMPLIED") ("type" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("href" "CDATA" "#IMPLIED") ("hreflang" "NAME" "#IMPLIED") ("target" "CDATA" "#IMPLIED") ("rel" "CDATA" "#IMPLIED") ("rev" "CDATA" "#IMPLIED") ("accesskey" "CDATA" "#IMPLIED") ("shape" ("rect" "circle" "poly" "default") "rect") ("coords" "CDATA" "#IMPLIED") ("tabindex" "NUMBER" "#IMPLIED") ("onfocus" "CDATA" "#IMPLIED") ("onblur" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "a")) (if validate-html? (validate-contents! contents a-checker "a")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "a" " - " "We embed 'false' in a double tag"))) (internal-ast-node "a" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>CENTER</b> double tag element (shorthand for DIV align=center ). <br>
;; .parameter contents The contents of the CENTER element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "center" "surface.html#center"
;; .reference "HTML documentation" "CENTER" "../../../html-doc/html401/present/graphics.html#edef-CENTER"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:center contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "center")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "center")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "center" " - " "We embed 'false' in a double tag"))) (internal-ast-node "center" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DIV</b> double tag element (generic language/style container ). <br>
;; .parameter contents The contents of the DIV element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "div" "surface.html#div"
;; .reference "HTML documentation" "DIV" "../../../html-doc/html401/struct/global.html#edef-DIV"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, align. <br><p><font size = 2>Content model: (p | h1 | h2 | h3 | h4 | h5 | h6 | ul | ol | dir | menu | pre | dl | div | center | noscript | noframes | blockquote | form | isindex | hr | table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:div contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("align" ("left" "center" "right" "justify") "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "div")) (if validate-html? (validate-contents! contents (zero-or-more "p" "h1" "h2" "h3" "h4" "h5" "h6" "ul" "ol" "dir" "menu" "pre" "dl" "div" "center" "noscript" "noframes" "blockquote" "form" "isindex" "hr" "table" "fieldset" "address" "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "div")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "div" " - " "We embed 'false' in a double tag"))) (internal-ast-node "div" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>ADDRESS</b> double tag element (information on author ). <br>
;; .parameter contents The contents of the ADDRESS element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "address" "surface.html#address"
;; .reference "HTML documentation" "ADDRESS" "../../../html-doc/html401/struct/global.html#edef-ADDRESS"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: ((#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)|p)*</font>
(define (html4:address contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "address")) (if validate-html? (validate-contents! contents address-checker "address")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "address" " - " "We embed 'false' in a double tag"))) (internal-ast-node "address" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BODY</b> tag element, which can be applied as a single tag via a #f contents parameter (document body ). <br>
;; .parameter contents The contents of the BODY element (a list of content elements - strings, sub-elements, space suppress, or lists of these) or #f if applied as a single tag
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "body" "surface.html#body"
;; .reference "HTML documentation" "BODY" "../../../html-doc/html401/struct/global.html#edef-BODY"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup, onload, onunload, background, bgcolor, text, link, vlink, alink. <br><p><font size = 2>Content model: (p | h1|h2|h3|h4|h5|h6 | ul | ol |  dir | menu | pre | dl | div | center |       noscript | noframes | blockquote | form | isindex | hr |       table | fieldset | address | #pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code |                    samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script |     map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)* +(ins|del)</font>
(define (html4:body contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED") ("onload" "CDATA" "#IMPLIED") ("onunload" "CDATA" "#IMPLIED") ("background" "CDATA" "#IMPLIED") ("bgcolor" "CDATA" "#IMPLIED") ("text" "CDATA" "#IMPLIED") ("link" "CDATA" "#IMPLIED") ("vlink" "CDATA" "#IMPLIED") ("alink" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "body")) (if validate-html? (validate-contents! contents body-checker "body")) (if (not contents) (terminal-ast-node "body" attributes) (internal-ast-node "body" contents attributes))))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BR</b> single tag element (forced line break ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "br" "surface.html#br"
;; .reference "HTML documentation" "BR" "../../../html-doc/html401/struct/text.html#edef-BR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, clear. <br>
(define (html4:br  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("clear" ("left" "all" "right" "none") "none")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "br")) (terminal-ast-node "br" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>FONT</b> double tag element (local change to font ). <br>
;; .parameter contents The contents of the FONT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "font" "surface.html#font"
;; .reference "HTML documentation" "FONT" "../../../html-doc/html401/present/graphics.html#edef-FONT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, size, color, face. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:font contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("size" "CDATA" "#IMPLIED") ("color" "CDATA" "#IMPLIED") ("face" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "font")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "font")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "font" " - " "We embed 'false' in a double tag"))) (internal-ast-node "font" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BASEFONT</b> single tag element (base font size ). <br>
;; .parameter attributes HTML and CSS attribute value pairs on Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "basefont" "surface.html#basefont"
;; .reference "HTML documentation" "BASEFONT" "../../../html-doc/html401/present/graphics.html#edef-BASEFONT"
;; .misc Required attributes: size. <p>Optional attributes: id, color, face. <br>
(define (html4:basefont  . attributes) (let ((attributes-of-elements (quote (("size" "CDATA" "#REQUIRED") ("id" "ID" "#IMPLIED") ("color" "CDATA" "#IMPLIED") ("face" "CDATA" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "basefont")) (terminal-ast-node "basefont" attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BDO</b> double tag element (I18N BiDi over-ride ). <br>
;; .parameter contents The contents of the BDO element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "bdo" "surface.html#bdo"
;; .reference "HTML documentation" "BDO" "../../../html-doc/html401/struct/dirlang.html#edef-BDO"
;; .misc Required attributes: dir. <p>Optional attributes: id, class, style, title, lang. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:bdo contents  . attributes) (let ((attributes-of-elements (quote (("dir" ("ltr" "rtl") "#REQUIRED") ("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED")))) (req-n 1)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "bdo")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "bdo")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "bdo" " - " "We embed 'false' in a double tag"))) (internal-ast-node "bdo" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SPAN</b> double tag element (generic language/style container ). <br>
;; .parameter contents The contents of the SPAN element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "span" "surface.html#span"
;; .reference "HTML documentation" "SPAN" "../../../html-doc/html401/struct/global.html#edef-SPAN"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:span contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "span")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "span")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "span" " - " "We embed 'false' in a double tag"))) (internal-ast-node "span" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SUB</b> double tag element (subscript, superscript ). <br>
;; .parameter contents The contents of the SUB element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "sub" "surface.html#sub"
;; .reference "HTML documentation" "SUB" "../../../html-doc/html401/struct/text.html#edef-SUB"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:sub contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "sub")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "sub")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "sub" " - " "We embed 'false' in a double tag"))) (internal-ast-node "sub" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SUP</b> double tag element (subscript, superscript ). <br>
;; .parameter contents The contents of the SUP element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "sup" "surface.html#sup"
;; .reference "HTML documentation" "SUP" "../../../html-doc/html401/struct/text.html#edef-SUP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:sup contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "sup")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "sup")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "sup" " - " "We embed 'false' in a double tag"))) (internal-ast-node "sup" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>TT</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the TT element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "tt" "surface.html#tt"
;; .reference "HTML documentation" "TT" "../../../html-doc/html401/present/graphics.html#edef-TT"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:tt contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "tt")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "tt")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "tt" " - " "We embed 'false' in a double tag"))) (internal-ast-node "tt" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>I</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the I element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "i" "surface.html#i"
;; .reference "HTML documentation" "I" "../../../html-doc/html401/present/graphics.html#edef-I"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:i contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "i")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "i")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "i" " - " "We embed 'false' in a double tag"))) (internal-ast-node "i" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>B</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the B element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "b" "surface.html#b"
;; .reference "HTML documentation" "B" "../../../html-doc/html401/present/graphics.html#edef-B"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:b contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "b")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "b")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "b" " - " "We embed 'false' in a double tag"))) (internal-ast-node "b" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>U</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the U element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "u" "surface.html#u"
;; .reference "HTML documentation" "U" "../../../html-doc/html401/present/graphics.html#edef-U"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:u contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "u")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "u")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "u" " - " "We embed 'false' in a double tag"))) (internal-ast-node "u" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>S</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the S element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "s" "surface.html#s"
;; .reference "HTML documentation" "S" "../../../html-doc/html401/present/graphics.html#edef-S"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:s contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "s")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "s")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "s" " - " "We embed 'false' in a double tag"))) (internal-ast-node "s" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>STRIKE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the STRIKE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "strike" "surface.html#strike"
;; .reference "HTML documentation" "STRIKE" "../../../html-doc/html401/present/graphics.html#edef-STRIKE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:strike contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "strike")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "strike")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "strike" " - " "We embed 'false' in a double tag"))) (internal-ast-node "strike" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>BIG</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the BIG element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "big" "surface.html#big"
;; .reference "HTML documentation" "BIG" "../../../html-doc/html401/present/graphics.html#edef-BIG"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:big contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "big")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "big")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "big" " - " "We embed 'false' in a double tag"))) (internal-ast-node "big" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SMALL</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the SMALL element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "small" "surface.html#small"
;; .reference "HTML documentation" "SMALL" "../../../html-doc/html401/present/graphics.html#edef-SMALL"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:small contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "small")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "small")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "small" " - " "We embed 'false' in a double tag"))) (internal-ast-node "small" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>EM</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the EM element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "em" "surface.html#em"
;; .reference "HTML documentation" "EM" "../../../html-doc/html401/struct/text.html#edef-EM"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:em contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "em")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "em")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "em" " - " "We embed 'false' in a double tag"))) (internal-ast-node "em" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>STRONG</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the STRONG element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "strong" "surface.html#strong"
;; .reference "HTML documentation" "STRONG" "../../../html-doc/html401/struct/text.html#edef-STRONG"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:strong contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "strong")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "strong")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "strong" " - " "We embed 'false' in a double tag"))) (internal-ast-node "strong" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>DFN</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the DFN element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "dfn" "surface.html#dfn"
;; .reference "HTML documentation" "DFN" "../../../html-doc/html401/struct/text.html#edef-DFN"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:dfn contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "dfn")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "dfn")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "dfn" " - " "We embed 'false' in a double tag"))) (internal-ast-node "dfn" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>CODE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the CODE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "code" "surface.html#code"
;; .reference "HTML documentation" "CODE" "../../../html-doc/html401/struct/text.html#edef-CODE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:code contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "code")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "code")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "code" " - " "We embed 'false' in a double tag"))) (internal-ast-node "code" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>SAMP</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the SAMP element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "samp" "surface.html#samp"
;; .reference "HTML documentation" "SAMP" "../../../html-doc/html401/struct/text.html#edef-SAMP"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:samp contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "samp")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "samp")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "samp" " - " "We embed 'false' in a double tag"))) (internal-ast-node "samp" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>KBD</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the KBD element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "kbd" "surface.html#kbd"
;; .reference "HTML documentation" "KBD" "../../../html-doc/html401/struct/text.html#edef-KBD"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:kbd contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "kbd")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "kbd")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "kbd" " - " "We embed 'false' in a double tag"))) (internal-ast-node "kbd" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>VAR</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the VAR element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "var" "surface.html#var"
;; .reference "HTML documentation" "VAR" "../../../html-doc/html401/struct/text.html#edef-VAR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:var contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "var")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "var")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "var" " - " "We embed 'false' in a double tag"))) (internal-ast-node "var" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>CITE</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the CITE element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "cite" "surface.html#cite"
;; .reference "HTML documentation" "CITE" "../../../html-doc/html401/struct/text.html#edef-CITE"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:cite contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "cite")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "cite")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "cite" " - " "We embed 'false' in a double tag"))) (internal-ast-node "cite" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>ABBR</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the ABBR element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "abbr" "surface.html#abbr"
;; .reference "HTML documentation" "ABBR" "../../../html-doc/html401/struct/text.html#edef-ABBR"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:abbr contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "abbr")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "abbr")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "abbr" " - " "We embed 'false' in a double tag"))) (internal-ast-node "abbr" contents attributes)))

;; The LAML mirror of the HTML 4.01 (transitional) <b>ACRONYM</b> double tag element (<em>no explanation available</em>). <br>
;; .parameter contents The contents of the ACRONYM element - a list of content elements (strings, sub-elements, space suppress, or lists of these).
;; .parameter attributes HTML and CSS attribute value pairs on  Lisp property list format. Attribute names must be symbols; CSS attributes: 'css:name. Attribute values must be strings.
;; .returns An instance of an abstract syntaxt tree.
;; .reference "similar surface form" "acronym" "surface.html#acronym"
;; .reference "HTML documentation" "ACRONYM" "../../../html-doc/html401/struct/text.html#edef-ACRONYM"
;; .misc No required attributes. <p>Optional attributes: id, class, style, title, lang, dir, onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup. <br><p><font size = 2>Content model: (#pcdata | tt | i | b | u | s | strike | big | small | em | strong | dfn | code | samp | kbd | var | cite | abbr | acronym | a | img | applet | object | font | basefont | br | script | map | q | sub | sup | span | bdo | iframe | input | select | textarea | label | button)*</font>
(define (html4:acronym contents  . attributes) (let ((attributes-of-elements (quote (("id" "ID" "#IMPLIED") ("class" "CDATA" "#IMPLIED") ("style" "CDATA" "#IMPLIED") ("title" "CDATA" "#IMPLIED") ("lang" "NAME" "#IMPLIED") ("dir" ("ltr" "rtl") "#IMPLIED") ("onclick" "CDATA" "#IMPLIED") ("ondblclick" "CDATA" "#IMPLIED") ("onmousedown" "CDATA" "#IMPLIED") ("onmouseup" "CDATA" "#IMPLIED") ("onmouseover" "CDATA" "#IMPLIED") ("onmousemove" "CDATA" "#IMPLIED") ("onmouseout" "CDATA" "#IMPLIED") ("onkeypress" "CDATA" "#IMPLIED") ("onkeydown" "CDATA" "#IMPLIED") ("onkeyup" "CDATA" "#IMPLIED")))) (req-n 0)) (if check-html-attributes? (check-attributes! attributes attributes-of-elements req-n "acronym")) (if validate-html? (validate-contents! contents (zero-or-more "#pcdata" "tt" "i" "b" "u" "s" "strike" "big" "small" "em" "strong" "dfn" "code" "samp" "kbd" "var" "cite" "abbr" "acronym" "a" "img" "applet" "object" "font" "basefont" "br" "script" "map" "q" "sub" "sup" "span" "bdo" "iframe" "input" "select" "textarea" "label" "button") "acronym")) (if (not contents) (display-warning (string-append "Cannot generate a single tag for " "acronym" " - " "We embed 'false' in a double tag"))) (internal-ast-node "acronym" contents attributes)))

