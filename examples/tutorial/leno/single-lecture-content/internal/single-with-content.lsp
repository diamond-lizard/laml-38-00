((easy-section (section-title #f ("The easy section") ())) (first-page (title #f ("The first page" "Title annotation of the first page") ()) (point #f ("We have now started the <em>real authoring process</em>." "We did this by <b>M-x</b> <kbd>leno-insert-point,</kbd> or from the LENO Emacs menu: ' <kbd>Insert Point</kbd> '") ()) (items #f ((item #f ("This is an item" "It is also possible to make the item from the Emacs LENO menu, \n                 using 'Insert items' or 'Insert simple items'." (items #f ((item #f ("with a single subitem" "") ())) ())) ()) (item #f ("We made it with <kbd>M-x leno-insert-items</kbd>." "" (items #f ((item #f ("The <kbd>leno-insert-items</kbd> prompts us for the number of \n                 items and the number of subitems" "") ())) ())) ())) ()) (concept-list #f ((concept #f ("programmatic authoring" "By programmatic authoring we mean authoring of documents \n                        via use of  programmaing programming expressions" "In LENO we use programmatic authoring.") ((concept-name . "programmatic authoring")))) ()) (opposing #f ((item #f ("<b>LENO</b>" "<b>Latex</b>") ()) (item #f ("Programmatic authoring in Scheme" "Authoring in a TeX language") ())) ())) (graphics-page (title #f ("A page with graphics" "We will now make a page with a graphical image") ()) (image #f ("first-image.gif" "The first image - the most basic form of the image clause.  \n     The first-image.gif file must be located in  \n     the graphics and graphics/small directories." (vertical picture)) ((src . "first-image.gif"))) (image #f ("second-image.gif" "Another graphics example using the image clause. \n     In this example we use a few attributes of\n     the image mirror function." (vertical text picture)) ((margin-top . "3cm") (src . "second-image.gif") (alignment . "vertical") (first . "text") (second . "picture")))) (source-program-page (title #f ("A page with a source program" "LENO is often used for teaching material about programming.\n            Therefore the source-program LENO element is important.") ()) (source-program #f ("/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm" ("(define (negate" ")))") (("negate" "" "blue" bold 1) ("(if" "#t)" "red" italic 1) ("lambda" "" "purple" bold 1)) (slide-inline book-external) "The negate function. This function is really from the SchemeDoc part of the LAML tutorial." #f #t "" "source-program" #t) ((src . "/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm") (from-mark . "(define (negate") (to-mark . ")))") (slide-mode . "inline") (book-mode . "external"))) (source-program #f ("/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm" (";; Calculate the factorial" ")))))") (("fac " "" "red" bold 2)) (slide-inline book-inline) "The fac function. This is the classical recursive edition of fac." #f #t "" "source-program" #t) ((src . "/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm") (from-mark . ";; Calculate the factorial") (to-mark . ")))))") (slide-mode . "inline") (book-mode . "inline"))) (source-program #f ("/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm" ("(define (fib" "))))))") (("fib " "" "red" bold 3)) (slide-external book-external) "The fib function. This is the classical recursive edition of fib, which is very time consuming." #f #t "" "source-program" #t) ((src . "/user/normark/scheme/examples/tutorial/leno/single-lecture-content/../../schemedoc/prog3.scm") (from-mark . "(define (fib") (to-mark . "))))))") (slide-mode . "external") (book-mode . "external")))))