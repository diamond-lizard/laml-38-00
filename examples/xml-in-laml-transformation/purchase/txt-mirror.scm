; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it your self prior to the loading of this file.

(define txt-xml-transliterate-character-data? #t)
(define txt-xml-char-transformation-table html-char-transformation-table)
(define txt-xml-non-transliteration-elements '())
(define txt-xml-preformatted-text-elements '())
(define txt-xml-pass-default-dtd-attributes? #f)
(define txt-xml-accept-only-string-valued-attributes? #t)
(define txt-xml-accept-extended-contents? #f)
(define txt-xml-document-type-declaration "")
(define txt-xml-represent-white-space? #t)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (text-txt-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("count" "CDATA" "#IMPLIED")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "text"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "text")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (text)) "text"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function text-txt-laml-validate! "text" (quote ()) (quote double) (quote txt) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "text" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function text-txt-laml-validate! "text" (quote ()) (quote double) (quote txt) #t #f))
(define text temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote txt) temp-language-map)

; Define the language variable
(define txt (activator-via-language-map (quote txt)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote txt) (quote (xml-navigator #((text #(text) #(count))))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote txt) (vector (list "text" text-txt-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote txt) (quote #(("text" (mixed-content (choice pcdata text))))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote txt) (vector))

