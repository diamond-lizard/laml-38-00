; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it your self prior to the loading of this file.

(define purchases-xml-transliterate-character-data? #t)
(define purchases-xml-char-transformation-table html-char-transformation-table)
(define purchases-xml-non-transliteration-elements '())
(define purchases-xml-preformatted-text-elements '())
(define purchases-xml-pass-default-dtd-attributes? #f)
(define purchases-xml-accept-only-string-valued-attributes? #t)
(define purchases-xml-accept-extended-contents? #f)
(define purchases-xml-document-type-declaration "")
(define purchases-xml-represent-white-space? #t)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (purchase-purchases-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((p  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "purchase"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "purchase")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "purchase"))))

(define (p-purchases-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "p"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "p")) (if xml-validate-contents? (validate-as-pcdata! contents "p"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function purchase-purchases-laml-validate! "purchase" (quote ()) (quote double) (quote purchases) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "purchase" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function purchase-purchases-laml-validate! "purchase" (quote ()) (quote double) (quote purchases) #t #t))
(define purchase temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function p-purchases-laml-validate! "p" (quote ()) (quote double) (quote purchases) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "p" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function p-purchases-laml-validate! "p" (quote ()) (quote double) (quote purchases) #t #f))
(define p temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote purchases) temp-language-map)

; Define the language variable
(define purchases (activator-via-language-map (quote purchases)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote purchases) (quote (xml-navigator #((p #(p) #()) (purchase #(p purchase) #())))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote purchases) (vector (list "p" p-purchases-laml-validate!) (list "purchase" purchase-purchases-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote purchases) (quote #(("p" (mixed-content pcdata)) ("purchase" (element-content (seq one (name zero-or-more p)))))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote purchases) (vector (list "purchase" (lambda (ast) (purchase! ast)))))

