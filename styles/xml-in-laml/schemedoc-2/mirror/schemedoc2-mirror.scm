; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define schemedoc2-xml-transliterate-character-data? #t)
(define schemedoc2-xml-char-transformation-table html-char-transformation-table)
(define schemedoc2-xml-non-transliteration-elements '())
(define schemedoc2-xml-preformatted-text-elements '())
(define schemedoc2-xml-pass-default-dtd-attributes? #f)
(define schemedoc2-xml-accept-only-string-valued-attributes? #t)
(define schemedoc2-xml-accept-extended-contents? #f)
(define schemedoc2-xml-document-type-declaration "")
(define schemedoc2-xml-represent-white-space? #t)
(define schemedoc2-xml-duplicated-attribute-handling 'keep-all)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (manual-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (8) #((0 b 1) (1 c 2) (1 d 3) (1 e 4) (1 f 5) (1 g 6) (1 h 7) (1 i 8) (2 c 2) (2 d 3) (2 h 7) (2 i 8) (3 c 2) (3 d 3) (3 h 7) (3 i 8) (4 i 8) (5 i 8) (6 i 8) (7 i 8)) #((manual-from-scheme-file  . f) (manual-from-scheme-files  . e) (manual-from-xml-dtd  . g) (manual-front-matters  . b) (manual-page  . c) (manual-section  . d) (merged-manual-from-xml-dtd  . h) (terminator$$  . i)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual"))))

(define (manual-from-scheme-files-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 b 2) (1 c 3) (2 b 2) (2 c 3)) #((manual-from-scheme-file  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-from-scheme-files"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-from-scheme-files")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-from-scheme-files"))))

(define (manual-front-matters-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("laml-resource" ("true" "false") "false") ("verbosity-level" "CDATA" "0") ("documentation-commenting-style" ("multi-semicolon" "documentation-mark") "multi-semicolon") ("default-attribute-explanation" "CDATA" "#IMPLIED") ("source-destination-delta" "CDATA" "#IMPLIED") ("css-prestylesheet" "CDATA" "#IMPLIED") ("css-stylesheet" "CDATA" "#IMPLIED") ("css-stylesheet-copying" ("true" "false") "true") ("make-dtd-manual-template" ("true" "false") "false") ("keep-syntactical-comment-file" ("true" "false") "false") ("manual-destination-name" "CDATA" "#IMPLIED") ("mirror-names-defined" ("true" "false") "true") ("mirror-name-prefix" "CDATA" "") ("attribute-sorting" ("as-in-dtd" "by-attribute-name") "as-in-dtd") ("scheme-source-linking" ("true" "false") "false") ("scheme-report-version" ("r4rs" "r5rs" "none") "r5rs") ("rnrs-url" "CDATA" "#IMPLIED") ("xml-protected-descriptions" ("true" "false") "true") ("example-repository" "CDATA" "#IMPLIED") ("element-cross-reference-url-fn" "CDATA" "#IMPLIED") ("element-cross-reference-anchor-text" "CDATA" "#IMPLIED")))) (req-n 0) (dfa (quote (finite-state-automaton 0 (6) #((0 b 1) (0 c 2) (0 d 3) (0 e 4) (0 f 5) (0 g 6) (1 c 2) (1 d 3) (1 e 4) (1 f 5) (1 g 6) (2 d 3) (2 e 4) (2 f 5) (2 g 6) (3 e 4) (3 f 5) (3 g 6) (4 f 5) (4 g 6) (5 f 5) (5 g 6)) #((manual-abstract  . e) (manual-affiliation  . d) (manual-author  . c) (manual-title  . b) (scheme-source-linking-manual  . f) (terminator$$  . g)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-front-matters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-front-matters")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-front-matters"))))

(define (scheme-source-linking-manual-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("key" "CDATA" "#REQUIRED") ("file-path" "CDATA" "#REQUIRED") ("url" "CDATA" "#IMPLIED")))) (req-n 2)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "scheme-source-linking-manual"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "scheme-source-linking-manual")) (if xml-validate-contents? (validate-as-pcdata! contents "scheme-source-linking-manual"))))

(define (manual-title-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-title")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "manual-title"))))

(define (manual-author-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-author"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-author")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "manual-author"))))

(define (manual-affiliation-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-affiliation"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-affiliation")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "manual-affiliation"))))

(define (manual-abstract-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-abstract"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-abstract")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "manual-abstract"))))

(define (manual-from-scheme-file-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "manual-from-scheme-file") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-from-scheme-file"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-from-scheme-file"))))

(define (manual-from-xml-dtd-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "manual-from-xml-dtd") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-from-xml-dtd"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-from-xml-dtd"))))

(define (merged-manual-from-xml-dtd-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "merged-manual-from-xml-dtd") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "merged-manual-from-xml-dtd"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "merged-manual-from-xml-dtd"))))

(define (manual-page-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (14) #((0 b 1) (0 c 2) (0 d 3) (0 e 4) (0 f 5) (0 g 6) (0 h 7) (0 i 8) (0 j 9) (0 k 10) (0 l 11) (0 m 12) (0 n 13) (0 o 14) (1 b 1) (1 c 2) (1 d 3) (1 e 4) (1 f 5) (1 g 6) (1 h 7) (1 i 8) (1 j 9) (1 k 10) (1 l 11) (1 m 12) (1 n 13) (1 o 14) (2 b 1) (2 c 2) (2 d 3) (2 e 4) (2 f 5) (2 g 6) (2 h 7) (2 i 8) (2 j 9) (2 k 10) (2 l 11) (2 m 12) (2 n 13) (2 o 14) (3 b 1) (3 c 2) (3 d 3) (3 e 4) (3 f 5) (3 g 6) (3 h 7) (3 i 8) (3 j 9) (3 k 10) (3 l 11) (3 m 12) (3 n 13) (3 o 14) (4 b 1) (4 c 2) (4 d 3) (4 e 4) (4 f 5) (4 g 6) (4 h 7) (4 i 8) (4 j 9) (4 k 10) (4 l 11) (4 m 12) (4 n 13) (4 o 14) (5 b 1) (5 c 2) (5 d 3) (5 e 4) (5 f 5) (5 g 6) (5 h 7) (5 i 8) (5 j 9) (5 k 10) (5 l 11) (5 m 12) (5 n 13) (5 o 14) (6 b 1) (6 c 2) (6 d 3) (6 e 4) (6 f 5) (6 g 6) (6 h 7) (6 i 8) (6 j 9) (6 k 10) (6 l 11) (6 m 12) (6 n 13) (6 o 14) (7 b 1) (7 c 2) (7 d 3) (7 e 4) (7 f 5) (7 g 6) (7 h 7) (7 i 8) (7 j 9) (7 k 10) (7 l 11) (7 m 12) (7 n 13) (7 o 14) (8 b 1) (8 c 2) (8 d 3) (8 e 4) (8 f 5) (8 g 6) (8 h 7) (8 i 8) (8 j 9) (8 k 10) (8 l 11) (8 m 12) (8 n 13) (8 o 14) (9 b 1) (9 c 2) (9 d 3) (9 e 4) (9 f 5) (9 g 6) (9 h 7) (9 i 8) (9 j 9) (9 k 10) (9 l 11) (9 m 12) (9 n 13) (9 o 14) (10 b 1) (10 c 2) (10 d 3) (10 e 4) (10 f 5) (10 g 6) (10 h 7) (10 i 8) (10 j 9) (10 k 10) (10 l 11) (10 m 12) (10 n 13) (10 o 14) (11 b 1) (11 c 2) (11 d 3) (11 e 4) (11 f 5) (11 g 6) (11 h 7) (11 i 8) (11 j 9) (11 k 10) (11 l 11) (11 m 12) (11 n 13) (11 o 14) (12 b 1) (12 c 2) (12 d 3) (12 e 4) (12 f 5) (12 g 6) (12 h 7) (12 i 8) (12 j 9) (12 k 10) (12 l 11) (12 m 12) (12 n 13) (12 o 14) (13 b 1) (13 c 2) (13 d 3) (13 e 4) (13 f 5) (13 g 6) (13 h 7) (13 i 8) (13 j 9) (13 k 10) (13 l 11) (13 m 12) (13 n 13) (13 o 14)) #((attribute-descriptions  . n) (comment  . k) (description  . c) (example-form  . d) (examples  . h) (external-reference  . i) (form  . b) (internal-references  . j) (misc  . l) (parameters  . g) (postcondition  . f) (precondition  . e) (returns  . m) (terminator$$  . o)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-page"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-page")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-page"))))

(define (form-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "form"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "form")) (if xml-validate-contents? (validate-as-pcdata! contents "form"))))

(define (description-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "description"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "description")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "description"))))

(define (example-form-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "example-form"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "example-form")) (if xml-validate-contents? (validate-as-pcdata! contents "example-form"))))

(define (precondition-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "precondition"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "precondition")) (if xml-validate-contents? (validate-as-pcdata! contents "precondition"))))

(define (postcondition-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "postcondition"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "postcondition")) (if xml-validate-contents? (validate-as-pcdata! contents "postcondition"))))

(define (parameters-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((parameter  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "parameters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "parameters")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "parameters"))))

(define (parameter-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "parameter"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "parameter")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "parameter"))))

(define (examples-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((example  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "examples"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "examples")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "examples"))))

(define (example-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "example"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "example")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "example"))))

(define (external-reference-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("href" "CDATA" "#REQUIRED") ("category" "CDATA" "#REQUIRED")))) (req-n 2)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "external-reference"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "external-reference")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "external-reference"))))

(define (internal-references-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("category" "CDATA" "#REQUIRED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((name-ref  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "internal-references"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "internal-references")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "internal-references"))))

(define (name-ref-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "name-ref"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "name-ref")) (if xml-validate-contents? (validate-as-pcdata! contents "name-ref"))))

(define (comment-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "comment"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "comment")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "comment"))))

(define (misc-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "misc"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "misc")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "misc"))))

(define (returns-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "returns"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "returns")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "returns"))))

(define (attribute-descriptions-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((attribute-description  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "attribute-descriptions"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "attribute-descriptions")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "attribute-descriptions"))))

(define (attribute-description-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "attribute-description"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "attribute-description")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "attribute-description"))))

(define (manual-section-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("id" "CDATA" "#REQUIRED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 c 2) (1 d 3) (2 d 3)) #((section-body  . c) (section-title  . b) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-section"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-section")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-section"))))

(define (section-title-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "section-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "section-title")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "section-title"))))

(define (section-body-schemedoc2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "section-body"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "section-body")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "section-body"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function manual-schemedoc2-laml-validate! "manual" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-schemedoc2-laml-validate! "manual" (quote ()) (quote double) (quote schemedoc2) #t #t))
(define manual temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-from-scheme-files-schemedoc2-laml-validate! "manual-from-scheme-files" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-from-scheme-files" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-from-scheme-files-schemedoc2-laml-validate! "manual-from-scheme-files" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-from-scheme-files temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-front-matters-schemedoc2-laml-validate! "manual-front-matters" (quote (laml-resource "false" verbosity-level "0" documentation-commenting-style "multi-semicolon" css-stylesheet-copying "true" make-dtd-manual-template "false" keep-syntactical-comment-file "false" mirror-names-defined "true" mirror-name-prefix "" attribute-sorting "as-in-dtd" scheme-source-linking "false" scheme-report-version "r5rs" xml-protected-descriptions "true")) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-front-matters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-front-matters-schemedoc2-laml-validate! "manual-front-matters" (quote (laml-resource "false" verbosity-level "0" documentation-commenting-style "multi-semicolon" css-stylesheet-copying "true" make-dtd-manual-template "false" keep-syntactical-comment-file "false" mirror-names-defined "true" mirror-name-prefix "" attribute-sorting "as-in-dtd" scheme-source-linking "false" scheme-report-version "r5rs" xml-protected-descriptions "true")) (quote double) (quote schemedoc2) #t #f))
(define manual-front-matters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function scheme-source-linking-manual-schemedoc2-laml-validate! "scheme-source-linking-manual" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "scheme-source-linking-manual" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function scheme-source-linking-manual-schemedoc2-laml-validate! "scheme-source-linking-manual" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define scheme-source-linking-manual temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-title-schemedoc2-laml-validate! "manual-title" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-title-schemedoc2-laml-validate! "manual-title" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-author-schemedoc2-laml-validate! "manual-author" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-author" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-author-schemedoc2-laml-validate! "manual-author" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-author temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-affiliation-schemedoc2-laml-validate! "manual-affiliation" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-affiliation" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-affiliation-schemedoc2-laml-validate! "manual-affiliation" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-affiliation temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-abstract-schemedoc2-laml-validate! "manual-abstract" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-abstract" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-abstract-schemedoc2-laml-validate! "manual-abstract" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-abstract temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-from-scheme-file-schemedoc2-laml-validate! "manual-from-scheme-file" (quote ()) (quote single) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-from-scheme-file" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-from-scheme-file-schemedoc2-laml-validate! "manual-from-scheme-file" (quote ()) (quote single) (quote schemedoc2) #t #f))
(define manual-from-scheme-file temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-from-xml-dtd-schemedoc2-laml-validate! "manual-from-xml-dtd" (quote ()) (quote single) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-from-xml-dtd" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-from-xml-dtd-schemedoc2-laml-validate! "manual-from-xml-dtd" (quote ()) (quote single) (quote schemedoc2) #t #f))
(define manual-from-xml-dtd temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function merged-manual-from-xml-dtd-schemedoc2-laml-validate! "merged-manual-from-xml-dtd" (quote ()) (quote single) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "merged-manual-from-xml-dtd" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function merged-manual-from-xml-dtd-schemedoc2-laml-validate! "merged-manual-from-xml-dtd" (quote ()) (quote single) (quote schemedoc2) #t #f))
(define merged-manual-from-xml-dtd temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-page-schemedoc2-laml-validate! "manual-page" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-page" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-page-schemedoc2-laml-validate! "manual-page" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-page temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function form-schemedoc2-laml-validate! "form" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "form" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function form-schemedoc2-laml-validate! "form" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define form temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function description-schemedoc2-laml-validate! "description" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "description" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function description-schemedoc2-laml-validate! "description" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define description temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function example-form-schemedoc2-laml-validate! "example-form" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "example-form" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function example-form-schemedoc2-laml-validate! "example-form" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define example-form temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function precondition-schemedoc2-laml-validate! "precondition" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "precondition" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function precondition-schemedoc2-laml-validate! "precondition" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define precondition temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function postcondition-schemedoc2-laml-validate! "postcondition" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "postcondition" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function postcondition-schemedoc2-laml-validate! "postcondition" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define postcondition temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function parameters-schemedoc2-laml-validate! "parameters" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "parameters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function parameters-schemedoc2-laml-validate! "parameters" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define parameters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function parameter-schemedoc2-laml-validate! "parameter" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "parameter" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function parameter-schemedoc2-laml-validate! "parameter" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define parameter temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function examples-schemedoc2-laml-validate! "examples" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "examples" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function examples-schemedoc2-laml-validate! "examples" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define examples temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function example-schemedoc2-laml-validate! "example" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "example" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function example-schemedoc2-laml-validate! "example" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define example temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function external-reference-schemedoc2-laml-validate! "external-reference" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "external-reference" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function external-reference-schemedoc2-laml-validate! "external-reference" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define external-reference temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function internal-references-schemedoc2-laml-validate! "internal-references" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "internal-references" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function internal-references-schemedoc2-laml-validate! "internal-references" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define internal-references temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function name-ref-schemedoc2-laml-validate! "name-ref" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "name-ref" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function name-ref-schemedoc2-laml-validate! "name-ref" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define name-ref temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function comment-schemedoc2-laml-validate! "comment" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "comment" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function comment-schemedoc2-laml-validate! "comment" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define comment temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function misc-schemedoc2-laml-validate! "misc" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "misc" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function misc-schemedoc2-laml-validate! "misc" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define misc temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function returns-schemedoc2-laml-validate! "returns" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "returns" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function returns-schemedoc2-laml-validate! "returns" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define returns temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function attribute-descriptions-schemedoc2-laml-validate! "attribute-descriptions" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "attribute-descriptions" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function attribute-descriptions-schemedoc2-laml-validate! "attribute-descriptions" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define attribute-descriptions temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function attribute-description-schemedoc2-laml-validate! "attribute-description" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "attribute-description" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function attribute-description-schemedoc2-laml-validate! "attribute-description" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define attribute-description temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-section-schemedoc2-laml-validate! "manual-section" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-section" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-section-schemedoc2-laml-validate! "manual-section" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define manual-section temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function section-title-schemedoc2-laml-validate! "section-title" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "section-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function section-title-schemedoc2-laml-validate! "section-title" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define section-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function section-body-schemedoc2-laml-validate! "section-body" (quote ()) (quote double) (quote schemedoc2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "section-body" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function section-body-schemedoc2-laml-validate! "section-body" (quote ()) (quote double) (quote schemedoc2) #t #f))
(define section-body temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote schemedoc2) temp-language-map)

; Define the language variable
(define schemedoc2 (activator-via-language-map (quote schemedoc2)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote schemedoc2) (quote (xml-navigator #((attribute-description #(attribute-description div span) #(name)) (attribute-descriptions #(attribute-description attribute-descriptions div span) #(name)) (comment #(comment div span) #()) (description #(description div span) #()) (example #(div example span) #()) (example-form #(example-form) #()) (examples #(div example examples span) #()) (external-reference #(div external-reference span) #(category href)) (form #(form) #()) (internal-references #(internal-references name-ref) #(category)) (manual #(attribute-description attribute-descriptions comment description div example example-form examples external-reference form internal-references manual manual-abstract manual-affiliation manual-author manual-from-scheme-file manual-from-scheme-files manual-from-xml-dtd manual-front-matters manual-page manual-section manual-title merged-manual-from-xml-dtd misc name-ref parameter parameters postcondition precondition returns scheme-source-linking-manual section-body section-title span) #(attribute-sorting category css-prestylesheet css-stylesheet css-stylesheet-copying default-attribute-explanation documentation-commenting-style element-cross-reference-anchor-text element-cross-reference-url-fn example-repository file-path href id keep-syntactical-comment-file key laml-resource make-dtd-manual-template manual-destination-name mirror-name-prefix mirror-names-defined name rnrs-url scheme-report-version scheme-source-linking source-destination-delta src url verbosity-level xml-protected-descriptions)) (manual-abstract #(div manual-abstract span) #()) (manual-affiliation #(div manual-affiliation span) #()) (manual-author #(div manual-author span) #()) (manual-from-scheme-file #(manual-from-scheme-file) #(src)) (manual-from-scheme-files #(manual-from-scheme-file manual-from-scheme-files) #(src)) (manual-from-xml-dtd #(manual-from-xml-dtd) #(src)) (manual-front-matters #(div manual-abstract manual-affiliation manual-author manual-front-matters manual-title scheme-source-linking-manual span) #(attribute-sorting css-prestylesheet css-stylesheet css-stylesheet-copying default-attribute-explanation documentation-commenting-style element-cross-reference-anchor-text element-cross-reference-url-fn example-repository file-path keep-syntactical-comment-file key laml-resource make-dtd-manual-template manual-destination-name mirror-name-prefix mirror-names-defined rnrs-url scheme-report-version scheme-source-linking source-destination-delta url verbosity-level xml-protected-descriptions)) (manual-page #(attribute-description attribute-descriptions comment description div example example-form examples external-reference form internal-references manual-page misc name-ref parameter parameters postcondition precondition returns span) #(category href name)) (manual-section #(div manual-section section-body section-title span) #(id)) (manual-title #(div manual-title span) #()) (merged-manual-from-xml-dtd #(merged-manual-from-xml-dtd) #(src)) (misc #(div misc span) #()) (name-ref #(name-ref) #()) (parameter #(div parameter span) #(name)) (parameters #(div parameter parameters span) #(name)) (postcondition #(postcondition) #()) (precondition #(precondition) #()) (returns #(div returns span) #()) (scheme-source-linking-manual #(scheme-source-linking-manual) #(file-path key url)) (section-body #(div section-body span) #()) (section-title #(div section-title span) #())))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote schemedoc2) (vector (list "attribute-description" attribute-description-schemedoc2-laml-validate!) (list "attribute-descriptions" attribute-descriptions-schemedoc2-laml-validate!) (list "comment" comment-schemedoc2-laml-validate!) (list "description" description-schemedoc2-laml-validate!) (list "example" example-schemedoc2-laml-validate!) (list "example-form" example-form-schemedoc2-laml-validate!) (list "examples" examples-schemedoc2-laml-validate!) (list "external-reference" external-reference-schemedoc2-laml-validate!) (list "form" form-schemedoc2-laml-validate!) (list "internal-references" internal-references-schemedoc2-laml-validate!) (list "manual" manual-schemedoc2-laml-validate!) (list "manual-abstract" manual-abstract-schemedoc2-laml-validate!) (list "manual-affiliation" manual-affiliation-schemedoc2-laml-validate!) (list "manual-author" manual-author-schemedoc2-laml-validate!) (list "manual-from-scheme-file" manual-from-scheme-file-schemedoc2-laml-validate!) (list "manual-from-scheme-files" manual-from-scheme-files-schemedoc2-laml-validate!) (list "manual-from-xml-dtd" manual-from-xml-dtd-schemedoc2-laml-validate!) (list "manual-front-matters" manual-front-matters-schemedoc2-laml-validate!) (list "manual-page" manual-page-schemedoc2-laml-validate!) (list "manual-section" manual-section-schemedoc2-laml-validate!) (list "manual-title" manual-title-schemedoc2-laml-validate!) (list "merged-manual-from-xml-dtd" merged-manual-from-xml-dtd-schemedoc2-laml-validate!) (list "misc" misc-schemedoc2-laml-validate!) (list "name-ref" name-ref-schemedoc2-laml-validate!) (list "parameter" parameter-schemedoc2-laml-validate!) (list "parameters" parameters-schemedoc2-laml-validate!) (list "postcondition" postcondition-schemedoc2-laml-validate!) (list "precondition" precondition-schemedoc2-laml-validate!) (list "returns" returns-schemedoc2-laml-validate!) (list "scheme-source-linking-manual" scheme-source-linking-manual-schemedoc2-laml-validate!) (list "section-body" section-body-schemedoc2-laml-validate!) (list "section-title" section-title-schemedoc2-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote schemedoc2) (quote #(("attribute-description" (mixed-content (choice pcdata div span))) ("attribute-descriptions" (element-content (seq one (name zero-or-more attribute-description)))) ("comment" (mixed-content (choice pcdata div span))) ("description" (mixed-content (choice pcdata div span))) ("example" (mixed-content (choice pcdata div span))) ("example-form" (mixed-content pcdata)) ("examples" (element-content (seq one (name zero-or-more example)))) ("external-reference" (mixed-content (choice pcdata div span))) ("form" (mixed-content pcdata)) ("internal-references" (element-content (seq one (name zero-or-more name-ref)))) ("manual" (element-content (seq one (name one manual-front-matters) (choice one (choice zero-or-more (name one manual-page) (name one manual-section)) (name one manual-from-scheme-files) (name one manual-from-scheme-file) (name one manual-from-xml-dtd) (seq one (choice zero-or-more (name one manual-page) (name one manual-section)) (name one merged-manual-from-xml-dtd)))))) ("manual-abstract" (mixed-content (choice pcdata div span))) ("manual-affiliation" (mixed-content (choice pcdata div span))) ("manual-author" (mixed-content (choice pcdata div span))) ("manual-from-scheme-file" empty) ("manual-from-scheme-files" (element-content (seq one (name one-or-more manual-from-scheme-file)))) ("manual-from-xml-dtd" empty) ("manual-front-matters" (element-content (seq one (name optional manual-title) (name optional manual-author) (name optional manual-affiliation) (name optional manual-abstract) (name zero-or-more scheme-source-linking-manual)))) ("manual-page" (element-content (choice zero-or-more (name one form) (name one description) (name one example-form) (name one precondition) (name one postcondition) (name one parameters) (name one examples) (name one external-reference) (name one internal-references) (name one comment) (name one misc) (name one returns) (name one attribute-descriptions)))) ("manual-section" (element-content (seq one (name one section-title) (name optional section-body)))) ("manual-title" (mixed-content (choice pcdata div span))) ("merged-manual-from-xml-dtd" empty) ("misc" (mixed-content (choice pcdata div span))) ("name-ref" (mixed-content pcdata)) ("parameter" (mixed-content (choice pcdata div span))) ("parameters" (element-content (seq one (name zero-or-more parameter)))) ("postcondition" (mixed-content pcdata)) ("precondition" (mixed-content pcdata)) ("returns" (mixed-content (choice pcdata div span))) ("scheme-source-linking-manual" (mixed-content pcdata)) ("section-body" (mixed-content (choice pcdata div span))) ("section-title" (mixed-content (choice pcdata div span))))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote schemedoc2) (vector (list "manual" (lambda (ast) (manual! ast)))))

