; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define laml-photo-xml-transliterate-character-data? #t)
(define laml-photo-xml-char-transformation-table html-char-transformation-table)
(define laml-photo-xml-non-transliteration-elements '())
(define laml-photo-xml-preformatted-text-elements '())
(define laml-photo-xml-pass-default-dtd-attributes? #f)
(define laml-photo-xml-accept-only-string-valued-attributes? #t)
(define laml-photo-xml-accept-extended-contents? #f)
(define laml-photo-xml-document-type-declaration "")
(define laml-photo-xml-represent-white-space? #t)
(define laml-photo-xml-duplicated-attribute-handling 'keep-all)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (photo-show-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("time" "CDATA" "#REQUIRED") ("background-color" "CDATA" "#IMPLIED") ("text-color" "CDATA" "#IMPLIED") ("home-path" "CDATA" "#IMPLIED") ("previous-film" "CDATA" "#IMPLIED") ("next-film" "CDATA" "#IMPLIED") ("before-first" ("last-picture" "previous-film" "none") "last-picture") ("after-last" ("first-picture" "next-film" "stop-page" "none") "first-picture") ("transition" ("blend" "none") "none") ("verbosity-level" "CDATA" "2") ("language" ("danish" "english") "english") ("html-mode" ("raw" "pp") "raw") ("index-linking" ("run" "stop") "stop") ("default-size" ("original" "auto" "explicit") "auto") ("default-orientation" ("portrait" "landscape") "landscape") ("portrait-percentage" "CDATA" "90") ("landscape-percentage" "CDATA" "95") ("photo-displacement-left" "CDATA" "0") ("photo-displacement-right" "CDATA" "0") ("tabular-overview-dimension" "CDATA" "3") ("photo-tabular-window-width" "CDATA" "870") ("photo-tabular-window-height" "CDATA" "740") ("copy-film" ("true" "false") "false") ("copy-destination" "CDATA" "#IMPLIED") ("shave-resize-and-copy" ("true" "false") "false") ("shave-width" "CDATA" "0") ("shave-height" "CDATA" "0") ("resize-width" "CDATA" "0") ("resize-height" "CDATA" "0") ("camera" "CDATA" "Canon-G3") ("image-transformation-software" ("image-magick" "none") "none") ("make-thumbnails-of" ("all" "non-existing" "none") "none") ("time-stamp" ("auto" "from-file-system" "from-jpg-file" "none") "auto") ("time-stamp-presentation" ("date" "weekday-date" "time" "date-time" "weekday-date-time" "none") "date-time") ("rotate" "CDATA" "#IMPLIED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (6) #((0 b 1) (1 c 2) (2 d 3) (3 e 4) (3 f 5) (4 g 6) (5 g 6)) #((lower-caption  . d) (photo-list  . e) (photos-in-current-directory  . f) (terminator$$  . g) (title-of-show  . b) (upper-caption  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "photo-show"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "photo-show")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "photo-show"))))

(define (title-of-show-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "title-of-show"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "title-of-show")) (if xml-validate-contents? (validate-as-pcdata! contents "title-of-show"))))

(define (upper-caption-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("size" "CDATA" "#IMPLIED")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "upper-caption"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "upper-caption")) (if xml-validate-contents? (validate-as-pcdata! contents "upper-caption"))))

(define (lower-caption-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("size" "CDATA" "#IMPLIED")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "lower-caption"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "lower-caption")) (if xml-validate-contents? (validate-as-pcdata! contents "lower-caption"))))

(define (photo-list-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((photo  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "photo-list"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "photo-list")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "photo-list"))))

(define (photo-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("file" "CDATA" "#REQUIRED") ("path" "CDATA" "") ("time" "CDATA" "#IMPLIED") ("transition" ("blend" "none") "none") ("size" ("original" "auto" "explicit") "auto") ("orientation" ("portrait" "landscape") "landscape") ("width" "CDATA" "#IMPLIED") ("height" "CDATA" "#IMPLIED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (0 c 2) (0 d 3) (1 c 2) (1 d 3) (2 d 3)) #((lower-caption  . c) (terminator$$  . d) (upper-caption  . b)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "photo"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "photo")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "photo"))))

(define (photos-in-current-directory-laml-photo-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "photos-in-current-directory") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "photos-in-current-directory"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "photos-in-current-directory"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function photo-show-laml-photo-laml-validate! "photo-show" (quote (before-first "last-picture" after-last "first-picture" transition "none" verbosity-level "2" language "english" html-mode "raw" index-linking "stop" default-size "auto" default-orientation "landscape" portrait-percentage "90" landscape-percentage "95" photo-displacement-left "0" photo-displacement-right "0" tabular-overview-dimension "3" photo-tabular-window-width "870" photo-tabular-window-height "740" copy-film "false" shave-resize-and-copy "false" shave-width "0" shave-height "0" resize-width "0" resize-height "0" camera "Canon-G3" image-transformation-software "none" make-thumbnails-of "none" time-stamp "auto" time-stamp-presentation "date-time")) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "photo-show" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function photo-show-laml-photo-laml-validate! "photo-show" (quote (before-first "last-picture" after-last "first-picture" transition "none" verbosity-level "2" language "english" html-mode "raw" index-linking "stop" default-size "auto" default-orientation "landscape" portrait-percentage "90" landscape-percentage "95" photo-displacement-left "0" photo-displacement-right "0" tabular-overview-dimension "3" photo-tabular-window-width "870" photo-tabular-window-height "740" copy-film "false" shave-resize-and-copy "false" shave-width "0" shave-height "0" resize-width "0" resize-height "0" camera "Canon-G3" image-transformation-software "none" make-thumbnails-of "none" time-stamp "auto" time-stamp-presentation "date-time")) (quote double) (quote laml-photo) #t #t))
(define photo-show temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function title-of-show-laml-photo-laml-validate! "title-of-show" (quote ()) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "title-of-show" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function title-of-show-laml-photo-laml-validate! "title-of-show" (quote ()) (quote double) (quote laml-photo) #t #f))
(define title-of-show temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function upper-caption-laml-photo-laml-validate! "upper-caption" (quote ()) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "upper-caption" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function upper-caption-laml-photo-laml-validate! "upper-caption" (quote ()) (quote double) (quote laml-photo) #t #f))
(define upper-caption temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function lower-caption-laml-photo-laml-validate! "lower-caption" (quote ()) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "lower-caption" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function lower-caption-laml-photo-laml-validate! "lower-caption" (quote ()) (quote double) (quote laml-photo) #t #f))
(define lower-caption temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function photo-list-laml-photo-laml-validate! "photo-list" (quote ()) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "photo-list" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function photo-list-laml-photo-laml-validate! "photo-list" (quote ()) (quote double) (quote laml-photo) #t #f))
(define photo-list temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function photo-laml-photo-laml-validate! "photo" (quote (path "" transition "none" size "auto" orientation "landscape")) (quote double) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "photo" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function photo-laml-photo-laml-validate! "photo" (quote (path "" transition "none" size "auto" orientation "landscape")) (quote double) (quote laml-photo) #t #f))
(define photo temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function photos-in-current-directory-laml-photo-laml-validate! "photos-in-current-directory" (quote ()) (quote single) (quote laml-photo) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "photos-in-current-directory" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function photos-in-current-directory-laml-photo-laml-validate! "photos-in-current-directory" (quote ()) (quote single) (quote laml-photo) #t #f))
(define photos-in-current-directory temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote laml-photo) temp-language-map)

; Define the language variable
(define laml-photo (activator-via-language-map (quote laml-photo)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote laml-photo) (quote (xml-navigator #((lower-caption #(lower-caption) #(size)) (photo #(lower-caption photo upper-caption) #(file height orientation path size time transition width)) (photo-list #(lower-caption photo photo-list upper-caption) #(file height orientation path size time transition width)) (photo-show #(lower-caption photo photo-list photo-show photos-in-current-directory title-of-show upper-caption) #(after-last background-color before-first camera copy-destination copy-film default-orientation default-size file height home-path html-mode image-transformation-software index-linking landscape-percentage language make-thumbnails-of next-film orientation path photo-displacement-left photo-displacement-right photo-tabular-window-height photo-tabular-window-width portrait-percentage previous-film resize-height resize-width rotate shave-height shave-resize-and-copy shave-width size tabular-overview-dimension text-color time time-stamp time-stamp-presentation transition verbosity-level width)) (photos-in-current-directory #(photos-in-current-directory) #()) (title-of-show #(title-of-show) #()) (upper-caption #(upper-caption) #(size))))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote laml-photo) (vector (list "lower-caption" lower-caption-laml-photo-laml-validate!) (list "photo" photo-laml-photo-laml-validate!) (list "photo-list" photo-list-laml-photo-laml-validate!) (list "photo-show" photo-show-laml-photo-laml-validate!) (list "photos-in-current-directory" photos-in-current-directory-laml-photo-laml-validate!) (list "title-of-show" title-of-show-laml-photo-laml-validate!) (list "upper-caption" upper-caption-laml-photo-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote laml-photo) (quote #(("lower-caption" (mixed-content pcdata)) ("photo" (element-content (seq one (name optional upper-caption) (name optional lower-caption)))) ("photo-list" (element-content (seq one (name zero-or-more photo)))) ("photo-show" (element-content (seq one (name one title-of-show) (name one upper-caption) (name one lower-caption) (choice one (name one photo-list) (name one photos-in-current-directory))))) ("photos-in-current-directory" empty) ("title-of-show" (mixed-content pcdata)) ("upper-caption" (mixed-content pcdata)))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote laml-photo) (vector (list "photo-show" (lambda (ast) (photo-show! ast)))))

