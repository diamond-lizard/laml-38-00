; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define schemedoc-index-xml-transliterate-character-data? #t)
(define schemedoc-index-xml-char-transformation-table html-char-transformation-table)
(define schemedoc-index-xml-non-transliteration-elements '())
(define schemedoc-index-xml-preformatted-text-elements '())
(define schemedoc-index-xml-pass-default-dtd-attributes? #f)
(define schemedoc-index-xml-accept-only-string-valued-attributes? #t)
(define schemedoc-index-xml-accept-extended-contents? #f)
(define schemedoc-index-xml-document-type-declaration "")
(define schemedoc-index-xml-represent-white-space? #f)
(define schemedoc-index-xml-duplicated-attribute-handling 'keep-all)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (manual-index-schemedoc-index-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 c 2) (2 d 3)) #((manual-index-contributions  . c) (manual-index-front-matters  . b) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-index"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-index")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-index"))))

(define (manual-index-front-matters-schemedoc-index-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("browser-type" ("one-step" "two-steps") "one-step") ("left-frame-width" "CDATA" "#IMPLIED") ("top-frame-height" "CDATA" "#IMPLIED") ("initial-manual-frame" ("blank" "info" "first-manual-contribution") "info") ("source-destination-delta" "CDATA" "html/") ("scheme-report-version" ("r4rs" "r5rs") "r5rs") ("scheme-report" ("none" "include" "merge") "none")))) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (1 c 2)) #((manual-index-title  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-index-front-matters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-index-front-matters")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-index-front-matters"))))

(define (manual-index-title-schemedoc-index-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-index-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-index-title")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (div span)) "manual-index-title"))))

(define (manual-index-contributions-schemedoc-index-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((manual-index-contribution  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-index-contributions"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-index-contributions")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "manual-index-contributions"))))

(define (manual-index-contribution-schemedoc-index-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("informative-name" "CDATA" "#IMPLIED") ("path" "CDATA" "#IMPLIED") ("manual-file-path" "CDATA" "#IMPLIED") ("manual-url-path" "CDATA" "#IMPLIED")))) (req-n 0)) (xml-check-for-empty-contents! contents "manual-index-contribution") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-index-contribution"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-index-contribution"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function manual-index-schemedoc-index-laml-validate! "manual-index" (quote ()) (quote double) (quote schemedoc-index) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-index" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-index-schemedoc-index-laml-validate! "manual-index" (quote ()) (quote double) (quote schemedoc-index) #t #t))
(define manual-index temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-index-front-matters-schemedoc-index-laml-validate! "manual-index-front-matters" (quote (browser-type "one-step" initial-manual-frame "info" source-destination-delta "html/" scheme-report-version "r5rs" scheme-report "none")) (quote double) (quote schemedoc-index) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-index-front-matters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-index-front-matters-schemedoc-index-laml-validate! "manual-index-front-matters" (quote (browser-type "one-step" initial-manual-frame "info" source-destination-delta "html/" scheme-report-version "r5rs" scheme-report "none")) (quote double) (quote schemedoc-index) #t #f))
(define manual-index-front-matters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-index-title-schemedoc-index-laml-validate! "manual-index-title" (quote ()) (quote double) (quote schemedoc-index) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-index-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-index-title-schemedoc-index-laml-validate! "manual-index-title" (quote ()) (quote double) (quote schemedoc-index) #t #f))
(define manual-index-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-index-contributions-schemedoc-index-laml-validate! "manual-index-contributions" (quote ()) (quote double) (quote schemedoc-index) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-index-contributions" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-index-contributions-schemedoc-index-laml-validate! "manual-index-contributions" (quote ()) (quote double) (quote schemedoc-index) #t #f))
(define manual-index-contributions temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-index-contribution-schemedoc-index-laml-validate! "manual-index-contribution" (quote ()) (quote single) (quote schemedoc-index) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-index-contribution" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-index-contribution-schemedoc-index-laml-validate! "manual-index-contribution" (quote ()) (quote single) (quote schemedoc-index) #t #f))
(define manual-index-contribution temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote schemedoc-index) temp-language-map)

; Define the language variable
(define schemedoc-index (activator-via-language-map (quote schemedoc-index)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote schemedoc-index) (quote (xml-navigator #((manual-index #(div manual-index manual-index-contribution manual-index-contributions manual-index-front-matters manual-index-title span) #(browser-type informative-name initial-manual-frame left-frame-width manual-file-path manual-url-path path scheme-report scheme-report-version source-destination-delta top-frame-height)) (manual-index-contribution #(manual-index-contribution) #(informative-name manual-file-path manual-url-path path)) (manual-index-contributions #(manual-index-contribution manual-index-contributions) #(informative-name manual-file-path manual-url-path path)) (manual-index-front-matters #(div manual-index-front-matters manual-index-title span) #(browser-type initial-manual-frame left-frame-width scheme-report scheme-report-version source-destination-delta top-frame-height)) (manual-index-title #(div manual-index-title span) #())))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote schemedoc-index) (vector (list "manual-index" manual-index-schemedoc-index-laml-validate!) (list "manual-index-contribution" manual-index-contribution-schemedoc-index-laml-validate!) (list "manual-index-contributions" manual-index-contributions-schemedoc-index-laml-validate!) (list "manual-index-front-matters" manual-index-front-matters-schemedoc-index-laml-validate!) (list "manual-index-title" manual-index-title-schemedoc-index-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote schemedoc-index) (quote #(("manual-index" (element-content (seq one (name one manual-index-front-matters) (name one manual-index-contributions)))) ("manual-index-contribution" empty) ("manual-index-contributions" (element-content (seq one (name zero-or-more manual-index-contribution)))) ("manual-index-front-matters" (element-content (seq one (name one manual-index-title)))) ("manual-index-title" (mixed-content (choice pcdata div span))))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote schemedoc-index) (vector (list "manual-index" (lambda (ast) (manual-index! ast)))))

