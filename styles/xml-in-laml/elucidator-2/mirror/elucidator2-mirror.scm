; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define elucidator2-xml-transliterate-character-data? #t)
(define elucidator2-xml-char-transformation-table html-char-transformation-table)
(define elucidator2-xml-non-transliteration-elements '())
(define elucidator2-xml-preformatted-text-elements '())
(define elucidator2-xml-pass-default-dtd-attributes? #f)
(define elucidator2-xml-accept-only-string-valued-attributes? #t)
(define elucidator2-xml-accept-extended-contents? #f)
(define elucidator2-xml-document-type-declaration "")
(define elucidator2-xml-represent-white-space? #t)
(define elucidator2-xml-duplicated-attribute-handling 'keep-first)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (documentation-from-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("src" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "documentation-from") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "documentation-from"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "documentation-from"))))

(define (elucidator-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (6) #((0 b 1) (1 c 2) (2 d 3) (2 e 4) (3 f 7) (3 g 8) (3 h 5) (4 h 5) (5 i 6) (7 f 7) (7 g 8) (7 h 5) (8 f 7) (8 g 8) (8 h 5)) #((begin-documentation  . c) (documentation-entry  . g) (documentation-from  . e) (documentation-intro  . d) (documentation-section  . f) (elucidator-front-matters  . b) (end-documentation  . h) (terminator$$  . i)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "elucidator"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "elucidator")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "elucidator"))))

(define (documentation-intro-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (6) #((0 b 1) (1 c 2) (2 d 3) (3 e 4) (4 f 5) (5 g 6)) #((doc-abstract  . f) (doc-affiliation  . d) (doc-author  . c) (doc-email  . e) (doc-title  . b) (terminator$$  . g)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "documentation-intro"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "documentation-intro")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "documentation-intro"))))

(define (elucidator-front-matters-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("laml-resource" ("true" "false") "false") ("table-of-contents" ("detailed" "shallow") "detailed") ("shallow-table-of-contents-columns" "CDATA" "3") ("detailed-table-of-contents-columns" "CDATA" "2") ("source-marker-presentation" ("image" "text" "colored-text") "image") ("source-marker-char" "CDATA" "@") ("source-markers-in-program" ("show-all" "show-documented" "ignore") "show-documented") ("browser-pixel-width" "CDATA" "1100") ("control-frame-pixel-height" "CDATA" "130") ("home-url" "CDATA" "#IMPLIED") ("next-url" "CDATA" "#IMPLIED") ("previous-url" "CDATA" "#IMPLIED") ("scheme-report-version" ("r4rs" "r5rs" "none") "r5rs") ("rnrs-url" "CDATA" "#IMPLIED") ("cross-reference-index" ("per-letter" "aggregated" "none") "per-letter") ("defined-name-index" ("per-letter" "aggregated" "none") "per-letter") ("duplicated-name-index" ("true" "false") "true") ("initial-program-frame" ("blank" "first-source-file") "first-source-file") ("large-font-source-file" ("true" "false") "false") ("small-font-source-file" ("true" "false") "true") ("default-source-file-font-size" ("small" "large") "small") ("program-menu" ("inline-table" "separate-frame" "none") "separate-frame") ("manual-frame-from-program" ("documentation-frame" "program-frame" "other") "documentation-frame") ("manual-frame-from-documentation" ("documentation-frame" "program-frame" "other") "program-frame") ("documentation-escape-char" "CDATA" "#IMPLIED") ("program-link-prefix-char" "CDATA" "#IMPLIED") ("program-link-suffix-char" "CDATA" "#IMPLIED") ("documentation-link-prefix-char" "CDATA" "#IMPLIED") ("documentation-link-suffix-char" "CDATA" "#IMPLIED") ("strong-link-char" "CDATA" "#IMPLIED") ("weak-link-char" "CDATA" "#IMPLIED") ("none-link-char" "CDATA" "#IMPLIED") ("default-program-link" ("weak" "strong" "none") "weak") ("author-mode" ("true" "false") "false") ("processing-mode" ("silent" "verbose") "verbose") ("warn-if-no-doc-source-marker" ("true" "false") "false") ("warn-if-multiple-doc-source-markers" ("true" "false") "true") ("source-destination-delta" "CDATA" "html/") ("css-documentation-stylesheet" "CDATA" "documentation") ("css-program-stylesheet" "CDATA" "program") ("render-doc-comments" ("true" "false") "true")))) (req-n 0) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (0 c 2) (1 c 2) (2 d 3)) #((color-scheme  . b) (source-files  . c) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "elucidator-front-matters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "elucidator-front-matters")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "elucidator-front-matters"))))

(define (doc-title-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-title")) (if xml-validate-contents? (validate-as-pcdata! contents "doc-title"))))

(define (doc-author-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-author"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-author")) (if xml-validate-contents? (validate-as-pcdata! contents "doc-author"))))

(define (doc-affiliation-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-affiliation"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-affiliation")) (if xml-validate-contents? (validate-as-pcdata! contents "doc-affiliation"))))

(define (doc-email-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-email"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-email")) (if xml-validate-contents? (validate-as-pcdata! contents "doc-email"))))

(define (doc-abstract-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-abstract"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-abstract")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var)) "doc-abstract"))))

(define (color-scheme-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (2) #((0 b 1) (0 c 2) (1 b 1) (1 c 2)) #((color-entry  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "color-scheme"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "color-scheme")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "color-scheme"))))

(define (color-entry-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("group" "CDATA" "#REQUIRED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (0 c 2) (1 d 3) (2 d 3)) #((new-rgb-color  . b) (predefined-color  . c) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "color-entry"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "color-entry")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "color-entry"))))

(define (new-rgb-color-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("red" "CDATA" "#REQUIRED") ("green" "CDATA" "#REQUIRED") ("blue" "CDATA" "#REQUIRED")))) (req-n 3)) (xml-check-for-empty-contents! contents "new-rgb-color") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "new-rgb-color"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "new-rgb-color"))))

(define (predefined-color-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "predefined-color"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "predefined-color")) (if xml-validate-contents? (validate-as-pcdata! contents "predefined-color"))))

(define (source-files-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (4) #((0 b 1) (0 c 2) (0 d 3) (0 e 4) (1 b 1) (1 c 2) (1 d 3) (1 e 4) (2 b 1) (2 c 2) (2 d 3) (2 e 4) (3 b 1) (3 c 2) (3 d 3) (3 e 4)) #((manual-source  . d) (program-source  . b) (terminator$$  . e) (version-group  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "source-files"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "source-files")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "source-files"))))

(define (program-source-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("file-path" "CDATA" "#REQUIRED") ("key" "CDATA" "#IMPLIED") ("language" "CDATA" "#IMPLIED") ("group" "CDATA" "#IMPLIED") ("process" ("true" "false") "true")))) (req-n 1)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "program-source"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "program-source")) (if xml-validate-contents? (validate-as-pcdata! contents "program-source"))))

(define (manual-source-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("key" "CDATA" "#REQUIRED") ("file-path" "CDATA" "#REQUIRED") ("url" "CDATA" "#IMPLIED")))) (req-n 2)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "manual-source"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "manual-source")) (if xml-validate-contents? (validate-as-pcdata! contents "manual-source"))))

(define (version-group-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("key" "CDATA" "#REQUIRED") ("group" "CDATA" "#IMPLIED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 b 2) (1 c 3) (2 b 2) (2 c 3)) #((program-source  . b) (terminator$$  . c)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "version-group"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "version-group")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "version-group"))))

(define (begin-documentation-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "begin-documentation") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "begin-documentation"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "begin-documentation"))))

(define (end-documentation-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "end-documentation") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "end-documentation"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "end-documentation"))))

(define (documentation-section-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("id" "CDATA" "#REQUIRED") ("program-version" "CDATA" "#IMPLIED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 c 2) (2 d 3)) #((section-body  . c) (section-title  . b) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "documentation-section"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "documentation-section")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "documentation-section"))))

(define (documentation-entry-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("id" "CDATA" "#REQUIRED") ("program-version" "CDATA" "#IMPLIED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (3) #((0 b 1) (1 c 2) (2 d 3)) #((entry-body  . c) (entry-title  . b) (terminator$$  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "documentation-entry"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "documentation-entry")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "documentation-entry"))))

(define (section-title-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "section-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "section-title")) (if xml-validate-contents? (validate-as-pcdata! contents "section-title"))))

(define (entry-title-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "entry-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "entry-title")) (if xml-validate-contents? (validate-as-pcdata! contents "entry-title"))))

(define (section-body-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("body-style" ("normal" "grey" "small" "grey-small") "normal")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "section-body"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "section-body")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var)) "section-body"))))

(define (entry-body-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("body-style" ("normal" "grey" "small") "normal")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "entry-body"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "entry-body")) (if xml-validate-contents? (validate-mixed-contents-by-simple-means! contents (quote (a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var)) "entry-body"))))

(define (strong-prog-ref-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("file" "CDATA" "#IMPLIED") ("vers" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("file-part" "CDATA" "#IMPLIED")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "strong-prog-ref"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "strong-prog-ref")) (if xml-validate-contents? (validate-as-pcdata! contents "strong-prog-ref"))))

(define (weak-prog-ref-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("file" "CDATA" "#IMPLIED") ("vers" "CDATA" "#IMPLIED") ("name" "CDATA" "#IMPLIED") ("file-part" "CDATA" "#IMPLIED")))) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "weak-prog-ref"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "weak-prog-ref")) (if xml-validate-contents? (validate-as-pcdata! contents "weak-prog-ref"))))

(define (typographic-prog-ref-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "typographic-prog-ref") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "typographic-prog-ref"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "typographic-prog-ref"))))

(define (doc-ref-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "doc-ref") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "doc-ref"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "doc-ref"))))

(define (source-marker-elucidator2-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("name" "CDATA" "#REQUIRED")))) (req-n 1)) (xml-check-for-empty-contents! contents "source-marker") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "source-marker"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "source-marker"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function documentation-from-elucidator2-laml-validate! "documentation-from" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "documentation-from" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function documentation-from-elucidator2-laml-validate! "documentation-from" (quote ()) (quote single) (quote elucidator2) #t #t))
(define documentation-from temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function elucidator-elucidator2-laml-validate! "elucidator" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "elucidator" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function elucidator-elucidator2-laml-validate! "elucidator" (quote ()) (quote double) (quote elucidator2) #t #f))
(define elucidator temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function documentation-intro-elucidator2-laml-validate! "documentation-intro" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "documentation-intro" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function documentation-intro-elucidator2-laml-validate! "documentation-intro" (quote ()) (quote double) (quote elucidator2) #t #t))
(define documentation-intro temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function elucidator-front-matters-elucidator2-laml-validate! "elucidator-front-matters" (quote (laml-resource "false" table-of-contents "detailed" shallow-table-of-contents-columns "3" detailed-table-of-contents-columns "2" source-marker-presentation "image" source-marker-char "@" source-markers-in-program "show-documented" browser-pixel-width "1100" control-frame-pixel-height "130" scheme-report-version "r5rs" cross-reference-index "per-letter" defined-name-index "per-letter" duplicated-name-index "true" initial-program-frame "first-source-file" large-font-source-file "false" small-font-source-file "true" default-source-file-font-size "small" program-menu "separate-frame" manual-frame-from-program "documentation-frame" manual-frame-from-documentation "program-frame" default-program-link "weak" author-mode "false" processing-mode "verbose" warn-if-no-doc-source-marker "false" warn-if-multiple-doc-source-markers "true" source-destination-delta "html/" css-documentation-stylesheet "documentation" css-program-stylesheet "program" render-doc-comments "true")) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "elucidator-front-matters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function elucidator-front-matters-elucidator2-laml-validate! "elucidator-front-matters" (quote (laml-resource "false" table-of-contents "detailed" shallow-table-of-contents-columns "3" detailed-table-of-contents-columns "2" source-marker-presentation "image" source-marker-char "@" source-markers-in-program "show-documented" browser-pixel-width "1100" control-frame-pixel-height "130" scheme-report-version "r5rs" cross-reference-index "per-letter" defined-name-index "per-letter" duplicated-name-index "true" initial-program-frame "first-source-file" large-font-source-file "false" small-font-source-file "true" default-source-file-font-size "small" program-menu "separate-frame" manual-frame-from-program "documentation-frame" manual-frame-from-documentation "program-frame" default-program-link "weak" author-mode "false" processing-mode "verbose" warn-if-no-doc-source-marker "false" warn-if-multiple-doc-source-markers "true" source-destination-delta "html/" css-documentation-stylesheet "documentation" css-program-stylesheet "program" render-doc-comments "true")) (quote double) (quote elucidator2) #t #t))
(define elucidator-front-matters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-title-elucidator2-laml-validate! "doc-title" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-title-elucidator2-laml-validate! "doc-title" (quote ()) (quote double) (quote elucidator2) #t #f))
(define doc-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-author-elucidator2-laml-validate! "doc-author" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-author" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-author-elucidator2-laml-validate! "doc-author" (quote ()) (quote double) (quote elucidator2) #t #f))
(define doc-author temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-affiliation-elucidator2-laml-validate! "doc-affiliation" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-affiliation" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-affiliation-elucidator2-laml-validate! "doc-affiliation" (quote ()) (quote double) (quote elucidator2) #t #f))
(define doc-affiliation temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-email-elucidator2-laml-validate! "doc-email" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-email" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-email-elucidator2-laml-validate! "doc-email" (quote ()) (quote double) (quote elucidator2) #t #f))
(define doc-email temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-abstract-elucidator2-laml-validate! "doc-abstract" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-abstract" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-abstract-elucidator2-laml-validate! "doc-abstract" (quote ()) (quote double) (quote elucidator2) #t #f))
(define doc-abstract temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function color-scheme-elucidator2-laml-validate! "color-scheme" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "color-scheme" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function color-scheme-elucidator2-laml-validate! "color-scheme" (quote ()) (quote double) (quote elucidator2) #t #f))
(define color-scheme temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function color-entry-elucidator2-laml-validate! "color-entry" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "color-entry" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function color-entry-elucidator2-laml-validate! "color-entry" (quote ()) (quote double) (quote elucidator2) #t #f))
(define color-entry temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function new-rgb-color-elucidator2-laml-validate! "new-rgb-color" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "new-rgb-color" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function new-rgb-color-elucidator2-laml-validate! "new-rgb-color" (quote ()) (quote single) (quote elucidator2) #t #f))
(define new-rgb-color temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function predefined-color-elucidator2-laml-validate! "predefined-color" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "predefined-color" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function predefined-color-elucidator2-laml-validate! "predefined-color" (quote ()) (quote double) (quote elucidator2) #t #f))
(define predefined-color temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function source-files-elucidator2-laml-validate! "source-files" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "source-files" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function source-files-elucidator2-laml-validate! "source-files" (quote ()) (quote double) (quote elucidator2) #t #f))
(define source-files temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function program-source-elucidator2-laml-validate! "program-source" (quote (process "true")) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "program-source" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function program-source-elucidator2-laml-validate! "program-source" (quote (process "true")) (quote double) (quote elucidator2) #t #f))
(define program-source temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function manual-source-elucidator2-laml-validate! "manual-source" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "manual-source" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function manual-source-elucidator2-laml-validate! "manual-source" (quote ()) (quote double) (quote elucidator2) #t #f))
(define manual-source temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function version-group-elucidator2-laml-validate! "version-group" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "version-group" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function version-group-elucidator2-laml-validate! "version-group" (quote ()) (quote double) (quote elucidator2) #t #f))
(define version-group temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function begin-documentation-elucidator2-laml-validate! "begin-documentation" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "begin-documentation" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function begin-documentation-elucidator2-laml-validate! "begin-documentation" (quote ()) (quote single) (quote elucidator2) #t #t))
(define begin-documentation temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function end-documentation-elucidator2-laml-validate! "end-documentation" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "end-documentation" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function end-documentation-elucidator2-laml-validate! "end-documentation" (quote ()) (quote single) (quote elucidator2) #t #t))
(define end-documentation temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function documentation-section-elucidator2-laml-validate! "documentation-section" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "documentation-section" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function documentation-section-elucidator2-laml-validate! "documentation-section" (quote ()) (quote double) (quote elucidator2) #t #t))
(define documentation-section temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function documentation-entry-elucidator2-laml-validate! "documentation-entry" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "documentation-entry" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function documentation-entry-elucidator2-laml-validate! "documentation-entry" (quote ()) (quote double) (quote elucidator2) #t #t))
(define documentation-entry temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function section-title-elucidator2-laml-validate! "section-title" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "section-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function section-title-elucidator2-laml-validate! "section-title" (quote ()) (quote double) (quote elucidator2) #t #f))
(define section-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function entry-title-elucidator2-laml-validate! "entry-title" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "entry-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function entry-title-elucidator2-laml-validate! "entry-title" (quote ()) (quote double) (quote elucidator2) #t #f))
(define entry-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function section-body-elucidator2-laml-validate! "section-body" (quote (body-style "normal")) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "section-body" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function section-body-elucidator2-laml-validate! "section-body" (quote (body-style "normal")) (quote double) (quote elucidator2) #t #f))
(define section-body temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function entry-body-elucidator2-laml-validate! "entry-body" (quote (body-style "normal")) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "entry-body" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function entry-body-elucidator2-laml-validate! "entry-body" (quote (body-style "normal")) (quote double) (quote elucidator2) #t #f))
(define entry-body temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function strong-prog-ref-elucidator2-laml-validate! "strong-prog-ref" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "strong-prog-ref" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function strong-prog-ref-elucidator2-laml-validate! "strong-prog-ref" (quote ()) (quote double) (quote elucidator2) #t #f))
(define strong-prog-ref temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function weak-prog-ref-elucidator2-laml-validate! "weak-prog-ref" (quote ()) (quote double) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "weak-prog-ref" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function weak-prog-ref-elucidator2-laml-validate! "weak-prog-ref" (quote ()) (quote double) (quote elucidator2) #t #f))
(define weak-prog-ref temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function typographic-prog-ref-elucidator2-laml-validate! "typographic-prog-ref" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "typographic-prog-ref" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function typographic-prog-ref-elucidator2-laml-validate! "typographic-prog-ref" (quote ()) (quote single) (quote elucidator2) #t #f))
(define typographic-prog-ref temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function doc-ref-elucidator2-laml-validate! "doc-ref" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "doc-ref" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function doc-ref-elucidator2-laml-validate! "doc-ref" (quote ()) (quote single) (quote elucidator2) #t #f))
(define doc-ref temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function source-marker-elucidator2-laml-validate! "source-marker" (quote ()) (quote single) (quote elucidator2) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "source-marker" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function source-marker-elucidator2-laml-validate! "source-marker" (quote ()) (quote single) (quote elucidator2) #t #f))
(define source-marker temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote elucidator2) temp-language-map)

; Define the language variable
(define elucidator2 (activator-via-language-map (quote elucidator2)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote elucidator2) (quote (xml-navigator #((begin-documentation #(begin-documentation) #()) (color-entry #(color-entry new-rgb-color predefined-color) #(blue green group red)) (color-scheme #(color-entry color-scheme new-rgb-color predefined-color) #(blue green group red)) (doc-abstract #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl doc-abstract em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var) #()) (doc-affiliation #(doc-affiliation) #()) (doc-author #(doc-author) #()) (doc-email #(doc-email) #()) (doc-ref #(doc-ref) #(name)) (doc-title #(doc-title) #()) (documentation-entry #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl documentation-entry em entry-body entry-title fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var) #(body-style id program-version)) (documentation-from #(documentation-from) #(src)) (documentation-intro #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl doc-abstract doc-affiliation doc-author doc-email doc-title documentation-intro em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var) #()) (documentation-section #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl documentation-section em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script section-body section-title select small span strike strong sub sup table textarea tt u ul var) #(body-style id program-version)) (elucidator #(a abbr acronym address applet b basefont bdo begin-documentation big blockquote br button center cite code color-entry color-scheme del dfn dir div dl doc-abstract doc-affiliation doc-author doc-email doc-title documentation-entry documentation-from documentation-intro documentation-section elucidator elucidator-front-matters em end-documentation entry-body entry-title fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label manual-source map menu new-rgb-color noframes noscript object ol p pre predefined-color program-source q s samp script section-body section-title select small source-files span strike strong sub sup table textarea tt u ul var version-group) #(author-mode blue body-style browser-pixel-width control-frame-pixel-height cross-reference-index css-documentation-stylesheet css-program-stylesheet default-program-link default-source-file-font-size defined-name-index detailed-table-of-contents-columns documentation-escape-char documentation-link-prefix-char documentation-link-suffix-char duplicated-name-index file-path green group home-url id initial-program-frame key laml-resource language large-font-source-file manual-frame-from-documentation manual-frame-from-program next-url none-link-char previous-url process processing-mode program-link-prefix-char program-link-suffix-char program-menu program-version red render-doc-comments rnrs-url scheme-report-version shallow-table-of-contents-columns small-font-source-file source-destination-delta source-marker-char source-marker-presentation source-markers-in-program src strong-link-char table-of-contents url warn-if-multiple-doc-source-markers warn-if-no-doc-source-marker weak-link-char)) (elucidator-front-matters #(color-entry color-scheme elucidator-front-matters manual-source new-rgb-color predefined-color program-source source-files version-group) #(author-mode blue browser-pixel-width control-frame-pixel-height cross-reference-index css-documentation-stylesheet css-program-stylesheet default-program-link default-source-file-font-size defined-name-index detailed-table-of-contents-columns documentation-escape-char documentation-link-prefix-char documentation-link-suffix-char duplicated-name-index file-path green group home-url initial-program-frame key laml-resource language large-font-source-file manual-frame-from-documentation manual-frame-from-program next-url none-link-char previous-url process processing-mode program-link-prefix-char program-link-suffix-char program-menu red render-doc-comments rnrs-url scheme-report-version shallow-table-of-contents-columns small-font-source-file source-destination-delta source-marker-char source-marker-presentation source-markers-in-program strong-link-char table-of-contents url warn-if-multiple-doc-source-markers warn-if-no-doc-source-marker weak-link-char)) (end-documentation #(end-documentation) #()) (entry-body #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em entry-body fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var) #(body-style)) (entry-title #(entry-title) #()) (manual-source #(manual-source) #(file-path key url)) (new-rgb-color #(new-rgb-color) #(blue green red)) (predefined-color #(predefined-color) #()) (program-source #(program-source) #(file-path group key language process)) (section-body #(a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script section-body select small span strike strong sub sup table textarea tt u ul var) #(body-style)) (section-title #(section-title) #()) (source-files #(manual-source program-source source-files version-group) #(file-path group key language process url)) (source-marker #(source-marker) #(name)) (strong-prog-ref #(strong-prog-ref) #(file file-part name vers)) (typographic-prog-ref #(typographic-prog-ref) #(name)) (version-group #(program-source version-group) #(file-path group key language process)) (weak-prog-ref #(weak-prog-ref) #(file file-part name vers))))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote elucidator2) (vector (list "begin-documentation" begin-documentation-elucidator2-laml-validate!) (list "color-entry" color-entry-elucidator2-laml-validate!) (list "color-scheme" color-scheme-elucidator2-laml-validate!) (list "doc-abstract" doc-abstract-elucidator2-laml-validate!) (list "doc-affiliation" doc-affiliation-elucidator2-laml-validate!) (list "doc-author" doc-author-elucidator2-laml-validate!) (list "doc-email" doc-email-elucidator2-laml-validate!) (list "doc-ref" doc-ref-elucidator2-laml-validate!) (list "doc-title" doc-title-elucidator2-laml-validate!) (list "documentation-entry" documentation-entry-elucidator2-laml-validate!) (list "documentation-from" documentation-from-elucidator2-laml-validate!) (list "documentation-intro" documentation-intro-elucidator2-laml-validate!) (list "documentation-section" documentation-section-elucidator2-laml-validate!) (list "elucidator" elucidator-elucidator2-laml-validate!) (list "elucidator-front-matters" elucidator-front-matters-elucidator2-laml-validate!) (list "end-documentation" end-documentation-elucidator2-laml-validate!) (list "entry-body" entry-body-elucidator2-laml-validate!) (list "entry-title" entry-title-elucidator2-laml-validate!) (list "manual-source" manual-source-elucidator2-laml-validate!) (list "new-rgb-color" new-rgb-color-elucidator2-laml-validate!) (list "predefined-color" predefined-color-elucidator2-laml-validate!) (list "program-source" program-source-elucidator2-laml-validate!) (list "section-body" section-body-elucidator2-laml-validate!) (list "section-title" section-title-elucidator2-laml-validate!) (list "source-files" source-files-elucidator2-laml-validate!) (list "source-marker" source-marker-elucidator2-laml-validate!) (list "strong-prog-ref" strong-prog-ref-elucidator2-laml-validate!) (list "typographic-prog-ref" typographic-prog-ref-elucidator2-laml-validate!) (list "version-group" version-group-elucidator2-laml-validate!) (list "weak-prog-ref" weak-prog-ref-elucidator2-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote elucidator2) (quote #(("begin-documentation" empty) ("color-entry" (element-content (choice one (name one new-rgb-color) (name one predefined-color)))) ("color-scheme" (element-content (seq zero-or-more (name one color-entry)))) ("doc-abstract" (mixed-content (choice pcdata a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var))) ("doc-affiliation" (mixed-content pcdata)) ("doc-author" (mixed-content pcdata)) ("doc-email" (mixed-content pcdata)) ("doc-ref" empty) ("doc-title" (mixed-content pcdata)) ("documentation-entry" (element-content (seq one (name one entry-title) (name one entry-body)))) ("documentation-from" empty) ("documentation-intro" (element-content (seq one (name one doc-title) (name one doc-author) (name one doc-affiliation) (name one doc-email) (name one doc-abstract)))) ("documentation-section" (element-content (seq one (name one section-title) (name one section-body)))) ("elucidator" (element-content (seq one (name one elucidator-front-matters) (name one begin-documentation) (choice one (seq one (name one documentation-intro) (choice zero-or-more (name one documentation-section) (name one documentation-entry))) (name one documentation-from)) (name one end-documentation)))) ("elucidator-front-matters" (element-content (seq one (name optional color-scheme) (name one source-files)))) ("end-documentation" empty) ("entry-body" (mixed-content (choice pcdata a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var))) ("entry-title" (mixed-content pcdata)) ("manual-source" (mixed-content pcdata)) ("new-rgb-color" empty) ("predefined-color" (mixed-content pcdata)) ("program-source" (mixed-content pcdata)) ("section-body" (mixed-content (choice pcdata a abbr acronym address applet b basefont bdo big blockquote br button center cite code del dfn dir div dl em fieldset font form h1 h2 h3 h4 h5 h6 hr i iframe img input ins isindex kbd label map menu noframes noscript object ol p pre q s samp script select small span strike strong sub sup table textarea tt u ul var))) ("section-title" (mixed-content pcdata)) ("source-files" (element-content (choice zero-or-more (name one program-source) (name one version-group) (name one manual-source)))) ("source-marker" empty) ("strong-prog-ref" (mixed-content pcdata)) ("typographic-prog-ref" empty) ("version-group" (element-content (seq one-or-more (name one program-source)))) ("weak-prog-ref" (mixed-content pcdata)))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote elucidator2) (vector (list "begin-documentation" (lambda (ast) (begin-documentation! ast))) (list "documentation-entry" (lambda (ast) (documentation-entry! ast))) (list "documentation-from" (lambda (ast) (documentation-from! ast))) (list "documentation-intro" (lambda (ast) (documentation-intro! ast))) (list "documentation-section" (lambda (ast) (documentation-section! ast))) (list "elucidator-front-matters" (lambda (ast) (elucidator-front-matters! ast))) (list "end-documentation" (lambda (ast) (end-documentation! ast)))))

