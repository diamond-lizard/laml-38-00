; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define leno-trail-1-xml-transliterate-character-data? #t)
(define leno-trail-1-xml-char-transformation-table html-char-transformation-table)
(define leno-trail-1-xml-non-transliteration-elements '())
(define leno-trail-1-xml-preformatted-text-elements '())
(define leno-trail-1-xml-pass-default-dtd-attributes? #f)
(define leno-trail-1-xml-accept-only-string-valued-attributes? #t)
(define leno-trail-1-xml-accept-extended-contents? #f)
(define leno-trail-1-xml-document-type-declaration "")
(define leno-trail-1-xml-represent-white-space? #f)
(define leno-trail-1-xml-duplicated-attribute-handling 'keep-all)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (leno-trail-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (5) #((0 b 1) (1 c 2) (2 d 3) (2 e 4) (3 d 3) (3 e 4) (4 f 5)) #((begin-trail  . c) (end-trail  . e) (leno-trail-front-matters  . b) (page-select  . d) (terminator$$  . f)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "leno-trail"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "leno-trail")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "leno-trail"))))

(define (leno-trail-front-matters-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("trail-id" "CDATA" "#REQUIRED") ("course-home-url" "CDATA" "#REQUIRED") ("scheme-prefix" "CDATA" "#IMPLIED") ("scheme-suffix" "CDATA" "#IMPLIED") ("language" ("danish" "english") "english")))) (req-n 2) (dfa (quote (finite-state-automaton 0 (5) #((0 b 1) (1 c 2) (2 d 3) (3 e 4) (4 f 5)) #((front-abstract  . e) (front-affiliation  . d) (front-author  . c) (front-title  . b) (terminator$$  . f)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "leno-trail-front-matters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "leno-trail-front-matters")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "leno-trail-front-matters"))))

(define (front-title-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "front-title"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "front-title")) (if xml-validate-contents? (validate-as-pcdata! contents "front-title"))))

(define (front-author-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "front-author"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "front-author")) (if xml-validate-contents? (validate-as-pcdata! contents "front-author"))))

(define (front-affiliation-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "front-affiliation"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "front-affiliation")) (if xml-validate-contents? (validate-as-pcdata! contents "front-affiliation"))))

(define (front-abstract-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "front-abstract"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "front-abstract")) (if xml-validate-contents? (validate-as-pcdata! contents "front-abstract"))))

(define (begin-trail-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "begin-trail") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "begin-trail"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "begin-trail"))))

(define (end-trail-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "end-trail") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "end-trail"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "end-trail"))))

(define (page-select-leno-trail-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("lecture-id" "CDATA" "#REQUIRED") ("page-id" "CDATA" "#REQUIRED")))) (req-n 2)) (xml-check-for-empty-contents! contents "page-select") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "page-select"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "page-select"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function leno-trail-leno-trail-1-laml-validate! "leno-trail" (quote ()) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "leno-trail" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function leno-trail-leno-trail-1-laml-validate! "leno-trail" (quote ()) (quote double) (quote leno-trail-1) #t #f))
(define leno-trail temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function leno-trail-front-matters-leno-trail-1-laml-validate! "leno-trail-front-matters" (quote (language "english")) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "leno-trail-front-matters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function leno-trail-front-matters-leno-trail-1-laml-validate! "leno-trail-front-matters" (quote (language "english")) (quote double) (quote leno-trail-1) #t #t))
(define leno-trail-front-matters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function front-title-leno-trail-1-laml-validate! "front-title" (quote ()) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "front-title" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function front-title-leno-trail-1-laml-validate! "front-title" (quote ()) (quote double) (quote leno-trail-1) #t #f))
(define front-title temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function front-author-leno-trail-1-laml-validate! "front-author" (quote ()) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "front-author" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function front-author-leno-trail-1-laml-validate! "front-author" (quote ()) (quote double) (quote leno-trail-1) #t #f))
(define front-author temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function front-affiliation-leno-trail-1-laml-validate! "front-affiliation" (quote ()) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "front-affiliation" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function front-affiliation-leno-trail-1-laml-validate! "front-affiliation" (quote ()) (quote double) (quote leno-trail-1) #t #f))
(define front-affiliation temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function front-abstract-leno-trail-1-laml-validate! "front-abstract" (quote ()) (quote double) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "front-abstract" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function front-abstract-leno-trail-1-laml-validate! "front-abstract" (quote ()) (quote double) (quote leno-trail-1) #t #f))
(define front-abstract temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function begin-trail-leno-trail-1-laml-validate! "begin-trail" (quote ()) (quote single) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "begin-trail" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function begin-trail-leno-trail-1-laml-validate! "begin-trail" (quote ()) (quote single) (quote leno-trail-1) #t #t))
(define begin-trail temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function end-trail-leno-trail-1-laml-validate! "end-trail" (quote ()) (quote single) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "end-trail" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function end-trail-leno-trail-1-laml-validate! "end-trail" (quote ()) (quote single) (quote leno-trail-1) #t #t))
(define end-trail temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function page-select-leno-trail-1-laml-validate! "page-select" (quote ()) (quote single) (quote leno-trail-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "page-select" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function page-select-leno-trail-1-laml-validate! "page-select" (quote ()) (quote single) (quote leno-trail-1) #t #t))
(define page-select temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote leno-trail-1) temp-language-map)

; Define the language variable
(define leno-trail-1 (activator-via-language-map (quote leno-trail-1)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote leno-trail-1) (quote (xml-navigator #((begin-trail #(begin-trail) #()) (end-trail #(end-trail) #()) (front-abstract #(front-abstract) #()) (front-affiliation #(front-affiliation) #()) (front-author #(front-author) #()) (front-title #(front-title) #()) (leno-trail #(begin-trail end-trail front-abstract front-affiliation front-author front-title leno-trail leno-trail-front-matters page-select) #(course-home-url language lecture-id page-id scheme-prefix scheme-suffix trail-id)) (leno-trail-front-matters #(front-abstract front-affiliation front-author front-title leno-trail-front-matters) #(course-home-url language scheme-prefix scheme-suffix trail-id)) (page-select #(page-select) #(lecture-id page-id))))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote leno-trail-1) (vector (list "begin-trail" begin-trail-leno-trail-1-laml-validate!) (list "end-trail" end-trail-leno-trail-1-laml-validate!) (list "front-abstract" front-abstract-leno-trail-1-laml-validate!) (list "front-affiliation" front-affiliation-leno-trail-1-laml-validate!) (list "front-author" front-author-leno-trail-1-laml-validate!) (list "front-title" front-title-leno-trail-1-laml-validate!) (list "leno-trail" leno-trail-leno-trail-1-laml-validate!) (list "leno-trail-front-matters" leno-trail-front-matters-leno-trail-1-laml-validate!) (list "page-select" page-select-leno-trail-1-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote leno-trail-1) (quote #(("begin-trail" empty) ("end-trail" empty) ("front-abstract" (mixed-content pcdata)) ("front-affiliation" (mixed-content pcdata)) ("front-author" (mixed-content pcdata)) ("front-title" (mixed-content pcdata)) ("leno-trail" (element-content (seq one (name one leno-trail-front-matters) (name one begin-trail) (name zero-or-more page-select) (name one end-trail)))) ("leno-trail-front-matters" (element-content (seq one (name one front-title) (name one front-author) (name one front-affiliation) (name one front-abstract)))) ("page-select" empty))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote leno-trail-1) (vector (list "begin-trail" (lambda (ast) (begin-trail! ast))) (list "end-trail" (lambda (ast) (end-trail! ast))) (list "leno-trail-front-matters" (lambda (ast) (leno-trail-front-matters! ast))) (list "page-select" (lambda (ast) (page-select! ast)))))

