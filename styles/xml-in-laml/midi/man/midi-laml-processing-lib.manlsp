(((title . "Midi Function Library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is a library of common MIDI manipulation functions.  It must be loaded together with the <a href= \"midi-mirror.html\">MIDI LAML mirror library</a>. ") (scheme-source-file . "/user/normark/scheme/styles/xml-in-laml/midi/midi-laml-processing-lib.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "Midi message predicates.") (section-body "") (section-id "midi-mes-predicates")) ((cross-references (reference "Scheme source file" "NoteOn?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#NoteOn?")) (kind "manual-page") (parameters (parameter "x" "Not constrained.")) (description "Is x a NoteOn midi message? ") (title "NoteOn?") (form (NoteOn? x))) ((cross-references (reference "Scheme source file" "NoteOnCh?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#NoteOnCh?")) (kind "manual-page") (parameters (parameter "channels" "A list of channel numbers (elements are integers between 1 and 16).")) (description "A higher-order function that returns a NoteOn predicate that only accepts NoteOn midi messages that belong to channels. ") (returns "A NoteOn predicate that accepts NoteOn midi messages in the the given channels.") (title "NoteOnCh?") (form (NoteOnCh? channels))) ((cross-references (reference "Scheme source file" "Meta?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#Meta?")) (kind "manual-page") (parameters (parameter "x" "Any data, but typically some midi AST.") (parameter "type" "A meta type attribute (an integer). If not provided, the type does not matter.")) (description "Is x a Meta midi message of type? ") (form "(Meta? x [type])") (title "Meta?")) ((cross-references (reference "Scheme source file" "ProgramChange?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#ProgramChange?")) (kind "manual-page") (parameters (parameter "x" "Any data, but typically some midi AST.") (parameter "channel" "A channel (an integer or string). If not provided, the channel does not matter.")) (description "Is x a ProgramChange midi message in channel? ") (form "(ProgramChange? x [channel])") (misc "Will never give a fatal error. The function returns #f in cases of problems. ") (title "ProgramChange?")) ((cross-references (reference "Scheme source file" "SysEx?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#SysEx?")) (kind "manual-page") (parameters (parameter "x" "Any data, but typically some midi AST.") (parameter "sys-ex-hex-string" "A hex string, such as \"08 43 10 4C 08 0C 00 01 F7\". If provided, it must match the textual contents of the SysEx message (just compared via equal?). ")) (description "Is x a SysEx midi message? ") (form "(SysEx? x [sys-ex-hex-string])") (title "SysEx?")) ((cross-references (reference "Scheme source file" "ControlChange?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#ControlChange?")) (kind "manual-page") (parameters (parameter "x" "Any data, but typically some midi AST.") (parameter "control" "A control number (an integer or string or boolean #t). If not provided, or if #t, the control number does not matter.") (parameter "channel" "A channel (an integer or string). If not provided, the channel does not matter.")) (description "Is x a ControlChange midi message in channel. ") (form "(ControlChange? x  [control channel])") (misc "Will never give a fatal error. The function returns #f in cases of problems. ") (title "ControlChange?")) ((cross-references (reference "Scheme source file" "PitchBendChange?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#PitchBendChange?")) (kind "manual-page") (parameters (parameter "x" "Any data, but typically some midi AST.") (parameter "channel" "A channel (an integer or string in the range of 1 .. 16). If not provided, the channel does not matter.")) (description "Is x a PitchBendChange midi message in channel. ") (form "(PitchBendChange? x [channel])") (misc "Will never give a fatal error. The function returns #f in cases of problems. ") (title "PitchBendChange?")) ((cross-references (reference "Scheme source file" "drum-NoteOn?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#drum-NoteOn?")) (kind "manual-page") (description "Is x a NoteOn drum midi message? In the context of this predicate, a drum midi message uses channel 9 or channel 10. ") (title "drum-NoteOn?") (form (drum-NoteOn? x))) ((kind "manual-page") (description "Is x a midi null event AST? In fact, this predicate catches all Meta type 1 events (because the textual contents of midi null events have been given free). ") (title "midi-null-event-message?") (form (midi-null-event-message? x)) (cross-references (reference "Scheme source file" "midi-null-event-message?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-null-event-message?") (internal-references "Generator" "midi-null-event"))) ((cross-references (reference "Scheme source file" "channel-message?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#channel-message?")) (kind "manual-page") (description "Is x a midi message ast with a channel attribute? Returns #f is x is not an AST. ") (title "channel-message?") (form (channel-message? x))) ((cross-references (reference "Scheme source file" "non-channel-message?" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#non-channel-message?")) (kind "manual-page") (description "Is x a midi message ast without a channel attribute? Returns #f is x is not an AST. ") (title "non-channel-message?") (form (non-channel-message? x))) ((kind "manual-section") (section-title "Midi message accessor.") (section-body "Convenient accessor of Midi Asts. Can be used instead of the general purpose accessors of LAML asts. ") (section-id "midi-mes-accessors")) ((cross-references (reference "Scheme source file" "midi" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi")) (kind "manual-page") (parameters (parameter "attribute-name" "The name of the attribute. A symbol. (A string also works).") (parameter "mes" "A midi message ast. (Any other value my also be passed, in which case the function just returns #f).")) (description "Return the attribute value of the attribute named attribute-name of mes. Numeric attributes are automatically returned as numbers. If mes is a non-ast, or an ast without an attribute named attribute-name, return #f. ") (returns "The attribute value of mes, converted to a number for the following attribute-names: channel, note, velocity, duration, value, number, pressure, and strum-length.") (pre-condition "True") (misc "Can always be called. The precondition is as weak as possible.") (title "midi") (form (midi attribute-name mes))) ((kind "manual-section") (section-title "Message List functions - General Purpose.") (section-body "This section and the following sections contain function that can be applied on lists of midi messages. The functions in this section are general purpose. As such, this is the important 'bread and butter' functions of this library. Most functions come in two flavors. The main function, f, can be applied in this way (f m1 m2 ... mk) on arbitrary many midi messages m1 ... mk. The other flavor, always named f-1, is applied as (f-1 (list m1 m2 ... mk)). In many cases there will be a few positional and required parameters before the first message. Thus, if there are two such required parameters p1 and p2, the calling forms are (f p1 p2 m1 m2 ... mk) and (f-1 p1 p2 (list m1 m2 ... mk)) respectively. Notice that the f-1 flavor of the functions are not explicitly documented below. If necessary, consult the Scheme source file to see f-1 via the provided links under 'See also'.") (section-id "midi-list-fn-gp")) ((cross-references (reference "Scheme source file" "delta-merge" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delta-merge")) (kind "manual-page") (parameters (parameter "other-message-list" "A list of deltaTime messages.")) (description "Merge the current selection with another a list of messages. Both the current selection and the other message list must consist of deltaTime messages (and only deltaTime messages). The sibling function (delta-merge-two-lists message-list-1 message-list-2) accepts two lists. ") (form "(delta-merge other-message-list . messages)") (pre-condition "There are deltaTime messages (and only deltaTime messages) in both involved message lists.") (returns "a list of merged messages that preserves the timing of both input lists.") (misc "It is trivial to do the merging if one of the inputs contain absTime messages. This is because, per design, deltaTime messages can be inserted in between absTime messages.") (title "delta-merge")) ((cross-references (reference "Scheme source file" "delta-merge-two-lists" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delta-merge-two-lists")) (kind "manual-page") (description "Merge two list of deltaTimed notes. ") (title "delta-merge-two-lists") (form (delta-merge-two-lists message-list-1 message-list-2))) ((cross-references (reference "Scheme source file" "delta-merge-lists" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delta-merge-lists")) (kind "manual-page") (description "Merge an arbitrary number of lists, each of which contains deltaTimed notes. ") (title "delta-merge-lists") (form (delta-merge-lists . list-of-message-lists))) ((cross-references (reference "Scheme source file" "abs-merge" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#abs-merge")) (kind "manual-page") (parameters (parameter "other-message-list" "A list of absTime messages.")) (description "Merge the current selection with another a list of messages. Both the current selection and the other message list must consist of absTime messages (and only absTime messages). The sibling function (abs-merge-two-lists message-list-1 message-list-2) accepts two lists. ") (form "(abs-merge other-message-list . messages)") (pre-condition "There are absTime messages (and only absTime messages) in both involved message lists.") (returns "A list of merged messages (absTime)") (misc "It is trivial to do the merging if one of the inputs contain absTime messages. deltaTime merging, as implemented in delta-merge, is a little tricky - but doable. absTime merging, as implemented in this function, is easier to deal with.") (title "abs-merge")) ((cross-references (reference "Scheme source file" "abs-time-reverse" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#abs-time-reverse")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages).")) (description "Reverses the absTimes of messages. The absTime of the first resulting message is taken from the first of messages etc. ") (form "(abs-time-reverse . messages)") (pre-condition "There are absTime messages (and only absTime messages) in both involved message lists.") (mode "absTime mode") (title "abs-time-reverse")) ((cross-references (reference "Scheme source file" "delta-abs-merge" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delta-abs-merge")) (kind "manual-page") (description "Merge the delta time messages in delta-message-list with messages. The messages in delta-message-list consist of deltaTime messages (and only deltaTime messages). The messages in messages consist of absTime messages (and only absTime messages). The list consisting of messages must not be empty. Returns a list of pure absTime messages. ") (form "(delta-abs-merge delta-message-list . messages)") (title "delta-abs-merge")) ((cross-references (reference "Scheme source file" "transform-messages" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#transform-messages")) (kind "manual-page") (parameters (parameter "filter-fn" "A boolean midi-message function. Is always applied on an AST.") (parameter "transformation-fn" "a single midi-message transformation function. Is always applied on an AST.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "If filter-fn holds (returns true) on a given midi message, transform this message with transformation-fn. If not, pass the midi message untransformed. ") (form "(transform-messages filter-fn transformation-fn . messages)") (returns "a list of transformed messages") (title "transform-messages")) ((cross-references (reference "Scheme source file" "filter-messages" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#filter-messages")) (kind "manual-page") (parameters (parameter "pred-fn" "A boolean midi-message predicate function. Will applied on an AST. If pred-fn returns true on an-ast, keep it.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Keep those messages in the message list that satisfy the predicate pred-fn. Messages that do not satify the predicate are removed. As a consequence, this function is most likely to be useful in absTime mode. ") (form "(filter-messages pred-fn . messages)") (returns "a list of messages") (title "filter-messages")) ((kind "manual-page") (parameters (parameter "pred-fn" "A boolean midi-message predicate function. Will applied on an AST. If pred-fn returns true on an-ast, keep it.") (parameter "abs-target-file-path" "The absolute path to a file where the residual MIDI messages are stored. If this file exists, it is deleted before new contents is written to it.") (parameter "abs-merge-file-path" "The absolute path to an existing file with residual MIDI messages, of #f. A #f value, or a non-existing file causes no merging to take place.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Filter those messages in the message list that satisfy the predicate pred-fn. The residual messages that do not satisfy the predicate are transferred to a file abs-merge-file-path. If the abs-merge-file-path parameter addresses an existing residual file, the compacted MIDI LAML messages in this file are merged with the residual messages of the current processing. This function is useful for accumulating residual messages - step-wise zooming (where the residual messages represent are represented separately at any time). The format used in the residual files is a list of either normal or compacted ASTs of the individual MIDI messages. Compaction of a single MIDI LAML AST message is done with the function compact-midi-laml-ast. This function is used internally by the MIDI LAML zoom facility. It only applies to pure absTime mode. Problems arise if any deltaTime messages are encountered. ") (form "(filter-messages-keep-residual-and-accumulate! pred-fn abs-target-file-path abs-merge-file-path . messages)") (mode "absTime mode") (returns "a list of messages") (title "filter-messages-keep-residual-and-accumulate!") (cross-references (reference "Scheme source file" "filter-messages-keep-residual-and-accumulate!" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#filter-messages-keep-residual-and-accumulate!") (internal-references "Similar to" "filter-messages-keep-residual-and-reprocess!"))) ((kind "manual-page") (parameters (parameter "pred-fn" "A boolean midi-message predicate function. Will applied on an AST. If pred-fn returns true on an-ast, keep it.") (parameter "abs-target-file-path" "The absolute path to a file where the residual MIDI messages are stored. If this file exists, it is deleted before new contents is written to it.") (parameter "abs-merge-file-path" "The absolute path to an existing file with residual MIDI messages, of #f. A #f value, or a non-existing file causes no merging to take place.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Filter those messages in the message list that satisfy the predicate pred-fn. The residual messages that do not satisfy the predicate are transferred to a file abs-merge-file-path. If the abs-merge-file-path parameter addresses an existing residual file, the compacted MIDI LAML messages in this file are merged with messages before processing. This function is useful for reprocessing residual messages - zooming out and then rezooming. The format used in the files is a list of either normal or compacted ASTs of the individual MIDI messages. Compaction of a single MIDI LAML AST message is done with the function compact-midi-laml-ast. This function is used internally by the MIDI LAML zoom facility. It only applies to absTime mode. ") (form "(filter-messages-keep-residual-and-reprocess! pred-fn abs-target-file-path abs-merge-file-path . messages)") (mode "absTime mode") (returns "a list of messages") (title "filter-messages-keep-residual-and-reprocess!") (cross-references (reference "Scheme source file" "filter-messages-keep-residual-and-reprocess!" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#filter-messages-keep-residual-and-reprocess!") (internal-references "Similar to" "filter-messages-keep-residual-and-accumulate!"))) ((kind "manual-page") (parameters (parameter "ast-predicate" "A predicate, guarantied to be applied on an AST (midi-message).") (parameter "messages" "A list of midi messages")) (description "Transform the value of attribute-name with with a given numeric transformation function. Only messages that satisfy the ast predicate ast-pred are affected. Non-affected messages, or messages that to not have an attribtute named attribute-name, are passed without modification. ") (form "(transform-attribute  ast-predicate attribute-name trasformation-fn . messages)") (parameter-name "attribute-name The name of an attribute. A symbol.") (misc "The function-generator pitch-bend-scale produces functions that can be used as transformation functions in case we transform the value attribute of PitchBendChange midi messages.") (title "transform-attribute") (cross-references (reference "Scheme source file" "transform-attribute" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#transform-attribute") (internal-references "Specialized function" "scale-attribute-by-factor") (internal-references "Pitch-bend scaling function" "pitch-bend-scale"))) ((kind "manual-page") (parameters (parameter "ast-predicate" "A predicate, guarantied to be applied on an AST (midi-message)") (parameter "messages" "A list of midi messages")) (description "Scale the value of attribute-name with factor. Only messages that satisfy the ast predicate ast-pred are affected. Non-affected messages, or messages that to not have an attribtute named attribute-name, are passed without modification. ") (form "(scale-attribute-by-factor ast-predicate attribute-name factor . messages)") (parameter-name "attribute-name The name of an attribute. A symbol.") (misc "Notice that this function is a specialization of the more general function transform-attribute.") (title "scale-attribute-by-factor") (cross-references (reference "Scheme source file" "scale-attribute-by-factor" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-attribute-by-factor") (internal-references "Generalized function" "transform-attribute") (internal-references "Context-dependent scaling function" "scale-attribute"))) ((cross-references (reference "Scheme source file" "randomize-attribute" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#randomize-attribute")) (kind "manual-page") (parameters (parameter "pred" "An AST predicate.") (parameter "attribute-name" "The name of an attribute. A symbol") (parameter "channel-list" "A list of channels. A list of integers in the interval 1..16.") (parameter "lower-number" "The lowest possible scale factor. A real number.") (parameter "upper-number" "The highest possible scale factor. A real number.") (parameter "min-attribute-value" "The minimum value of the attribute after scaling, or #f if no such minimum applies.") (parameter "max-attribute-value" "The maxium value of the attribute after scaling, or #f if no such maximum applies.") (parameter "messages" "A list of midi messages (such as NoteOn messages).")) (description "Randomize the values of the attributes that belong to attribute-name of messages in channel-list. Only messages that satisfy the AST predidate pred are affected. Each relevant attribute value is multiplied by a random number drawn from the interval [lower-number - upper-number]. Round the result of the multiplication to an integer, and enforce the result to be within the interval [min-attribute-value - max-attribute-value]. ") (form "(randomize-attribute pred attribute-name channel-list lower-number upper-number min-attribute-value max-attribute-value . messages)") (title "randomize-attribute")) ((cross-references (reference "Scheme source file" "replicate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#replicate")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "n" "The number of replications. Must be a non-negative integer.")) (description "Replicate the events (in all channels) in message-list n times. Most useful in deltaTime mode. Is typically used to play n verses of a song. ") (form "(replicate n . messages)") (title "replicate")) ((kind "manual-page") (parameters (parameter "attribute-name" "The name of the attribute to scale. A string or symbol.") (parameter "scaling-function" "A function from [0,1] to Real.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Scale an attribute with use of a scaling function. Scale the value of the attribute attribute-name in all NoteOn messages in messages. Non-NoteOn events (and NoteOn events which does not have an attribute named attribute-name) are not affected. The scaling is done by multiplying each attribute value with a factor returned by the scaling function. The factor depends on the position of the NoteOn message relative to the contextual NoteOn messages. scaling-function is a real-valued function (lambda (x) ...) where x belongs to the interval [0,1]. ") (form "(scale-attribute attribute-name scaling-function . messages)") (title "scale-attribute") (cross-references (reference "Scheme source file" "scale-attribute" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-attribute") (reference "Examples" "Midi LAML examples" "../examples/attribute-scaling/index.html") (internal-references "Non-context dependent scaling" "scale-attribute-by-factor") (internal-references "Scaling per channel" "scale-attribute-of-channel") (internal-references "Scaling functions" "scaling-function-generation"))) ((kind "manual-page") (parameters (parameter "ch" "The channel number. An integer between 1 and 16.") (parameter "attribute-name" "The name of the attribute to scale. A string or symbol.") (parameter "scaling-function" "A function from [0,1] to Real.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Scale an attribute in a given channel with use of a scaling function. Scale the value of the attribute attribute-name in all NoteOn messages in messages. Non-NoteOn events (and NoteOn events which does not have an attribute named attribute-name as well as NoteOn messages in other channels) are not affected. The scaling is done by multiplying each attribute value with a factor returned by the scaling function. The factor depends on the position of the NoteOn message relative to the contextual NoteOn messages. scaling-function is a real-valued function (lambda (x) ...) where x belongs to the interval [0,1]. ") (form "(scale-attribute-of-channel ch attribute-name scaling-function . messages)") (title "scale-attribute-of-channel") (cross-references (reference "Scheme source file" "scale-attribute-of-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-attribute-of-channel") (reference "Examples" "Midi LAML examples" "../examples/attribute-scaling/index.html") (internal-references "Similar non-channel function" "scale-attribute") (internal-references "Non-context dependent scaling" "scale-attribute-by-factor") (internal-references "Scaling functions" "scaling-function-generation"))) ((kind "manual-page") (parameters (parameter "attribute-name" "The name of the attribute to scale. A string or symbol.") (parameter "ch-list" "A list of channels. Each channel in the list must be an integer between 1 and 16.") (parameter "scaling-function" "A function from [0,1] to Real.") (parameter "note-value-predicate" "A predicate applied on the note attribute of the NoteOn message.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (xml-in-laml-attributes (xml-in-laml-attribute "domaining" "implied" "Determines the values in the domain of f. Either relative-position or abs-time-domain-scaling. Defaults to relative-position. A string.")) (description "Scale an attribute with use of a scaling function on selected NoteOn message in given channels, determined by note-value-predicate. Scale the value of the attribute attribute-name in all NoteOn messages in messages that satisfy the note-value-predicate. Only NoteOn messages whose channels belong to ch-list are affected. The note-value-predicate is applied on the note attribute. Non-NoteOn events (as well as NoteOn events which does not have an attribute named attribute-name and NoteOn events which does not fullfil the precidate) are not affected. The scaling is done by multiplying each attribute value with a factor returned by the scaling function. If the attribute called domaining is relative-position, the factor depends on the position of the selected NoteOn message relative to the contextual NoteOn messages which satisfy the predicate. If the attribute domaining is abs-time-domain-scaling, the factor depends on the absTime value of the selected NoteOn message. It will lead to a fatal error if abs-time-domain-scaling is used in deltaTime mode. scaling-function is a real-valued function (lambda (x) ...) where x belongs to the interval [0,1]. ") (form "(scale-attribute-by-predicate ch-list attribute-name scaling-function note-value-predicate . messages)") (title "scale-attribute-by-predicate") (cross-references (reference "Scheme source file" "scale-attribute-by-predicate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-attribute-by-predicate") (internal-references "scaling without note predicate" "scale-attribute") (internal-references "scaling without note predicate" "scale-attribute-of-channel"))) ((cross-references (reference "Scheme source file" "enforce-attribute-value" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#enforce-attribute-value")) (kind "manual-page") (parameters (parameter "form-name" "The name of forms affected by this function. A string or symbol.") (parameter "attribute-name" "The name of the attribute affected by this function. A string or symbol.") (parameter "attribute-value" "The enforced attribute value. Automatically converted to a string.") (parameter "messages" "A list of midi messages.")) (description "Enforce that the attribute value of of attribute-name in all forms with name form-name will have the value attribute-value. ") (form "(enforce-attribute-value form-name attribute-name attribute-value . messages)") (title "enforce-attribute-value")) ((cross-references (reference "Scheme source file" "insert-leading-and-trailing-beats" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#insert-leading-and-trailing-beats")) (kind "manual-page") (parameters (parameter "ch" "The channel in which to generate the four beats. An integer between 1 and 16.") (parameter "messages" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "ppqn" "implied" "Pulses per quarter note - defaults to 192") (xml-in-laml-attribute "n" "implied" "The first number of the time signature - defaults to 4.") (xml-in-laml-attribute "m" "implied" "The last number of the time signature - defaults to 4. Not used yet.")) (description "Insert four beats in channel ch (such as channel 10, the drum channel) just before the first midi message in messages and just before the end-of-track Meta event. The insert-leading-and-trailing-beats form is typically supposed to be inserted just before bar 1:0:0 and ended just after Meta type 47 (end of track). The messages in message list, and the meta event appropriately, are automatically time-displaced by this function. The ppqn and the time signature n:m can be passed as attributes, but all have sensible default values. ") (form "(insert-leading-and-trailing-beats ch . messages)") (pre-condition "The end of track event Meta is the last event in messages (explicitly checked).") (mode "absTime mode") (misc "Used for synchronization of sound recordings from two (or more) MIDI keyboards.") (title "insert-leading-and-trailing-beats")) ((kind "manual-page") (parameters (parameter "channel-list" "A list of channel numbers (an integer list).") (parameter "abs-time-pred" "A boolean function (lambda (abs-time) ...). Keep those message who's absTime attribute satsify the predicate. abs-time is an integer.")) (description "Thin out messages based on their absolute timing. For messages in channel-list, keep only those those message whose absTime attribute satisfy abs-time-pred. Keep messages in channels which do not belong to channel-list, and keep messages without a channel. This function is (implemented as) a specialized application of filter-messages. The higher-order function keep-beat generates useful predicates that can be used as actual parameters to abs-time-pred ") (form "(thin-out-messages-abs-time channel-list abs-time-pred . messages) ") (mode "pure absTime") (title "thin-out-messages-abs-time") (cross-references (reference "Scheme source file" "thin-out-messages-abs-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#thin-out-messages-abs-time") (reference "Examples" "Midi LAML examples" "../examples/thin-out/index.html") (internal-references "Predicate generator" "keep-beat") (internal-references "More general function" "filter-messages") (internal-references "By bar variant" "thin-out-section-by-bar"))) ((kind "manual-page") (parameters (parameter "channel-list" "A list of channel numbers (an integer list).") (parameter "abs-time-pred" "A boolean function (lambda (abs-time) ...). Keep those message who's absTime attribute satsify the predicate. abs-time is an integer.") (parameter "start-time" "The start-time which is used as the basis for calculating absolute times. Typically 0, but no default is available.")) (description "Thin out messages based on their absolute timing, where the absolute timing is calculated from start-time and the deltaTime attributes. For messages in channel-list, keep only those those message whose calculated absolute time satisfy abs-time-pred. Keep messages in channels which do not belong to channel-list, and keep messages without a channel. This function is (implemented as) a specialized application of filter-messages. The higher-order function keep-beat generates useful predicates that can be used as actual parameters to abs-time-pred ") (form "(thin-out-messages-delta-time channel-list abs-time-pred start-time . messages) ") (mode "deltaTime") (title "thin-out-messages-delta-time") (cross-references (reference "Scheme source file" "thin-out-messages-delta-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#thin-out-messages-delta-time") (reference "Examples" "Midi LAML examples" "../examples/thin-out/index.html") (internal-references "Predicate generator" "keep-beat") (internal-references "More general function" "filter-messages") (internal-references "By bar variant" "thin-out-section-by-bar"))) ((kind "manual-page") (parameters (parameter "n" "defines which notes to keep.") (parameter "displacement" "Allows identification of notes that are systematically displace. Defaults to 0.") (parameter "ppqn" "Pulse per quarter notes. Defaults to 1920.")) (description "Generates a useful absTime predicate for thin-out-messages-abs-time. The absolute time is displaced with displacement (displacement is subtracted from the absolute time) before fed to the predicate. Returns a function that keeps all messages for 1/n notes, where n is 1, 2, 4, 8, ... (a power of 2, power >= 1). ") (form "(keep-beat n [displacement ppqn])") (returns "An abs-time predicate (lambda (abs-time) ...)") (misc "(keep-beat 4) returns a predicate that keeps all quarter notes.") (title "keep-beat") (cross-references (reference "Scheme source file" "keep-beat" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#keep-beat") (internal-references "Use context" "thin-out-messages-abs-time" "thin-out-section-by-bar"))) ((cross-references (reference "Scheme source file" "marker-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#marker-channel")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16.") (parameter "marker-letter" "A string of length one containg the desired marking letter.") (parameter "messages" "A list of midi messages (such as NoteOn messages). Cannot be empty.")) (description "Use the given channel as a marker channel. Convert NoteOn messages in the given channel to markers with consequtive numbering such as \"M-1\", \"M-2\", etc. The note attribute is used as the level of the marker. C is level 0, D is level 1, E is level 2, etc. We only use white keys for leveling. Eliminate all other ControlChange and ProgramChange messages relating to the channel. ") (form "(marker-channel channel marker-letter . messages)") (title "marker-channel")) ((cross-references (reference "Scheme source file" "marker-silence" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#marker-silence")) (kind "manual-page") (parameters (parameter "silence-ticks" "A number of ticks (a non-negative integer).") (parameter "marker-letter" "A string of length one containg the desired marking letter.") (parameter "messages" "A list of midi messages.")) (description "Insert markers in messages - in between sections separated by least silent-ticks of silence. Also insert an initial marker in front of the messages. Currently, this function works only in absTime mode. ") (form "(marker-silence silence-ticks marker-letter . messages)") (mode "absTime") (title "marker-silence")) ((cross-references (reference "Scheme source file" "markup-chords" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#markup-chords")) (kind "manual-page") (parameters (parameter "channel" "A channel, between 1 and 16.") (parameter "marker-letter" "A single letter, a string of length 1, used as the marker name.") (parameter "messages" "A list of midi messages.")) (description "Identify chords, and markup sections with a given chord by start and end markers. Also insert an initial marker in front of the messages. Currently, this function works only in absTime mode. ") (form "(markup-chords channel marker-letter . messages)") (mode "absTime") (misc "Obsolete. Used map-chords instead together with the function chord-marker.") (title "markup-chords")) ((kind "manual-page") (parameters (parameter "channel" "A channel, between 1 and 16.") (parameter "max-time-diff" "The maximal number of ticks between chord note candidates. An integer.") (parameter "f" "A function. f: message-list channel bite-number chord-formula chord-name -> message-list.") (parameter "messages" "A list of midi messages.")) (description "Map the function f on chords in a given channel. Currently, this function works only in absTime mode. ") (form "(map-chords channel max-time-diff f . messages)") (mode "absTime") (misc "This function is a generalization of markup-chords, which we developed before this function has been provided.") (title "map-chords") (cross-references (reference "Scheme source file" "map-chords" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-chords") (internal-references "Useful f" "chord-marker"))) ((kind "manual-page") (description "A suitable function f for map-chords, which mark the beginning and ends of chords with MIDI markers. ") (title "chord-marker") (form (chord-marker bite channel n chord-formula chord-name)) (cross-references (reference "Scheme source file" "chord-marker" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#chord-marker") (internal-references "Use context" "map-chords"))) ((cross-references (reference "Scheme source file" "map-sustain-intervals" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-sustain-intervals")) (kind "manual-page") (parameters (parameter "channel" "A channel, between 1 and 16.") (parameter "f" "A function of signature message-list int direction -> message-list. The integer parameter is the (one-based) bite number. The direction (a symbol) is either increasing, decreasing, or constant depending on the elements in messages.") (parameter "messages" "A list of midi messages.")) (description "Map the function f over bites of messages that are monotone in the sustain pedal relative to a given channel. Being monotone means increasing, decreasing, or constant (constant will probably never happen in this context). Increasing and decreasing bites do NOT necessarily alternate - two increasing bites may occur next to each other, for instance. Appart from lists (or list tails) with zero or only one sustain message, a bite passed to f will always have at least two elements. ") (form "(map-sustain-intervals channel f . messages)") (title "map-sustain-intervals")) ((cross-references (reference "Scheme source file" "map-bars" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-bars")) (kind "manual-page") (parameters (parameter "f" "A function applied on each non-emtpy bar bite of messages. f: MIDI message list, bar-number, bar-start-tick, bar-end-tick -> MIDI message list. The bar number is one-based.") (parameter "time-signature" "A list of length 2, such as (3 4) for 3:4 and (6 8) for 6:8. ") (parameter "ppqn" "The number of pulses per quarter note. A non-negative integer.") (parameter "messages" "A list of midi messages.")) (description "Map the function f on each (non-empty) bar of messages. Works in both absTime mode and in deltaTime mode (but sligthly better in absTime mode due to more accurate bar numbering). As of now, the deltaTime version gives wrong results! ") (form "(map-bars f ppqn time-signature . messages)") (misc "The function can be applied at any location in an absTimed MIDI sequence, but it should be applied at the start of a deltaTimed sequence in order for the bars to be correct. In deltaTime mode, the bar numbers stem for the bit numbers which may give different bar numbers than in absTime mode.") (title "map-bars")) ((cross-references (reference "Scheme source file" "generate-complete-chord-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#generate-complete-chord-list")) (kind "manual-page") (parameters (parameter "basic-chord-list" "a list of chord entries of the form (name-without-root . notes), where notes is 0-based.") (parameter "chord-naming-style." "Either sharp og flat (a symbol). Defaults value is sharp.")) (description "Generate a complete list of chords from a basic chord list (a list of c chords, like the basic-chord-list). Applies either flat og sharp naming style. ") (form "(generate-complete-chord-list basic-chord-list [chord-naming-style])") (title "generate-complete-chord-list")) ((cross-references (reference "Scheme source file" "map-paused-sections" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-paused-sections")) (kind "manual-page") (parameters (parameter "f" "A function applied on the bite number and identified paused sections. f: int x list of MIDI messages -> list of MIDI messages.") (parameter "pause-ticks" "A number of ticks (a non-negative integer).") (parameter "relevance-predicate" "An AST predicate function. Non-relevant messages is considered as noice to the undelying bite mapping function. Non-NoteOn messages are irrelevant, independent of the body of relevance-predicate.") (parameter "messages" "A list of midi messages.")) (description "Apply a function on section of messages separate by a pause. A pause is a section of at least pause-ticks ticks among messages that satisfy the relevance-predicate. ") (form "(map-paused-sections f silence-ticks relevant . messages)") (mode "absTime") (misc "This function is a generalization of marker-silence, which inserts markers between paused sections. ") (title "map-paused-sections")) ((kind "manual-page") (parameters (parameter "n" "The number of times to repeat messages. An integer.") (parameter "messages" "A list of midi messages (such as NoteOn messages). May also be a nested list of such messages according to LAML conventions.")) (description "Repeat messages n times. ") (mode "deltaTime") (form "(repeat-messages n . messages)") (title "repeat-messages") (cross-references (reference "Scheme source file" "repeat-messages" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#repeat-messages") (internal-references "Variant with period length" "repeat-messages"))) ((kind "manual-page") (parameters (parameter "n" "The number of times to repeat messages. An integer.") (parameter "min-period-length" "The mini period length, measured in pulses (an integer).") (parameter "messages" "A list of midi messages (such as NoteOn messages). May also be a nested list of such messages according to LAML conventions.")) (description "Repeat messages n times, and enforce that each repetition has length of at least min-period-length. (If the length of message-list is less than min-period-length, an appropriate deltaTime message is appended to each repetition). ") (form "(repeat-messages-enforce-periode-length n min-period-length . messages)") (mode "deltaTime") (title "repeat-messages-enforce-periode-length") (cross-references (reference "Scheme source file" "repeat-messages-enforce-periode-length" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#repeat-messages-enforce-periode-length") (internal-references "More basic variant" "repeat-messages"))) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages.") (parameter "delta-time-note-list" "A list of deltaTimed notes.")) (description "Return messages surrounded (both initially and in the end) by a list of delta timed notes. This can, for instance, be used for initial and final drum beats (like a metronome) applied for synchronization purposes. ") (form "(surround-by-delta-note-list delta-time-note-list . messages)") (misc "Synchronization beat hint: Surround from meassure number 1 to the end of the track (including the end of track meta event). Afterwards, move the meta event to the new ending.") (title "surround-by-delta-time-note-list") (cross-references (reference "Scheme source file" "surround-by-delta-time-note-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#surround-by-delta-time-note-list") (internal-references "Useful note generator" "regular-beats"))) ((cross-references (reference "Scheme source file" "pass-through" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pass-through")) (kind "manual-page") (description "A neutral and trivial message list function. Just pass the message-list through the form. ") (form "(pass-through . messages).") (title "pass-through")) ((cross-references (reference "Scheme source file" "map-midi-sections" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-midi-sections")) (kind "manual-page") (parameters (parameter "prefix-bite" "A function which selects a prefix of the list, for examination and possible transformation. Signature: List, int -> List.") (parameter "sublist-pred" "An examination function from sublist to integer. Positive integer serves as boolean true. Negative integers serve as boolean false. A positive result p meaning that p elements of sublist is selected for transformation; A negative result n meaning that the start of the next examined bite is (- n) elements ahead.") (parameter "sublist-tranf" "A transformation function on sublists, called on a bite if sublist-pred returns a positive integer on the bite. Signature List, int -> List. The integer is the bite number (1 based).") (parameter "message-list" "A list of midi messages.")) (description "Apply sublist-pred to successive sublist bites of message-list. The prefix bites of the sublist are constructed by the function prefix-bite. The sublist bites are passed to sublist-pred, and those which are selected by the predicated are transformed by the transformation function, and spliced into the resulting list. Sublists (elements) which are not selected by the predicate are passed non-transformed. ") (misc "This function is - more or less - a direct application of step-and-map-n-bites. As such it is probably too difficult to apply.") (form "(map-midi-sections prefix-bite sublist-pred sublist-trans . message-list)") (title "map-midi-sections")) ((kind "manual-section") (section-title "Message List functions - Time related") (section-body "") (section-id "midi-list-fn-time")) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "factor" "A factor with wich to stretch the timing of the messages (a real number). A factor 1.0 is neutral with respect to timing.")) (description "Stretch the time and duration of message-list with a factor. Affects all messages (not only noteOn messages). Works in both absTime and deltaTime mode. ") (form "(time-stretch factor . messages)") (mode "Both deltaTime and absTime. Also in absTime mode with interleaving deltaTime events.") (title "time-stretch") (cross-references (reference "Scheme source file" "time-stretch" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-stretch") (reference "Examples" "Midi LAML examples" "../examples/time-stretch/index.html"))) ((cross-references (reference "Scheme source file" "time-adapt-to" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-adapt-to")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages") (parameter "new-length" "The desired length of messages including the first message to and including the last message (but excluding the sucessor's delta). An integer.")) (description "Adapt the time of the midi messages to new-length time units in total. The durations of the individual messages are adapted proportionally. Implemented by use of time-stretch. Can be used in both absTime mode and deltaTime mode, but it is most obvious to use this function in deltaTime mode. ") (form "(time-adapt-to new-length . messages)") (title "time-adapt-to")) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "displacement" "The displacement of messages in time units, as described by the pulsesPerQuarterNote attribute of MidiHeader. Can be positive or negative. ")) (description "Time displace with amount (adds displacement to the absolute time of the event). Affects all channels as well as system messages. Displacement can be positive or negative. This function works both in absTime mode and deltaTime mode, including absTime mode where there appears deltaTime contributions. It is a requirement, however, that the first message-ast in messages reveals the time mode. ") (form "(time-displace displacement . messages)") (title "time-displace") (cross-references (reference "Scheme source file" "time-displace" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-displace") (internal-references "Similar function" "time-displace-channels"))) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "displacement" "The displacement of messages in time units, as described by the pulsesPerQuarterNote attribute of MidiHeader. Can be positive or negative. ") (parameter "channel-list" "A list of channels. (A list of integers in the interval 1..16).")) (description "As time-displace, but only affecting channels in channel-list ") (form "(time-displace-channels channel-list displacement . messages)") (mode "absTime mode - with possible interleaved deltaTime elements") (title "time-displace-channels") (cross-references (reference "Scheme source file" "time-displace-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-displace-channels") (internal-references "Similar function" "time-displace"))) ((kind "manual-page") (parameters (parameter "channel-list" "A list of channels. (A list of integers in the interval 1..16).") (parameter "displacement" "The basis amount of displacement of messages in time units, as described by the pulsesPerQuarterNote attribute of MidiHeader. Can be positive or negative. Scaled with scaling-fn before addition.") (parameter "scaling-fn" "A scaling function.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "As time-displace-channels, but with a scaling of the amount of displacement. ") (form "(time-displace-channels-with-scaling channel-list displacement scaling-fn . messages)") (mode "absTime mode.") (title "time-displace-channels-with-scaling") (cross-references (reference "Scheme source file" "time-displace-channels-with-scaling" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-displace-channels-with-scaling") (internal-references "Similar function" "time-displace-channels"))) ((cross-references (reference "Scheme source file" "quantize" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#quantize")) (kind "manual-page") (parameters (parameter "q" "One of the integer values 1, 2, 4, 8, 16, 32, 64 and 128. As an example, 4 means a quarter note quantification.") (parameter "pulses-per-quarter-note" "Must (redundantly) be similar to the pulsesPerQuarterNote attribute of MidiHeader. ") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Quantize channel to q. Works in both absTime mode and deltaTime mode. Affects all messages with channel attributes. In deltaTime mode the first deltaTime is taken to be 0 (independent of its actual value). deltaTime mode is somewhat experimental. ") (form "(quantize channel q pulses-per-quarter-note . messages)") (channel "A channel number between 1 and 16. An integer.") (title "quantize")) ((cross-references (reference "Scheme source file" "quantize-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#quantize-channels")) (kind "manual-page") (parameters (parameter "q" "One of the integer values 1, 2, 4, 8, 16, 32, 64 and 128. As an example, 4 means a quarter note quantification.") (parameter "pulses-per-quarter-note" "Must (redundantly) be similar to the pulsesPerQuarterNote attribute of MidiHeader. ") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Quantize a number of channels to q. Works in both absTime mode and in deltaTime mode. Affects all messages with channel attributes. In deltaTime mode the first deltaTime is taken to be 0 (independent of its actual value). deltaTime mode is somewhat experimental. ") (form "(quantize channel-list q pulses-per-quarter-note . messages)") (channel-list "A list of channel number between 1 and 16. A list.") (title "quantize-channels")) ((cross-references (reference "Scheme source file" "distribute-even" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#distribute-even")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel number in the interval 1..16.")) (description "Distribute all NoteOn in the given channel evenly. Does only work in absTime mode. ") (form "(distribute-even channel . messages)") (title "distribute-even")) ((kind "manual-page") (parameters (parameter "channels" "A list of channel numbers in the interval 1..16.") (parameter "transformer" "A function from a list of at least two NoteOn messages to a list of messages. It is guarantied that this function is called with at least two messages, which both are NoteOn messages in absTime mode. All messages passed to transformer are guarantied to take place at the same time. The order or the messages passed to transformer is unknown. The transformer must return a list of midi message asts (maybe an empty list), typically (but necessarily) NoteOn messages.") (parameter "messages" "A list of midi messages.")) (description "Transform consecutive midi NoteOn messages (two or more) that belong to channels, and which occur at the same time. The tranformer can do whatever calculation necessary on these 'same time messages'. The transformer must return a list of messages (maybe empty). All other messages are not affected. ") (form "(same-time-transform channels transformer . messages)") (mode "absTime ") (misc "You can use this function to repair multiple track which must play in parallel. In a typical scenario you have manually corrected note values in one of the channels, and you now wish to enforce another channel to introduce the samme note corrections.") (title "same-time-transform") (cross-references (reference "Scheme source file" "same-time-transform" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#same-time-transform") (reference "Example" "Midi LAML examples" "../examples/same-time-transform/index.html"))) ((cross-references (reference "Scheme source file" "cut-at-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#cut-at-time")) (kind "manual-page") (parameters (parameter "channel-list" "A list of channel numbers in the interval 1..16 or the boolean value #t in the meaning of all channels between 1 and 16. An integer list or boolean #t.") (parameter "abs-cut-time" "The absolute time at which to cut. A non-negative integer. ")) (description "Cut all messages in channel-list that starts after abs-cut-time, and (if necessary) adjust the duration of messages in channel-list that start before abs-cut-time such that they end at abs-cut-time or before. Messages not in channel-list are not affected at all. ") (form "(cut-at-time abs-cut-time channel-list . messages)") (returns "The remaining messages and the adjusted messages in channel-list, together with all messages not in channel-list. ") (mode "absTime ") (title "cut-at-time")) ((kind "manual-section") (section-title "Message List functions - Note related") (section-body "") (section-id "midi-list-fn-note")) ((cross-references (reference "Scheme source file" "octave" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#octave")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "n" "Relative octave number. n can be positive or negative. The amount 0 is neutral.")) (description "Change octave on channel ch with n. Works in both absTime and deltaTime mode. ") (form "(octave channel n . messages)") (title "octave")) ((cross-references (reference "Scheme source file" "interpolate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#interpolate")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel number in the interval 1..16.")) (description "Put an interpolation note in between every note on the given channel. Works only in absTime mode. ") (form "(interpolate channel . messages)") (title "interpolate")) ((cross-references (reference "Scheme source file" "transpose" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#transpose")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "amount" "A relative number of half note values (positive or negative). The amount 0 is neutral.")) (description "Transpose all channels with amount. amount can be negative, 0 (for no transposition), or positive. Works for both deltaTime and absTime. ") (form "(transpose amount . messages)") (title "transpose")) ((cross-references (reference "Scheme source file" "transpose-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#transpose-channels")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "amount" "A relative number of half note values (positive or negative). The amount 0 is neutral.") (parameter "channel-list" "A list of channels. (A list of integers in the interval 1..16).")) (description "Transpose channels in channel-list with amount. amount can be negative, 0 (for no transposition), or positive. Works for both deltaTime and absTime. ") (form "(transpose-channels channel-list amount . messages)") (title "transpose-channels")) ((cross-references (reference "Scheme source file" "map-notes-in-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#map-notes-in-channels")) (kind "manual-page") (parameters (parameter "note-map" "A list of note pairs (each pair a list of symbols, of length 2).") (parameter "channel-list" "A list of channels. Elements belong to the interval 1..16.") (parameter "messages" "A list of midi messages.")) (description "Map the notes in channel-list to other notes. Notes in other channels are NOT affected. Notes in affected channels which are not mentioned in the note-map are removed. The note-map has the form as for example ((f c) (a e) (c g)). The note f is mapped to note c, etc. Each element in the list is a mapping-entry of source-note and target-note symbols. The possible note symbols are c, c#, d, d#, e, f, f#, g, g#, a, a#, b (or h). Lower and upper case symbols both work. The octave of the source notes is respected (although it is not controllable if the note 'goes up' or 'goes down'). ") (form "(map-notes-in-channels note-map channels-list . messages)") (misc "Intended to be used for corrections of the automatic accompaniment, played on several channels.") (title "map-notes-in-channels")) ((kind "manual-section") (section-title "Message List functions - Velocity related") (section-body "") (section-id "midi-list-fn-vel")) ((cross-references (reference "Scheme source file" "fade-out" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#fade-out")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Fade out linearly all channels in message-list. Works in both absTime and deltaTime mode. ") (form "(fade-out . messages)") (mode "Both deltaTime and absTime") (title "fade-out")) ((cross-references (reference "Scheme source file" "fade-out-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#fade-out-channels")) (kind "manual-page") (parameters (parameter "channel-list" "A list of channels. (A list of integers in the interval 1..16).") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Fade out linearly channelels in channel-list in message-list. Works in both absTime and deltaTime mode. ") (form "(fade-out . messages)") (mode "Both deltaTime and absTime") (title "fade-out-channels")) ((cross-references (reference "Scheme source file" "add-to-velocity" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#add-to-velocity")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "amount" "An amount to add to the velocity. Positive or negative.")) (description "Add amount to velocity of a given channel. If the volicity exceeds the limits (0..127) it is enforced to the lower/upper limit. Works in both absTime and deltaTime mode. ") (form "(add-to-velocity channel amount . messages)") (title "add-to-velocity")) ((kind "manual-section") (section-title "Message List functions - Duration related") (section-body "") (section-id "midi-list-fn-dur")) ((kind "manual-page") (parameters (parameter "channel." "A channel between 1 and 16. An integer.") (parameter "messages" "A list of midi messages.")) (description "Tie all notes in channel together, in order to eliminate breaks. This affects the duration of all notes in the given channel, such that one note lasts until the beginning of the next. More precisely, the duration becomes the maximum of the existing duration and the absTime difference between this note and the next (in the given channel). Non-channel notes and notes in other channels are not affected by this function. Works only in absTime mode (not checked). ") (form "(eliminate-breaks channel . messages)") (mode "absTime") (title "eliminate-breaks") (cross-references (reference "Scheme source file" "eliminate-breaks" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-breaks") (internal-references "More advanced variant" "legato-in-channel"))) ((kind "manual-page") (parameters (parameter "channel" "A channel number. An integer between 1 and 16.") (parameter "messages" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "time-slack-delta" "implied" "The allowed time slack for notes in channel to be considered as activated at the same time,\n                                    without being tied together mutually.\n                                    Defaults to 20. A number of time ticks. A non-negative integer.") (xml-in-laml-attribute "strict" "implied" "If strict, the duration between notes in channel becomes the time difference between them. Time slack still applies, however.\n                          If non-strict, the time may be longer (if the duration is already longer).\n                          A boolean (true or false).") (xml-in-laml-attribute "offset" "implied" "A number added to the duration in addition to the calculated duration. Can be used to enforce more overlapping, or less overlapping. A positive or negative integer.") (xml-in-laml-attribute "max-tie-span" "implied" "If provided, gives the maximum span (in terms of abs time difference) that we attempt to tie.\n                                The duration is only affected if it is less than the value of this attribute. A number of time ticks. If provided, a non-negative integer.\n                                If not provided, the max tie span is in principle infinitely large.\n                                This attribute must be #f in delta time mode.")) (description "Tie the notes in channel together - legato. Affects the duration attribute of notes in channel. Notes in other channels, and non-NoteOn messages, are not affected. Works in both time modes, but it is slightly more general in abs time mode than in delta time mode. ") (form "(legato-in-channel channel . messages)") (misc "This function takes care never to introduce negative duration (which causes severe confusion).") (title "legato-in-channel") (cross-references (reference "Scheme source file" "legato-in-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#legato-in-channel") (internal-references "Simpler variant" "eliminate-breaks"))) ((kind "manual-section") (section-title "Message List functions - Control Related and Misc") (section-body "") (section-id "midi-list-fn-others")) ((cross-references (reference "Scheme source file" "pan-flow" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pan-flow")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel number in the interval 1..16.") (parameter "pan-from" "The initial pan value. 64 is neutral, 0 is hard left, and 127 is hard right.") (parameter "pan-to" "The final pan value. 64 is neutral, 0 is hard left, and 127 is hard right.")) (description "Gradually pan a given channel from pan-from to pan-to. Works for both deltaTime and absTime. Inserts one ControlChange message for each relevant NoteOn message. The limits of pan-from and pan-to are 0..127. If exceeded, automatic cut off to min/max value is provided. ") (form "(pan-flow channel pan-from pan-to . messages)") (title "pan-flow")) ((cross-references (reference "Scheme source file" "pan-left-right" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pan-left-right")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel number in the interval 1..16.") (parameter "pan-level" "The initial pan level value. 64 is neutral, 0 is hard left, and 127 is hard right.")) (description "Gradually pan a given channel from pan-level towards left, then to the right and back to pan-level. Works for both deltaTime and absTime. Inserts one ControlChange message for each relevant NoteOn message. ") (form "(pan-left-right channel pan-level . messages)") (title "pan-left-right")) ((cross-references (reference "Scheme source file" "channel-volume-flow" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#channel-volume-flow")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel number in the interval 1..16.") (parameter "channel-volume-from" "The initial channel-volume value. An integer between 0 and 127.") (parameter "channel-volume-to" "The final channel-volume value. An integer between 0 and 127.")) (description "Gradually change the channel volume a given channel from channel-volume-from to channel-volume-to. Works for both deltaTime and absTime. The limits of channel-volume-from and channel-volume-to are 0..127. If exceeded, automatic cut off to min/max value is provided. ") (form "(channel-volume-flow channel channel-volume-from channel-volume-to . messages)") (title "channel-volume-flow")) ((cross-references (reference "Scheme source file" "no-sustain" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#no-sustain")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16, or #t as a wildchard for any channel.") (parameter "message-list" "A list of midi messages (such as NoteOn messages)")) (description "Eliminate all sustain ControlChange messages on the given channel in message-list. ") (form "(no-sustain channel . message-list)") (title "no-sustain")) ((cross-references (reference "Scheme source file" "eliminate-control-change" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-control-change")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16. The value #t serves as a wilchard for any channel.") (parameter "control" "A control number in the interval 0 ..127. The value #t serves as a wildchard for any control number.") (parameter "messages" "A list of midi messages.")) (description "Eliminate ControlChange messages in a given channel and with a given control number. Works in both deltaTime and absTime mode. ") (form "(eliminate-control-change channel control . messages)") (title "eliminate-control-change")) ((cross-references (reference "Scheme source file" "eliminate-channel-key-pressure" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-channel-key-pressure")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16. The value #t serves as a wilchard for any channel.") (parameter "messages" "A list of midi messages.")) (description "Eliminate ChannelKeyPressure messages in a given channel. Works in both deltaTime and absTime mode. ") (form "(eliminate-channel-key-pressure channel . messages)") (title "eliminate-channel-key-pressure")) ((cross-references (reference "Scheme source file" "eliminate-program-change" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-program-change")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16. The value #t serves as a wilchard for any channel.") (parameter "messages" "A list of midi messages.")) (description "Eliminate ProgramChange message in a given channel. Works in both deltaTime and absTime mode. ") (form "(eliminate-program-change channel . messages)") (title "eliminate-program-change")) ((cross-references (reference "Scheme source file" "eliminate-pitch-bend" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-pitch-bend")) (kind "manual-page") (parameters (parameter "channel" "A channel number in the interval 1..16. The value #t serves as a wilchard for any channel.") (parameter "messages" "A list of midi messages.")) (description "Eliminate PitchBench message in a given channel. Works in both deltaTime and absTime mode. ") (form "(eliminate-pitch-bend channel . messages)") (title "eliminate-pitch-bend")) ((cross-references (reference "Scheme source file" "revoice" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#revoice")) (kind "manual-page") (parameters (parameter "revoice-map" "A list of revoice entries. A revoice entry is a list of length two of the form ((msb-from lsb-from pc-from info) (msb-to lsb-to pc-to info)) where msb-from, lsb-from, pc-from, msb-to, lsb-to, and pc-to are integers. info is an informal optional string (the name of the voice).") (parameter "messages" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "revoice-file" "implied" "The name of a text file, to which a template of a revoice map is written. \n                              The templates are generated from the program change information in the source file (not from revoice-map).\n                              The generated template is a useful (but incomplete) starting point of revoice-map.\n                              If the attribute is not supplied, no info file is generated.")) (description "Revoice all ProgramChange events in the messages list according to revoice-map. In order to revoice, two appropropriate control change messages must occur before a program change message. If this is not the case, revoicing to general midi (GM) takes place. ") (form "(revoice revoice-map . messages)") (title "revoice")) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "info-file" "implied" "The name of a text file, to which a voice information is written. If not provided, no voice information is generated.")) (description "Eliminate ProgramChange messages and ControlChange messages that select voice banks (both the MSB and LSB variants). The elimination takes place by replacing the ProgramChange message with a Meta message which contain channel, MSB, LSB and program-number. In that way, it will be possible to provide for the reverse operation (not yet programmed). If the attribute info-file is provided, a text file with voice information is generated. The information is targeted at the Motif XS. Use the text file for convenient input of the voices in the Motif XS mixer. ") (form "(eliminate-voice-messages . messages)") (title "eliminate-voice-messages") (cross-references (reference "Scheme source file" "eliminate-voice-messages" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-voice-messages") (internal-references "more radical function" "clean-for-motif"))) ((kind "manual-page") (xml-in-laml-attributes (xml-in-laml-attribute "info-file" "implied" "The name of a text file, to which a voice information is written. If not provided, no voice information is generated.")) (description "Eliminate voice message (by use of the function eliminate-voice-messages) and remove all ControlChange messages (apart from Pedal Sustain). Also remove SysEx messages which pertain to Yamaha Tyros (43**4C). ") (form "(clean-for-motif . messages)") (title "clean-for-motif") (cross-references (reference "Scheme source file" "clean-for-motif" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#clean-for-motif") (internal-references "called function" "eliminate-voice-messages"))) ((cross-references (reference "Scheme source file" "clean-for-sectional-playing" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#clean-for-sectional-playing")) (kind "manual-page") (parameters (parameter "time-mode" "Either delta-time or abs-time (symbol or string).") (parameter "time-start" "The start time of the first NoteOn message. A number of ticks (non-negative integer).") (parameter "include-voice-messages?" "A boolean value that controls if voice related messages are included.")) (description "Rinse the prefix of messages for noise messages (Meta tempo, ProgramControl, certain ControlChanges, and PitchBendChange) If include-voice-messages? is true, also include voice related ProgramChange and ControlChange messages in the prefix. The first NoteOn message is set to start at time time-start (per time displacement done by this function). Normalize the time attribute of messages before the first NoteOn message, and time displace the rest. Rinse the NoteOn messages for tempo messages, ControlChange type 0 and 32, and ProgramChange messages. Setting of the tempo is supposed to be handled in the context of this function. Supports both absTime and deltaTime mode. ") (form "(clean-for-sectional-playing time-mode time-start include-voice-messages? . messages)") (misc "This function is used automatically when a delimited section is played from the Emacs MIDI LAML environment, hereby ensuring that playing starts immediately, and that it is not disturbed by inappropriate control messages.") (title "clean-for-sectional-playing")) ((kind "manual-page") (parameters (parameter "base-tempo" "The base tempo, which is scaled throughout the of generated Meta tempo events. Normally the tempo of the song. A real number.") (parameter "scale-fn" "The tempo scaling function: [0,1] -> Positive Real Number.")) (xml-in-laml-attributes (xml-in-laml-attribute "n" "implied" "The number of Meta tempo messages to produce. At least one. Defaults to the duration of messages divided by 960 (somewhat arbitrary).") (xml-in-laml-attribute "last-tempo" "implied" "If provided, the last Meta tempo event is forced to be last-tempo. A real number. ")) (description "Scale the tempo of the messages enclosed by this function. This is done by inserting a tempo change list in front of messages, as produced by make-tempo-change-list. The inserted tempo change list is adapted to the duration of messages. If the attribute last-tempo is not provided, the messages after the enclosed message list continues in the end tempo obtained by the scaling. ") (form "(tempo-scale base-tempo scaling-fn . messages)") (mode "absTime ") (title "tempo-scale") (cross-references (reference "Scheme source file" "tempo-scale" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#tempo-scale") (internal-references "uses" "make-tempo-change-list"))) ((kind "manual-page") (parameters (parameter "start-volumne" "The start-volumne which is scaled throughout the of generated ControlChange events. ") (parameter "scale-fn" "The volumne scaling function: [0,1] -> Positive Real Number.")) (xml-in-laml-attributes (xml-in-laml-attribute "n" "implied" "The number of ControlChange messages to produce. At least one. Defaults to the duration of messages divided by 960 (somewhat arbitrary).") (xml-in-laml-attribute "end-volumne" "implied" "If provided, the last ControlChange event is forced to prescribe end-volume.")) (description "Insert a volume change list in front of messages, as produced by make-volume-change-list. This controls the volumne of the messages of channel ch enclosed by this function The volumne change list is adapted to the duration of messages. If the attribute end-volume is not provide, the messages after the enclosed message list continues at the volumne obtained by the scaling. ") (form "(volume-scale ch start-volume scaling-fn . messages)") (mode "absTime ") (title "volume-scale") (cross-references (reference "Scheme source file" "volume-scale" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#volume-scale") (internal-references "uses" "make-volume-change-list"))) ((kind "manual-page") (description "Apply volume-scale multiple times as specified by volume-scale-list. An entry in volume-scale-list is of the form (channel start-vol scaling-fn [end-vol]). ") (form "(volume-scale-multi-channel volume-scale-list . messages)") (title "volume-scale-multi-channel") (cross-references (reference "Scheme source file" "volume-scale-multi-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#volume-scale-multi-channel") (internal-references "applied function" "volume-scale"))) ((cross-references (reference "Scheme source file" "insert-lyric" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#insert-lyric")) (kind "manual-page") (parameters (parameter "lyric-syllable-list" "A list of syllables (a list of strings/symbols).") (parameter "messages" "A list of midi messages.")) (description "Insert lyric elements from lyric-syllable-list in the empty Meta lyric in messages. ") (form "(insert-lyric lyric-syllable-list . messages)") (misc "First insert empty lyric meta mesages before all appropriate NoteOn midi messages. Then apply this function.") (title "insert-lyric")) ((kind "manual-section") (section-title "Standard Midi File functions.") (section-body "Functions which should be applied on a StandardMidiFile form.") (section-id "smf-functions")) ((cross-references (reference "Scheme source file" "smf-to-ppqn" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#smf-to-ppqn")) (kind "manual-page") (parameters (parameter "target-ppqn" "The desired target ppqn (an integer such as 480, 960, 1920).") (parameter "smf-ast" "An AST with root element name StandardMidiFile.") (parameter "context-mode" "Either top-level or nested (a symbol). Only in top-level context-mode action routines are executed.")) (description "Convert smf-ast (a StandardMidiFile) to target-ppqn. Does not affect the format of the midi laml file. Works both for format 0 and format 1 midi laml files. Also works for both absTime mode and deltaTime mode. ") (pre-condition "smf-ast must have element name StandardMidiFile.") (title "smf-to-ppqn") (form (smf-to-ppqn target-ppqn context-mode smf-ast))) ((cross-references (reference "Scheme source file" "smf-to-format-0" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#smf-to-format-0")) (kind "manual-page") (parameters (parameter "smf-ast" "A StandardMidiFile ast.") (parameter "context-mode" "Either top-level or nested (a symbol). Only in top-level context-mode action routines are executed.") (parameter "ppqn-distance-to-end-of-track" "The number of ppqn intervals between the last event and the end-of-track Meta event. Defaults to 8.")) (description "Convert the StandardMidiFile to format 0 by merging all tracks. If smf-ast is a format 1 midi laml file, merge all tracks. If smf-ast is already a format 0 midi laml file, this funciton is the identity function. Works in both absTime mode and deltaTime mode. This function takes care that there is only one end-of-track Meta event, located (* ppqn-distance-to-end-of-track ppqn) time units from last message in the resulting track. ") (form "(smf-to-format-0 context-mode smf-ast [ppqn-distance-to-end-of-track])") (title "smf-to-format-0")) ((kind "manual-page") (description "Convert a 'brainstorm recording' to a Motif XS format 0 midi file of ppqn 480. Just a convenient composition of smf-to-format-0 and smf-to-ppqn with a top-level application (enabeling action procedures). ") (title "recording-to-motif") (form (recording-to-motif smf-ast)) (cross-references (reference "Scheme source file" "recording-to-motif" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#recording-to-motif") (internal-references "Convenience variant" "rtm"))) ((kind "manual-page") (description "A convenience variant of the function recording-to-motif which, in addition, eliminates all ChannelKeyPressure messages. Most important, however, this function also inserts markers by means of the function marker-silence (with a constant 2000 silence-ticks). ") (title "rtm") (form (rtm smf-ast)) (cross-references (reference "Scheme source file" "rtm" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#rtm") (internal-references "More basic variant" "recording-to-motif"))) ((cross-references (reference "Scheme source file" "recording-to-tyros" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#recording-to-tyros")) (kind "manual-page") (description "Convert a 'brainstorm recording' to a Tyros format 0 midi file of ppqn 1920. Just a convenient composition of smf-to-format-0 and smf-to-ppqn. ") (title "recording-to-tyros") (form (recording-to-tyros smf-ast))) ((cross-references (reference "Scheme source file" "apply-to-tracks-nested" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#apply-to-tracks-nested")) (kind "manual-page") (parameters (parameter "ast" "A StandardMidiFile ast (format 0 or 1), or a MidiTrack ast.") (parameter "f" "A function of which the last parameter is a rest parameter of messages (a function generated by xml-in-laml-positional-abstraction or a similar function).") (parameter "f-parameter-list" "Parameters prior to the messages. Passed to f just before the messages.")) (description "Apply f on the messages of all tracks in ast (a StandardMidiFile or MidiTrack AST). In case the ast is a StandardMidiFile, it is considered to be nested into additional transformations, thus suppressing the execution of action routines. Reconstructs the context around the track and return an AST corresponding to the third parameter. ") (title "apply-to-tracks-nested") (form (apply-to-tracks-nested f f-parameter-list ast))) ((cross-references (reference "Scheme source file" "apply-to-tracks-top-level" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#apply-to-tracks-top-level")) (kind "manual-page") (parameters (parameter "ast" "A StandardMidiFile ast (format 0 or 1), or a MidiTrack ast.") (parameter "f" "A function of which the last parameter is a rest parameter of messages (a function generated by xml-in-laml-positional-abstraction or a similar function).") (parameter "f-parameter-list" "Parameters prior to the messages. Passed to f just before the messages.")) (description "Apply f on the messages of all tracks in ast (a StandardMidiFile or MidiTrack AST). In case the ast is a StandardMidiFile, it is considered to be at top-level, thus enabeling the execution of action routines. Reconstructs the context around the track and return an AST corresponding to the third parameter. ") (title "apply-to-tracks-top-level") (form (apply-to-tracks-top-level f f-parameter-list ast))) ((kind "manual-section") (section-title "Generation of Scaling Functions.") (section-body "Scaling functions are used for smooth scaling of attributes such as deltaTime, duration, and velocity. A scaling function has the simple signature [0,1] -> Real. The functions in this section generate such scaling functions. The next section contains concrete scaling functions. The most useful - and the most versatile - generator is make-scale-function-by-xy-points.") (section-id "scaling-function-generation")) ((cross-references (reference "Scheme source file" "make-scale-fn-pol-one-pol" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-scale-fn-pol-one-pol")) (kind "manual-page") (parameters (parameter "shape-start" "One of the symbols up, flat, or down.") (parameter "shape-end" "One of the symbols up, flat, or down.") (parameter "c" "The factor of the second degree term of the polynomial.") (parameter "d" "An x-value between 0 and 0.5. The generated function is constant 1 in the interval [d, 1-d].")) (description "Generates a positive, continuous scaling function which is constant one 'in the middle' and a second degree polynomial 'in the ends'. Given 0 <= d < 0.5: Generate and return a function f for which (f d) = 1 and (f (- 1 d)) = 1. For d < x < (- 1 d): f(x) = 1. For 0 < x < d: f(x) is polynomial or constant (depending on shape-start) For (- 1 d) < x < 1: f(x) is polynomial or constant (depending on shape-end) shape-start and shape-end is either the symbol up, flat or down. ") (returns "A positive, real-valued function (lambda (x) ...) where x is in the interval [0,1].") (title "make-scale-fn-pol-one-pol") (form (make-scale-fn-pol-one-pol shape-start shape-end c d))) ((cross-references (reference "Scheme source file" "make-scale-fn-pol-one-pol-general" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-scale-fn-pol-one-pol-general")) (kind "manual-page") (parameters (parameter "shape-start" "One of the symbols up, flat, or down.") (parameter "shape-end" "One of the symbols up, flat, or down.") (parameter "cs" "The factor of the second degree term of the polynomial used in the interval [0,ds].") (parameter "ce" "The factor of the second degree term of the polynomial used in the interval [1-de, 1].") (parameter "ds" "An x-value between 0 and 1. The generated function is constant 1 in the interval [ds, 1-de].") (parameter "de" "An x-value between 0 and 1. The generated function is constant 1 in the interval [ds, 1-de].")) (description "A generalization of f-identity-symmetric which uses separate parameters of the second degree polynomials at the start of the interval and at the end of the interval. ") (returns "A positive, real-valued function (lambda (x) ...) where x is in the interval [0,1].") (title "make-scale-fn-pol-one-pol-general") (form (make-scale-fn-pol-one-pol-general shape-start shape-end cs ds ce de))) ((kind "manual-page") (parameters (parameter "xy-list" "a list of (x,y) cons pairs which must contain at least (0, y0) and (1, y1) for some y0 and y1.")) (description "Return a scaling function composed by linear functions on subintervals of [0,1]. The functions from-percent-points and from-permille-points are helpful for creation of the xy-list parameter. ") (returns "A real-value function (lambda (x) ...) where x is in the interval [0,1]. Not necessarily positive valued.") (title "make-scale-function-by-xy-points") (form (make-scale-function-by-xy-points xy-list)) (cross-references (reference "Scheme source file" "make-scale-function-by-xy-points" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-scale-function-by-xy-points") (internal-references "Helper functions" "from-percent-points" "from-permille-points"))) ((cross-references (reference "Scheme source file" "multiply-scaling-function" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#multiply-scaling-function")) (kind "manual-page") (parameters (parameter "sf" "A real-value function.") (parameter "factor" "A real-valued number.")) (description "Multiply a scaling function sc my a factor, and return the new, scaled scaling function. ") (returns "A modified (scaled) real-valued scaling function.") (title "multiply-scaling-function") (form (multiply-scaling-function factor sf))) ((cross-references (reference "Scheme source file" "add-two-scaling-functions" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#add-two-scaling-functions")) (kind "manual-page") (description "Add two scaling functions with each other ") (title "add-two-scaling-functions") (form (add-two-scaling-functions sf1 sf2))) ((cross-references (reference "Scheme source file" "subtract-two-scaling-functions" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#subtract-two-scaling-functions")) (kind "manual-page") (description "Subtract two scaling functions with each other ") (title "subtract-two-scaling-functions") (form (subtract-two-scaling-functions sf1 sf2))) ((cross-references (reference "Scheme source file" "multiply-two-scaling-functions" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#multiply-two-scaling-functions")) (kind "manual-page") (description "Multiply two scaling functions with each other ") (title "multiply-two-scaling-functions") (form (multiply-two-scaling-functions sf1 sf2))) ((kind "manual-page") (parameters (parameter "point-lst" "A list of points. Each point is of the form (n m).")) (description "Return a list of points useful for make-scale-function-by-xy-points. Both x and y parameters are percentage values. They will therefore both be divided by 100. ") (returns "A list of cons pairs of the form (n/100 . m/100) suitable for input to make-scale-function-by-xy-points.") (title "from-percent-points") (form (from-percent-points point-lst)) (cross-references (reference "Scheme source file" "from-percent-points" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#from-percent-points") (internal-references "Use context" "make-scale-function-by-xy-points"))) ((kind "manual-page") (parameters (parameter "point-lst" "A list of points. Each point is of the form (n m).")) (description "Return a list of points useful for make-scale-function-by-xy-points. Both x and y parameters are permillage values. They will therefore both be divided by 1000. ") (returns "A list of cons pairs of the form (n/1000 . m/1000) suitable for input to make-scale-function-by-xy-points.") (title "from-permille-points") (form (from-permille-points point-lst)) (cross-references (reference "Scheme source file" "from-permille-points" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#from-permille-points") (internal-references "Use context" "make-scale-function-by-xy-points"))) ((kind "manual-section") (section-title "Examples of Scaling Functions.") (section-body "This section contains concrete scaling functions, as generated by the functions in the previous section. These scaling functions may serve as inspiration when new scaling functions are needed. As already mentioned above, a scaling function has the simple signature [0,1] -> Real. We link to SVG illustrations of the graphs of the scaling functions. When a new scaling function is developed it can be tried out in <a href = \"scaling-functions/try.laml\"> man/scaling-functions/try.laml </a> and visualized in <a href=\"scaling-functions/try.svg\"> man/scaling-functions/try.svg </a>. Consult the Scheme source to access the source form of the scaling function.") (section-id "scaling-functions")) ((kind "manual-page") (description "A scaling function ") (title "sf1") (form sf1) (cross-references (reference "Scheme source file" "sf1" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf1") (reference "Graphical illustration" "SVG" "scaling-functions/sf1.svg"))) ((kind "manual-page") (description "A scaling function ") (title "sf2") (form sf2) (cross-references (reference "Scheme source file" "sf2" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf2") (reference "Graphical illustration" "SVG" "scaling-functions/sf2.svg"))) ((kind "manual-page") (description "A scaling function ") (title "sf3") (form sf3) (cross-references (reference "Scheme source file" "sf3" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf3") (reference "Graphical illustration" "SVG" "scaling-functions/sf3.svg"))) ((kind "manual-page") (description "A scaling function ") (title "sf4") (form sf4) (cross-references (reference "Scheme source file" "sf4" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf4") (reference "Graphical illustration" "SVG" "scaling-functions/sf4.svg"))) ((kind "manual-page") (description "A scaling function ") (title "sf5") (form sf5) (cross-references (reference "Scheme source file" "sf5" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf5") (reference "Graphical illustration" "SVG" "scaling-functions/sf5.svg"))) ((kind "manual-page") (description "A scaling function ") (title "sf6") (form sf6) (cross-references (reference "Scheme source file" "sf6" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#sf6") (reference "Graphical illustration" "SVG" "scaling-functions/sf6.svg"))) ((kind "manual-section") (section-title "Midi region functions.") (section-body "This section contains function that establish regions around a list of midi messages.") (section-id "midi-region-functions")) ((cross-references (reference "Scheme source file" "midi-context" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-context")) (kind "manual-page") (parameters (parameter "continuation-name" "The formal name of the continuation that controls the emitted MIDI messages.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (examples (example "(midi-context select ... (midi-region-do select ...) ...)")) (description "Establish a context in which a smaller selection can be made. Defined as a macro. The context can be substituted by the selection inside it. Underlying, a continuation named select is captured. ") (form "(midi-context continuation-name . messages)") (title "midi-context")) ((cross-references (reference "Scheme source file" "midi-region-do" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-region-do")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "contextual-continuation" "The continuation to which messages are passed. This is normally the continuation established by the midi-context form.")) (description "Marks a region of midi messages. Pass them through to contextual-continuation and, if in absTime mode, time displace them to time 0. midi-region-do is used to select and play a selected part of a MIDI LAML file. ") (form "(midi-region-do contextual-continuation . messages)") (title "midi-region-do")) ((cross-references (reference "Scheme source file" "midi-region" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-region")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (xml-in-laml-attributes (xml-in-laml-attribute "name" "implied" "The name of the midi region") (xml-in-laml-attribute "drop" "implied" "A boolean attribute which allows for elimination of the region.")) (description "Marks a region of midi messages, with the purpose of adding additional structure to a MIDI LAML file (much like span and div in HTML). Pass them through to caller. Mark the region in the binary midi file with midi-comments. ") (form "(midi-region . midi-messages)") (title "midi-region")) ((kind "manual-section") (section-title "Single midi message abstractions.") (section-body "Abstractions that generate a single, or a few midi messages.") (section-id "sing-midi-abstractions")) ((cross-references (reference "Scheme source file" "midi-null-event-text" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-null-event-text")) (kind "manual-page") (description "The default midi null event info text. ") (title "midi-null-event-text") (form midi-null-event-text)) ((kind "manual-page") (parameters (parameter "delta-time" "The deltaTime of the midi-null-event. A non-negative integer.") (parameter "info-text" "The text of the midi null event. Defaults to the value of the global variable midi-null-event-text.")) (description "A deltaTime midi null event inserted at delta-time. The midi null event is neutral with respect to the midi sound. Implemented as a Meta event of type 1. ") (form "(midi-null-event delta-time [info-text])") (misc "Deprecated. Use midi-null-event-delta-time instead.") (title "midi-null-event") (cross-references (reference "Scheme source file" "midi-null-event" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-null-event") (internal-references "Similar Predicate" "midi-null-event-message?") (internal-references "Alias" "midi-null-event-delta-time") (internal-references "Similar function" "midi-null-event-abs-time"))) ((kind "manual-page") (parameters (parameter "delta-time" "The deltaTime of the midi-null-event. A non-negative integer.") (parameter "info-text" "The text of the midi null event. Defaults to the value of the global variable midi-null-event-text.")) (description "A deltaTime midi null event inserted at delta-time. The midi null event is neutral with respect to the midi sound. Implemented as a Meta event of type 1. ") (form "(midi-null-event-delta-time delta-time [info-text])") (title "midi-null-event-delta-time") (cross-references (reference "Scheme source file" "midi-null-event-delta-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-null-event-delta-time") (internal-references "Similar Predicate" "midi-null-event-message?") (internal-references "Alias of" "midi-null-event"))) ((cross-references (reference "Scheme source file" "midi-null-event-abs-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-null-event-abs-time")) (kind "manual-page") (parameters (parameter "abs-time" "The absTime of the midi-null-event. A non-negative integer.") (parameter "info-text" "The text of the midi null event. Defaults to the value of the global variable midi-null-event-text.")) (description "An absTime midi null event, inserted at abs-time. The midi null event is neutral with respect to the midi sound. Implemented as a Meta event of type 1. ") (form "(midi-null-event-abs-time abs-time [info-text])") (title "midi-null-event-abs-time")) ((cross-references (reference "Scheme source file" "midi-comment" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-comment")) (kind "manual-page") (parameters (parameter "text-strings" "Textual contents, in term of zero, one or several strings.")) (description "Return a deltaTime meta event which can act as a comment in the midi file. Inserted at deltaTime 0. ") (form "(midi-comment . text-strings)") (title "midi-comment")) ((cross-references (reference "Scheme source file" "midi-comment-abs-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-comment-abs-time")) (kind "manual-page") (parameters (parameter "abs-time" "The absolute-time in which to insert the midi comment.") (parameter "text-strings" "Textual contents, in term of zero, one or several strings.")) (description "Return ad absTime meta event which can act as a comment in the midi file. ") (form "(midi-comment-abs-time abs-time . text-strings)") (title "midi-comment-abs-time")) ((cross-references (reference "Scheme source file" "midi-comment-delta-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-comment-delta-time")) (kind "manual-page") (parameters (parameter "delta-time" "The delta-time in which to insert the midi comment.") (parameter "text-strings" "Textual contents, in term of zero, one or several strings.")) (description "Return a deltaTime meta event which can act as a comment in the midi file. ") (form "(midi-comment-delta-time delta-time . text-strings)") (title "midi-comment-delta-time")) ((cross-references (reference "Scheme source file" "midi-marker" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-marker")) (kind "manual-page") (parameters (parameter "marker-txt" "The text of the marker. (A string).") (parameter "marker-number" "An integer marker number. Defaults to 0.") (parameter "marker-letter" "A string of length one containing the marker letter. Defaults to \"M\".")) (description "Return a deltaTime meta event of type 6 - a marker event. The marker text has the form: <marker-letter>-<maker-number> <marker-txt>. The meta event gets deltaTime 0. ") (form "(midi-marker marker-txt [marker-number marker-letter])") (title "midi-marker")) ((cross-references (reference "Scheme source file" "midi-marker-abs-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#midi-marker-abs-time")) (kind "manual-page") (parameters (parameter "abs-time" "The absolute time of the MIDI marker (an integer og a text string). ") (parameter "marker-txt" "The text of the marker. (A string).") (parameter "marker-number" "An integer marker number. Defaults to 0.") (parameter "marker-letter" "A string of length one containing the marker letter. Defaults to \"M\".")) (description "Return an absTime meta event of type 6 - a marker event timed at abs-time. The marker text has the form: <marker-letter>-<maker-number> <marker-txt>. ") (form "(midi-marker-abs-time abs-time marker-txt [marker-number marker-letter])") (title "midi-marker-abs-time")) ((cross-references (reference "Scheme source file" "pan" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pan")) (kind "manual-page") (parameters (parameter "c" "A channel number between 1 and 16.") (parameter "value" "The pan value. 64 is neutral, 0 is hard left, and 127 is hard right.")) (description "Set the PAN of channel c to value. Returns a single MIDI ControlChange event. Inserted at deltaTime 0. ") (title "pan") (form (pan c value))) ((cross-references (reference "Scheme source file" "volume" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#volume")) (kind "manual-page") (parameters (parameter "c" "A channel number between 1 and 16.") (parameter "value" "The volumen value between 0 and 127.")) (description "Set the volumen of channel c to value. Returns a single MIDI ControlChange event. Inserted at deltaTime 0. ") (title "volume") (form (volume c value))) ((cross-references (reference "Scheme source file" "reverb" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#reverb")) (kind "manual-page") (parameters (parameter "c" "A channel number between 1 and 16.") (parameter "value" "The volumen value between 0 and 127.")) (description "Set the level of reverb of channel c to value. Returns a single MIDI ControlChange event. Inserted at deltaTime 0. ") (title "reverb") (form (reverb c value))) ((cross-references (reference "Scheme source file" "chorus" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#chorus")) (kind "manual-page") (parameters (parameter "c" "A channel number between 1 and 16.") (parameter "value" "The volumen value between 0 and 127.")) (description "Set the level of chorus of channel c to value. Returns a single MIDI ControlChange event. Inserted at deltaTime 0. ") (title "chorus") (form (chorus c value))) ((kind "manual-page") (parameters (parameter "channel" "A channel number (between 1 and 16)") (parameter "msb" "Most significant byte of bank number. An integer between 0 and 127.") (parameter "lsb" "Least significant byte of bank number. An integer between 0 and 127.") (parameter "program-number." "The Standard MIDI program number.")) (description "Emit two channel change messages (msb/lsb) and a program change message. You should look up msb/lsb bank number and program number in a midi reference sheet. The program number is according to the general midi specification. All events are inserted at deltaTime 0. ") (title "voice") (form (voice channel msb lsb program-number)) (cross-references (reference "Scheme source file" "voice" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#voice") (internal-references "Alternative functions" "gm-voice" "voices-from-file" "voice-with-mix"))) ((kind "manual-page") (parameters (parameter "channel" "A channel number (between 1 and 16)") (parameter "msb" "Most significant byte of bank number. An integer between 0 and 127.") (parameter "lsb" "Least significant byte of bank number. An integer between 0 and 127.") (parameter "program-number." "The Standard MIDI program number.") (parameter "v." "The amount of volume. An integer between 0 and 127.") (parameter "p." "The amount of pan. An integer between 0 and 127.") (parameter "r." "The amount of reverb. An integer between 0 and 127.") (parameter "c." "The amount of chorus. An integer between 0 and 127.")) (description "Emit two channel change messages (msb/lsb) and a program change message together with control messages for volume, pan, reverb and chorus. All events are inserted at deltaTime 0. ") (title "voice-with-mix") (form (voice-with-mix channel msb lsb program-number v p r c)) (cross-references (reference "Scheme source file" "voice-with-mix" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#voice-with-mix") (internal-references "Simpler function" "voice"))) ((kind "manual-page") (parameters (parameter "channel" "A channel number (between 1 and 16)") (parameter "program." "A program number (between 0 and 127) or a full/partial case-insensitive GM voice name.")) (description "A specialized General Midi version of the voice function. ") (title "gm-voice") (form (gm-voice channel program)) (cross-references (reference "Scheme source file" "gm-voice" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#gm-voice") (internal-references "More general function" "voice") (internal-references "Alternative function" "voices-from-file"))) ((kind "manual-page") (parameters (parameter "voice-file" "Either a voice file name (with or without 'voices' extension) in the current directory, or a full path to a voice file (without extension). Defaults to a voice file with the same proper name as the enclosing midi laml (midl) file.")) (description "Return a list of voice messages (ProgramChange and ControlChange of control type 0 and 32) for the voices requested in voice-file. A voice file can be generated interactively from a so-called voice collection of a voice browser in the MIDI LAML environment. A voice collection file has the extension 'voices'. ") (form "(voices-from-file [voice-file])") (returns "A list of ASTs.") (title "voices-from-file") (cross-references (reference "Scheme source file" "voices-from-file" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#voices-from-file") (internal-references "More basic functions" "voice" "voice-with-mix" "gm-voice"))) ((cross-references (reference "Scheme source file" "tempo" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#tempo")) (kind "manual-page") (description "Return a tempo Meta event, for tempo bpm, at deltaTime 0. ") (title "tempo") (form (tempo bpm))) ((kind "manual-page") (parameters (parameter "channel" "A channel number (between 1 and 16)") (parameter "range" "An integer between 1 and 12 (half tones). Typical range: 2.") (parameter "cents" "An integer between 0 and 100, for fine adjustments. Defaults to 0.")) (description "Emit four control change messages which control the pitch-bend-range, in half tones and cents, for the given channel. All events are inserted at deltaTime 0. ") (form "(pitch-bend-range channel range [cents])") (title "pitch-bend-range") (cross-references (reference "Scheme source file" "pitch-bend-range" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pitch-bend-range") (internal-references "Pitch bend constructor" "make-pitch-bend-change-list"))) ((kind "manual-page") (parameters (parameter "root" "The name of the root note. One of \"C\" \"C#\" \"D\" \"D#\" \"E\" \"F\" \"F#\" \"G\" \"G#\" \"A\" \"A#\" \"B\" (a string).") (parameter "chord-type" "The name of a chord type, the default of which is \"M\". One of \"1+8\" \"1+5\" \"M\" \"6\" \"M7\" \"M7b5\" \"M7(#11)\" \"9\" \"M7_9\" \"6_9\" \"b5\" \"aug\" \"7aug\" \"M7aug\" \"m\" \"m6\" \"m7\" \"m7b5\" \"m(9)\" \"m7(9)\" \"m7(11)\" \"mM7b5\" \"mM7\" \"mM7(9)\" \"dim\" \"dim7\" \"7\" \"7sus4\" \"7(9)\" \"7(#11)\" \"7(13)\" \"7b5\" \"7(b9)\" \"7(b13)\" \"7(#9)\" \"sus4\" \"sus2\" (a string).")) (description "Create a Yamaha Tyros Meta event (with deltaTiming, value 0) that encodes a given root and chord-type. The chord-type is optional, and it defaults to \"M\" (for major). ") (form "(chord-meta root [chord-type])") (misc "Please notice that upper/lower case is important in the chord-type parameter (but not in the root parameter).") (title "chord-meta") (cross-references (reference "Scheme source file" "chord-meta" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#chord-meta") (reference "Examples" "Midi LAML examples" "../examples/chord-meta/index.html"))) ((cross-references (reference "Scheme source file" "lyrics" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#lyrics")) (kind "manual-page") (parameters (parameter "txt" "A lyrics contribution (a text string).")) (description "Create a lyrics meta event with the given text. The lyrics meta event is inserted at deltaTime 0. ") (misc "Yamaha Tyros observation: Do not use the Danish \201\330, \201\370, \201\306, and \201\346 in the text. The Danish \201\345 and \201\305 are OK.") (title "lyrics") (form (lyrics txt))) ((kind "manual-page") (parameters (parameter "root" "The name of the root. One of \"C\" \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\". (A string).") (parameter "chord-type" "The name of a chord type. One of \"1+8\" \"1+5\" \"M\" \"6\" \"M7\" \"M7b5\" \"M7(#11)\" \"9\" \"M7_9\" \"6_9\" \"b5\" \"aug\" \"7aug\" \"M7aug\" \"m\" \"m6\" \"m7\" \"m7b5\" \"m(9)\" \"m7(9)\" \"m7(11)\" \"mM7b5\" \"mM7\" \"mM7(9)\" \"dim\" \"dim7\" \"7\" \"7sus4\" \"7(9)\" \"7(#11)\" \"7(13)\" \"7b5\" \"7(b9)\" \"7(b13)\" \"7(#9)\" \"sus4\" \"sus2\". (A string).") (parameter "start-octave" "an octave number. Octave number 3 contains the middle C (note 60) - according the yamaha convention. Within the interval [-2..8]. (An integer).") (parameter "number-of-octaves" "The number of octaves the play the cord. A positive integer.") (parameter "time-delta" "The delta-time of each generated NoteOn message.") (parameter "duration" "The durationof each generated NoteOn message.") (parameter "channel" "The channel of the generated NoteOn messages. Defaults to channel 1.") (parameter "velocity" "The velocity of the generated NoteOn messages. Defaults to channel 80.")) (description "Play a given chord progression as a (maybe long) number of NoteOn messages, mostly for chord demo purposes. The progression is allways ended by the root note. A list of deltaTime NoteOn messages are created. Each note has deltaTime time-delta. Each played note will last duration time units There will be time-delta between notes in the played chord (meassured in basic type units, 1920 pr. quarter note on tyros). ") (form "(play-chord root chord-type start-octave number-of-octaves time-delta duration [channel velocity])") (title "play-chord") (cross-references (reference "Scheme source file" "play-chord" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#play-chord") (reference "Examples" "Midi LAML examples" "../examples/play-chord/index.html"))) ((cross-references (reference "Scheme source file" "strum-1" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#strum-1")) (kind "manual-page") (parameters (parameter "length" "The number notes produced in case of a match (a non-negative integer)") (parameter "root" "The name of the root note. One of \"C\" \"C#\" \"D\" \"D#\" \"E\" \"F\" \"F#\" \"G\" \"G#\" \"A\" \"A#\" \"B\" (a string).") (parameter "chord-type" "The name of a chord type. One of \"1+8\" \"1+5\" \"M\" \"6\" \"M7\" \"M7b5\" \"M7(#11)\" \"9\" \"M7_9\" \"6_9\" \"b5\" \"aug\" \"7aug\" \"M7aug\" \"m\" \"m6\" \"m7\" \"m7b5\" \"m(9)\" \"m7(9)\" \"m7(11)\" \"mM7b5\" \"mM7\" \"mM7(9)\" \"dim\" \"dim7\" \"7\" \"7sus4\" \"7(9)\" \"7(#11)\" \"7(13)\" \"7b5\" \"7(b9)\" \"7(b13)\" \"7(#9)\" \"sus4\" \"sus2\" (a string).")) (description "Add strum (a sequence of chord adapted notes) to all matching notes in messages. Similar to strum-2, but this version takes explicit, positional chord root, chord type and strum length parameters. A given notes matches a chord and a root if the note is present in the chord sequence made by root and chord-type. If the chord does not match a note, just return the note. Else return a longer chord adapted list ending with note-on-ast. Should only be used on absTime (?). The parameters lgt, root, chord-type, delta-time, duration, channel and velocity is as for noteon-sequence-ending-at. ") (form "(strum-1 length root chord-type . messages)") (title "strum-1")) ((cross-references (reference "Scheme source file" "strum-2" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#strum-2")) (kind "manual-page") (description "Add strum (a sequence of chord adapted notes) to all matching notes in messages. Similar to strum-1, but this version takes chord root, chord type and strum length from attributes of NoteOn. The strum-length attribute defaults to 4 in the context of this function. The chord-type defaults to major (\"M\"). This \"C\" and \"C#\" are legal chord attribute values of NoteOn elements. They are identical to \"CM\" and \"C#M\". A given notes matches a chord and a root if the note is present in the chord sequence made by root and chord-type. If the chord does not match a note, just return the note. Else return a longer chord adapted list ending with note-on-ast. Should only be used on absTime (?). The chord root, chord type, and strum length are taken from the chord and strum-length attributes of the NoteOn elements. ") (form "(strum-2 . messages)") (title "strum-2")) ((cross-references (reference "Scheme source file" "strum-3" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#strum-3")) (kind "manual-page") (description "Add strum (a sequence of chord adapted notes) to all matching notes in messages which belong to channel. Similar to strum-1, but this version takes chord root, chord type from Meta events, maybe and typically generated from the accompaniment of Keyboard. It may also take chord information from a chord attribute of NoteOn messages. As a distinctive feature of this version of strum, the chord information is carried through the messages. The strum-length attribute defaults to 4 in the context of this function, but it can change if a NoteOn messages carries a strum-length attribute. A given notes matches a chord and a root if the note is present in the chord sequence made by root and chord-type. If the chord does not match a note, just return the note. Else return a longer chord adapted list ending with note-on-ast. Should only be used on absTime (?). ") (form "(strum-3 channel . messages)") (title "strum-3")) ((kind "manual-page") (parameters (parameter "ch" "Channel number (between 1 and 16).") (parameter "n" "The number of PitchBendChange messages to produce. Minimum value: 2") (parameter "duration" "The total duration of the list of PitchBendChange messages. Only accurate if the first-delta-time is the default value.") (parameter "scale-fn" "The scaling function: [0,1] -> [-1, 1].") (parameter "first-delta-time" "The delta time of the first PichBendChange message. Defaults to the calculated deltaTime of all PitchBendChange messages. It may, in some situations, be useful to use a negative value of this parameter to facilitate an earlier insertion point than the physical location of the make-pitch-bend-change-list form.")) (description "Return a list of n deltaTimed PitchBendChange midi events for channel ch with a total duration. The list returned is a flat list of deltaTime PitchBendChange events. The value of the PitchBendChange events are scaled by a standard scaling function, scale-fn. Scaling functions are functions from [0,1] -> Real. Per convention of this function, the scaling value 0 corresponds to 8192 (pitch bend neutral). Scaling value 1 corresponds to 16383, and scaling value -1 correponds to 0. ") (form "(make-pitch-bend-change-list ch n duration scale-fn [first-delta-time])") (title "make-pitch-bend-change-list") (cross-references (reference "Scheme source file" "make-pitch-bend-change-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-pitch-bend-change-list") (internal-references "Scaling functions" "scaling-function-generation") (internal-references "Pitch bend calibration" "pitch-bend-range"))) ((kind "manual-page") (parameters (parameter "n" "The number of Meta tempo messages to produce. At least one.") (parameter "duration" "The total duration of the list of Meta tempo messages (in time ticks).") (parameter "base-tempo" "The base tempo, which is scaled throughout the of generated Meta tempo events. A real number.") (parameter "scale-fn" "The scaling function: [0,1] -> Positive Real Number.") (parameter "last-tempo" "If provided, the last Meta tempo event is forced to be last-tempo. A real number.")) (description "Return a list of n deltaTimed tempo Meta events with a total length of duration. Scales the base tempo with scale-fn. ") (form "(make-tempo-change-list n duration base-tempo scale-fn [last-tempo])") (title "make-tempo-change-list") (cross-references (reference "Scheme source file" "make-tempo-change-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-tempo-change-list") (internal-references "Scaling functions" "scaling-function-generation"))) ((kind "manual-page") (parameters (parameter "n" "The number of ControlChange messages to produce. At least one.") (parameter "duration" "The total duration of the list of ControlChange messages (in time ticks).") (parameter "start-volumne" "The start volume which is scaled throughout the of generated ControlChange list.") (parameter "scale-fn" "The scaling function: [0,1] -> Positive Real Number.") (parameter "end-volumne" "If provided, the end volumne value is forced to be end-volume.")) (description "Return a list of n deltaTimed ControlChange type 7 'channel volume\" events with a total length of duration. Scales the start-volume with scale-fn. ") (form "(make-volume-change-list ch n duration start-volume scale-fn [end-volumne])") (title "make-volume-change-list") (cross-references (reference "Scheme source file" "make-volume-change-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#make-volume-change-list") (internal-references "Scaling functions" "scaling-function-generation"))) ((kind "manual-section") (section-title "Channel replication, (copying), rechanneling, joining, and selection.") (section-body "") (section-id "channel-repl-join-sel")) ((kind "manual-page") (parameters (parameter "ch-from" "A channel (an integer between 1 and 16)") (parameter "ch-to" "A channel (an integer between 1 and 16)") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Replicate each message of a given channel in message-list. Allocate each replicated message in channel ch-to. Existing messages in ch-to are not affected. It may be useful to use target channels outside the interval [1..16] for temporary purposes. Each message belonging to channel ch-to is immediately replicated. (This is a contrast to the function replicate, which serves as \"verse replication\"). ") (form "(replicate-channel ch-from ch-to . messages)") (title "replicate-channel") (cross-references (reference "Scheme source file" "replicate-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#replicate-channel") (internal-references "More general functions" "replicate-by-predicate" "replicate-by-predicate-and-transformation"))) ((kind "manual-page") (parameters (parameter "predicate" "A midi message predicate. If true, replicate the message to channel ch-to.") (parameter "ch-to" "A channel (an integer between 1 and 16)") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Replicate each channel-message that satisfies the predicate. Allocate each replicated message to channel ch-to. Existing messages in ch-to are not affected. Midi messages that do not satisfy the predicate are not affected. Non-channel messages are not affected. Works in both absTime and deltaTime mode. ") (form "(replicate-by-predicate predicate ch-to . messages)") (title "replicate-by-predicate") (cross-references (reference "Scheme source file" "replicate-by-predicate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#replicate-by-predicate") (internal-references "More general function" "replicate-by-predicate-and-transformation") (internal-references "More basic function" "replicate-channel"))) ((kind "manual-page") (parameters (parameter "predicate" "A midi message predicate. If true, replicate the message to channel ch-to.") (parameter "transformation" "A function that transforms a single midi message (passed by the predicate) to either a single AST, or a list of ASTs.") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "A generalization of replicate-by-predicate, which passes the message to be replicated to a transformation function. Replicates a channel message. The replications are returned by the transformation function when passed a channel message. Only replicate those messages that satisfy the predicate. Midi messages that do not satisfy the predicate are not affected. Non-channel messages are not affected. Works in both absTime and deltaTime mode. ") (form "(replicate-by-predicate predicate transformation . messages)") (title "replicate-by-predicate-and-transformation") (cross-references (reference "Scheme source file" "replicate-by-predicate-and-transformation" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#replicate-by-predicate-and-transformation") (internal-references "More basis functions" "replicate-by-predicate" "replicate-channel"))) ((cross-references (reference "Scheme source file" "join-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#join-channels")) (kind "manual-page") (parameters (parameter "channel-list" "A list of channel numbers (an integer list).") (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Join (remove) messages in channel-list, and instead assign these to channel ch-to. Existing messages in ch-to are not affected. It is allowed to use source/target channels outside the interval [1..16], which are discared upon midi generation. (If you use channels outside the interval [1..16] it may affect the timing of the remaining events. Therefore it is recommended to stay inside the interval [1.16]). ch-to is allowed to be one of the channels in channel-list. ") (form "(join-channels channel-list ch-to . messages)") (paramter "ch-to  A channel number (between 1 and 16).") (title "join-channels")) ((cross-references (reference "Scheme source file" "select-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#select-channel")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel (an integer between 1 and 16)")) (description "Return only those messages from message-list which belong to the given channel. Also include messages without a channel assigned to them. Works in both absTime and deltaTime mode. ") (form "(select-channel channel . messages)") (title "select-channel")) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel (an integer between 1 and 16)")) (description "Delete those messages from message-list which belong to the given channel. In this version the deleted messages are substituted by midi null events. As a consequence, the function works in both absTime and deltaTime mode. ") (form "(delete-channel channel . messages)") (title "delete-channel") (cross-references (reference "Scheme source file" "delete-channel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delete-channel") (internal-references "absTime only variant" "delete-channel-abstime"))) ((kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "channel" "A channel (an integer between 1 and 16)")) (description "Delete those messages from message-list which belong to the given channel. The messages disappear entirely. ") (form "(delete-channel-abs-time channel . messages)") (mode "absTime ") (title "delete-channel-abs-time") (cross-references (reference "Scheme source file" "delete-channel-abs-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#delete-channel-abs-time") (internal-references "Mode independent version" "delete-channel"))) ((cross-references (reference "Scheme source file" "select-channels" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#select-channels")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages) or #t in the meaning of all channels.") (parameter "channel-list" "A list of channel numbers (an integer list).")) (description "Select (project) to only those channels of channel-list. Also include messages without a channel assigned to them. ") (form "(select-channels channel-list . messages)") (title "select-channels")) ((cross-references (reference "Scheme source file" "rechannel" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#rechannel")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages.") (parameter "channel-map" "An association list of channel numbers that map a source channel to a target channel. Example: ((3 . 1) (9 . 7) (10 . 8) (11 . 7) (12 . 2) (13 . 3)).")) (description "Rechannel (change channel numbers) messages according to channel-map. Channel not addressed in the channel-map are not affected. Non-channel messages are not affected. ") (form "(rechannel channel-map . messages)") (title "rechannel")) ((cross-references (reference "Scheme source file" "eliminate-midi-null-events" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-midi-null-events")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)")) (description "Eliminate midi null events in all channels. Works in both absTime and deltaTime mode. ") (form "(eliminate-midi-null-events . messages)") (title "eliminate-midi-null-events")) ((cross-references (reference "Scheme source file" "eliminate-events" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#eliminate-events")) (kind "manual-page") (parameters (parameter "messages" "A list of midi messages (such as NoteOn messages)") (parameter "predicate" "A predicate which is guarantied to be called on an AST.")) (description "Eliminate events that matches the predicate. The elimination is done independent of channel. Works in both absTime and deltaTime mode. ") (form "(eliminate-events predicate . messages)") (title "eliminate-events")) ((kind "manual-page") (parameters (parameter "channel" "The channel in which to split the NoteO messages.") (parameter "predicate" "An AST predicate (guarantied to be called on a NoteOn AST).") (parameter "channel-true" "The target channel of those NoteOn messages in channel for which the predicate holds.") (parameter "channel-false" "The target channel of those NoteOn messages in channel for which the predicate does not hold.")) (description "Split the NoteOn events in the given channel to two channels. The NoteOn events in channel that satisfy the predicate will be located in channel-true, and those that do not will be located in channel-false. Midi events in other channels, and non-channel events are not affected. channel-true or channel-false are allowed to be the samme as channel. Works in both deltaTime mode and absTime mode. ") (form "(split-channel-by-predicate channel predicate channel-true channel-false . messages)") (misc "Intended for splitting the left hand and right hand of a piano piece.") (title "split-channel-by-predicate") (cross-references (reference "Scheme source file" "split-channel-by-predicate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-channel-by-predicate") (internal-references "Context-sensitive variant" "split-channel-by-contextual-predicate"))) ((kind "manual-page") (parameters (parameter "channel" "The channel in which to split the NoteO messages.") (parameter "predicate" "A prediate of two parameters: (1) A NoteOn midi message, and (2) an additional NoteOn context list.") (parameter "channel-true" "The target channel of those NoteOn messages in channel for which the predicate holds.") (parameter "channel-false" "The target channel of those NoteOn messages in channel for which the predicate does not hold.")) (xml-in-laml-attributes (xml-in-laml-attribute "behind-context" "implied" "The number of time ticks of the context behind the current NoteOn message. A non-negative integer. Defaults to 240.") (xml-in-laml-attribute "ahead-context" "implied" "The number of time ticks of the context ahead of the current NoteOn message. A non-negative integer. Defaults to 240.")) (description "Split the NoteOn events in the given channel to two channels. In contrast to the function split-channel-predicate, the contextual NoteOn events are passed to the predicate in addition to the actual NoteOn midi event. The NoteOn events in channel that satisfy the predicate will be located in channel-true, and those that do not will be located in channel-false. Midi events in other channels, and non-channel events are not affected by this function. channel-true or channel-false are allowed to be the samme as channel. ") (form "(split-channel-by-contextual-predicate channel predicate channel-true channel-false . messages)") (mode "absTime ") (misc "Intended for splitting the left hand and right hand of a piano piece.") (title "split-channel-by-contextual-predicate") (cross-references (reference "Scheme source file" "split-channel-by-contextual-predicate" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-channel-by-contextual-predicate") (internal-references "Context-free variant" "split-channel-by-predicate"))) ((kind "manual-section") (section-title "Midi transformations on given bars.") (section-body "") (section-id "bar-transformations")) ((kind "manual-page") (parameters (parameter "channels" "A list of channels (a list of integers)") (parameter "section-list" "A list of sections to be inserted. Each section is itself a list, which has the form (bar-number number-of-bars replacement-list).") (parameter "message-list" "A list of midi messages.")) (description "Substitute sections of the midi message-list with sections from section-list. The midi message-list must be in absTime mode and the replacements must be in deltaTime mode. (This is not checked). The affected sections in the midi message-list are identified by bar. Only messages in the given channels are substituted. The inserted sections are replicated to fill the requested number of bars (but they are never divided). ") (form "(substitute-section-by-bar channels section-list . message-list)") (title "substitute-section-by-bar") (cross-references (reference "Scheme source file" "substitute-section-by-bar" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#substitute-section-by-bar") (internal-references "Similar abstime function" "substitute-section-by-time"))) ((kind "manual-page") (parameters (parameter "channels" "A list of channels (a list of integers)") (parameter "section-list" "A list of sections to be thinned out. Each section is itself a list, which has the form (bar-number number-of-bars abs-time-keep-predicate).") (parameter "message-list" "A list of midi messages.")) (description "Thin out sections of the midi message-list by means of abs-time predicates. The midi message-list must be in absTime mode. The affected sections in the midi message-list are identified by bar. Only messages in the given channels are thinned out. ") (form "(thin-out-section-by-bar channel section-list . message-list)") (title "thin-out-section-by-bar") (cross-references (reference "Scheme source file" "thin-out-section-by-bar" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#thin-out-section-by-bar") (reference "Examples" "Midi LAML examples" "../examples/thin-out/index.html") (internal-references "Predicate generator" "keep-beat") (internal-references "Simpler variant" "thin-out-messages-abs-time"))) ((kind "manual-page") (parameters (parameter "channels" "A list of channels (a list of integers)") (parameter "section-list" "A list of sections in which to scale the velocity. Each section is itself a list, which has the form (bar-number number-of-bars scaling-function).") (parameter "message-list" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "min-velocity" "implied" "The smallest possible velocity. Defaults to 0. Serves as a lower limit cut off value.") (xml-in-laml-attribute "max-velocity" "implied" "The largest possible velocity. Defaults to 127. Serves as an upper limit cut off value.")) (description "Scale the velocity of NoteOn messages, in selected channels, in given bars. The midi message-list must be in absTime mode (not checked). The affected sections in the midi message-list are identified by bar. Only messages in the given channels are affected ") (form "(scale-velocity-of-sections-by-bar channels section-list . message-list)") (title "scale-velocity-of-sections-by-bar") (cross-references (reference "Scheme source file" "scale-velocity-of-sections-by-bar" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-velocity-of-sections-by-bar") (reference "Examples" "Midi LAML examples" "../examples/velocity-scaling/index.html") (internal-references "Similar time function" "scale-velocity-of-sections-by-time"))) ((cross-references (reference "Scheme source file" "envelope-sections-by-bar" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#envelope-sections-by-bar")) (kind "manual-page") (parameters (parameter "section-list" "A list of sections to be inserted. Each section is itself a list, which has the form (bar-number number-of-bars pre-envelope-list post-envelope-list). The deltaTime messages in pre-envelope-list is inserted at the beginning of the section. The deltaTime messages in post-envelope-list is inserted at the beginning of the section. .parameter message-list A list of midi messages.")) (description "Envelope sections of the midi message-list with pieces from section-list. The midi message-list must be in absTime mode and pieces from the section-list must be in deltaTime mode. (This is not checked). The affected sections in the midi message-list are identified by bar. ") (form "(envelope-section-by-bar section-list . message-list)") (title "envelope-sections-by-bar")) ((kind "manual-section") (section-title "Midi transformations on sections.") (section-body "The functions in this section are similar to the functions in the previous sections. The main difference is that the functions in this section work on sections, identified by absolute time ticks, not bar numbers. The function time-of-marker allows for identification of sections by markers.") (section-id "")) ((kind "manual-page") (parameters (parameter "channels" "A list of channels (a list of integers).") (parameter "section-list" "A list of sections to be inserted. Each section is itself a list, which has the form (time-start time-end replacement-list).") (parameter "message-list" "A list of midi messages.")) (description "Substitute sections of the midi message-list with sections from section-list. The midi message-list must be in absTime mode and the replacements must be in deltaTime mode. (This is not checked). The affected sections in the midi message-list are identified by time. Only messages in the given channels are substituted. The inserted sections are stretched to fill the requested number of bars. In addition it stretches the replacement-list to fit the given time interval [start-time - end-time]. It does not replicate the replacement list. ") (form "(substitute-section-by-time channels section-list . message-list)") (misc "Compared with substitute-section-by-bar this function identifies regions with absolute times, not bar number and bar length.") (title "substitute-section-by-time") (cross-references (reference "Scheme source file" "substitute-section-by-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#substitute-section-by-time") (internal-references "Similar bar function" "substitute-section-by-bar"))) ((kind "manual-page") (parameters (parameter "channels" "A list of channels (a list of integers)") (parameter "section-list" "A list of sections in which to scale the velocity. Each section is itself a list, which has the form (start-time end-time scaling-function).") (parameter "message-list" "A list of midi messages.")) (xml-in-laml-attributes (xml-in-laml-attribute "min-velocity" "implied" "The smallest possible velocity. Defaults to 0. Serves as a lower limit cut off value.") (xml-in-laml-attribute "max-velocity" "implied" "The largest possible velocity. Defaults to 127. Serves as an upper limit cut off value.")) (description "Scale the velocity of NoteOn messages, in selected channels, in given regions of time. The midi message-list must be in absTime mode (not checked). The affected sections in the midi message-list are identified by time intervals. Only messages in the given channels are affected. ") (form "(scale-velocity-of-sections-by-time channels section-list . message-list)") (title "scale-velocity-of-sections-by-time") (cross-references (reference "Scheme source file" "scale-velocity-of-sections-by-time" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#scale-velocity-of-sections-by-time") (reference "Examples" "Midi LAML examples" "../examples/velocity-scaling/index.html") (internal-references "Similar bar function" "scale-velocity-of-sections-by-bar"))) ((cross-references (reference "Scheme source file" "time-of-marker" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#time-of-marker")) (kind "manual-page") (parameters (parameter "marker-name" "The name of a meta marker (a string). Example: \"M-1\".") (parameter "message-list" "A list of midi messages. Defaults to the value of the global variable contextual-message-list.")) (description "Find the absTime of marker with name marker-name, such as \"M-1\", in message-list. message-list defaults to the value of the global variable contextual-message-list assigned by substitute-section-by-time. The problem is, however, that contextual-message-list is not assigned before it typically is used. This problem has not been settled yet. Assume, as a precondition, that message-list is in absTime mode. ") (form "(time-of-marker marker-name [message-list])") (returns "The absTime of the located meta midi message, of #f if the marker cannot be located in the message list. ") (title "time-of-marker")) ((kind "manual-section") (section-title "Generation of note phrases.") (section-body "The functions in this section generate - or help generate - list of notes. The most sophisticated is the function beat, which - typically, but not necessarily - generates guitar beats. The instrument definition is outside the context of the beat function. The generated beats are affected by a large number of parameters. The function duration-to-next is a function which makes it possible to express the duration contextually. LAML technically, duration-to-next, is an attribute-returning delayed procedural content item function.") (section-id "guitar-beats")) ((cross-references (reference "Scheme source file" "regular-beats" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#regular-beats")) (kind "manual-page") (parameters (parameter "n" "The number of NoteOn messages to be generated.") (parameter "ch" "The channel of the NoteOn messages. An integer between 1 and 16.") (parameter "note-value" "the value of the note attribute. An integer between 0 and 127.") (parameter "duration" "The deltaTime of each NoteOn message.")) (description "Return a list of n deltaTimed notes, of note value note-value, all in channel ch, with a mutual distance of distance. ") (title "regular-beats") (form (regular-beats n ch note-value distance))) ((kind "manual-page") (parameters (parameter "direction" "Either up or down (symbol or strings). If down, time-note-list is reversed.") (parameter "stretch" "Stretch-factor (typically, but not necessarity, a real number between 0 and 1).") (parameter "base-velocity" "The initial velocity before scaling with velocity-scaling-fn. An integer between 0 and 127.") (parameter "total-length" "The enforced total-length of the beat. An non-negative integer.") (parameter "velocity-scaling-fn" "A scaling function which is used to scale the base-velocity throughout the six notes.") (parameter "delta-time-scaling-fn" "A scaling function which is used to scale the base-delta-time throughout the six notes.") (parameter "transposition" "A transposition of the notes in the beat. A integer (positive or negative). Defaults to 0.") (parameter "ch" "The channel in which to which the NoteOn in the beat belongs. Defaults to channel 1. An integer between 1 and 16.") (parameter "base-duration" "The duration of all NoteOn which are not followed by a similar NoteOn in the same channel and with the same note value attribute. Defaults to 960.") (parameter "time-note-list" "A list of deltaTime noteValue pairs which defines the basis beat of the chord. Each entry is of the form (deltaTime noteValue base-velocity) where deltaTime is non-negative integer and noteValue is a note number, or a symbol or string which can be transformed to a note number by the function note-name-to-note-number. base-velocity is optional, and if present it overrides the base-velocity (the third parameter of the function).")) (description "Return a guitar beat chord in channel ch with a number notes, with an enforced total length (duration) of total-length. Direction is one of up or down (symbols or strings). The notes and their deltaTimes is per default fixed to a C-Major chord of six notes, but it can be customized to an arbitrary sequence via the parameter time-note-list. Each NoteOn sounds until it is activated later on in the contextual sequence, or with a duration of base-duration if it is last in the contextual sequence. Transpose with the value of transpose. Stretch with a factor of stretch (normally between 0 and 1). The velocity of each NoteOn event is, in the starting point, base-velocity (scaling is pending). The deltaTime of all but the first NoteOn event is base-delta-time (scaling is pending). The deltaTime of the first NoteOn is 0. Scale velocities with velocity-scaling-fn. Scale delta-times with delta-time-scaling-fn. noteValue may also the symbol -, in which case the note is skipped (in the sense that the note is substituted by a mill-null-event). time-note-list defaults to a C-major chord sequence of six notes. The first deltaTime is forced to be 0, independent of its given value. ") (form "(beat direction stretch base-velocity total-length velocity-scaling-fn delta-time-scaling-fn [transposition ch base-duration time-note-list])") (title "beat") (cross-references (reference "Scheme source file" "beat" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#beat") (reference "Examples" "Midi LAML examples" "../examples/beat/index.html"))) ((cross-references (reference "Scheme source file" "duration-to-next" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#duration-to-next")) (kind "manual-page") (parameters (parameter "default-duration" "The default duration, used in case the duration between neighbor NoteOn events cannot be found.")) (description "Return a functions, which (when called) calculates a duration attribute value pair (a list of two elements) of the deltaTime length from the hosting NoteOn to the next NoteOn with same channel and the same note value. Serves as a delayed procedural content item of a NoteOn MIDI event. ") (returs "A function, serving as a LAML delayed procedural content item, which accepts the root AST and the parent AST of the hosting element. ") (title "duration-to-next") (form (duration-to-next default-duration))) ((cross-references (reference "Scheme source file" "generate-mega-voice-function" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#generate-mega-voice-function")) (kind "manual-page") (description "Generates a mega-voice-function from a given mega voice map. A mega voice function maps a note-name (with special conventions), a mega voice section name, and a normal velocity to the note value and the mega-voice-specific velocity. ") (title "generate-mega-voice-function") (form (generate-mega-voice-function mega-voice-map))) ((cross-references (reference "Scheme source file" "steel-guitar-megavoice-map" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#steel-guitar-megavoice-map")) (kind "manual-page") (description "The mega voice map of a steel guitar (tyros 1). ") (title "steel-guitar-megavoice-map") (form steel-guitar-megavoice-map)) ((kind "manual-section") (section-title "Style Splitting.") (section-body "The functions in this section split a style file in its midi path. In this context, a style file is a Yamaha Keyboard style file which control the automatic accompaniment. The first functions are older versions. The refined functions are more advanced. The refined functions are able to extract meta information about the midi contents of the pieces. Some levels of bulk processing is provided.") (section-id "style-splitting")) ((kind "manual-page") (parameters (parameter "style-file-path" "The full file path to a style file.") (parameter "output-dir-path" "The full file path to a an existiing output directory.") (parameter "mode" "Midi processing mode. A symbol. Must be deltaTime.") (parameter "channel-selection" "A list of channel numbers, in the interval 1..16. A list of integers.")) (description "Split a given style file in midi pieces, and generate (up to) 15 different midi files of the parts. Place the midi pieces in a subdirectory of output-dir-path. Only output channels in channel-selection (a list of integers). ") (misc "Older version. Use the newer and refined variant. Does probably not work correctly any more.") (title "split-and-process-style") (form (split-and-process-style style-file-path output-dir-path mode channel-selection)) (cross-references (reference "Scheme source file" "split-and-process-style" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-style") (internal-references "Bulk version" "split-and-process-all-styles") (internal-references "Refined version" "split-and-process-style-one-channel-refined"))) ((kind "manual-page") (parameters (parameter "input-dir-path" "The absolute and complete path to an existing directory that contains style files.") (parameter "output-dir-path" "The full file path to a an existiing output directory.") (parameter "mode" "Midi processing mode. A symbol. Must be deltaTime.") (parameter "channel-selection" "A list of channel numbers, in the interval 1..16. A list of integers.")) (description "A bulk processing variant of split-and-process-style. Spilt each style file in input-dir-path in midi pieces, and generate (up to) 15 different in output-dir-path. Apply mode (deltaTime or absTime) and select channels in channel-selection (a list of integers). ") (misc "Older version. Use the newer and refined variant") (title "split-and-process-all-styles") (form (split-and-process-all-styles input-dir-path output-dir-path mode channel-selection)) (cross-references (reference "Scheme source file" "split-and-process-all-styles" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-all-styles") (internal-references "Bulk version" "split-and-process-all-styles") (internal-references "Refined version" "split-and-process-all-styles-refined"))) ((kind "manual-page") (parameters (parameter "style-file-path" "The absolute and complete path to a style file.") (parameter "output-dir-path" "The absolute path to a directory. All but last directory path must be existing.") (parameter "mode" "Either absTime or deltaTime (a symbol). MUST be deltaTime") (parameter "channel" "A single channel - an integer number between 1 and 16.")) (description "A much refined version of split-and-process-style. Split a given style file in midi pieces, and generate (up to) 15 different midi files of the parts. Place the midi pieces in subdirectories of output-dir-path. Apply mode (deltaTime or absTime) - a symbol - when parsing the style file. Only output data in the given channel. Do not store meta information. (If you want meta information stored, use split-and-process-style-one-channel-given-ast-refined instead of this function). ") (title "split-and-process-style-one-channel-refined") (form (split-and-process-style-one-channel-refined style-file-path output-dir-path mode channel)) (cross-references (reference "Scheme source file" "split-and-process-style-one-channel-refined" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-style-one-channel-refined") (internal-references "Bulk version" "split-and-process-all-styles"))) ((kind "manual-page") (parameters (parameter "meta-file-path" "The absolute and complete path to a meta file, or #f. An empty meta file is created automatically if it does not exist.") (parameter "style-file-path" "The absolute and complete path to a style file.") (parameter "output-dir-path" "The absolute path to a directory. All but last directory path must be existing.") (parameter "mode" "Either absTime or deltaTime (a symbol). MUST be deltaTime")) (description "Split all channels in a style file into midi pieces. Save meta information about the midi pieces in meta-file-path. If meta-file-path is #f, do not store meta information. Mode must be deltaTime. ") (title "split-and-process-style-refined") (form (split-and-process-style-refined meta-file-path style-file-path output-dir-path mode)) (cross-references (reference "Scheme source file" "split-and-process-style-refined" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-style-refined") (internal-references "Directory bulk version" "split-and-process-all-styles-refined"))) ((kind "manual-page") (parameters (parameter "meta-file-path" "The absolute and complete path to a meta file, or #f. An empty meta file is created automatically if it does not exist.") (parameter "input-dir-path" "The absolute and complete path to an existing directory that contains style files.") (parameter "output-dir-path" "The absolute path to a directory. All but the last directory path must be existing.") (parameter "mode" "Either absTime or deltaTime (a symbol). MUST be deltaTime")) (description "Split each style file in input-dir-path in midi pieces, and organize the midi pieces in output-dir-path. Only the styles in input-dir-path - and not subdirectories - are processed. Create the meta information in the file addressed by meta-file-path. Create the last directory in output-dir-path if necessary. A bulk processing variant of split-and-process-style-refined. Apply mode (deltaTime or absTime) and select channels in channel-selection (a list of integers). Mode must be deltaTime. ") (title "split-and-process-all-styles-refined") (form (split-and-process-all-styles-refined meta-file-path input-dir-path output-dir-path mode)) (cross-references (reference "Scheme source file" "split-and-process-all-styles-refined" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-all-styles-refined") (internal-references "Directory bulk version" "split-and-process-all-style-directory-refined"))) ((cross-references (reference "Scheme source file" "split-and-process-all-style-directory-refined" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-and-process-all-style-directory-refined")) (kind "manual-page") (parameters (parameter "meta-file-path" "The absolute and complete path to a meta file, or #f. An empty meta file is created automatically if it does not exist.") (parameter "input-dir-path" "The absolute and complete path to an existing directory that contains directories with style files.") (parameter "output-dir-path" "The absolute path to a directory. The leave directory of output-dir-path is created if necessary. The parent part must exists.") (parameter "mode" "Either absTime or deltaTime (a symbol). MUST be deltaTime")) (description "Split each style file in each directory of input-dir-path in midi pieces, and organize the midi pieces in output-dir-path. At the top level, the directory structure is replicated. This is just another bluk version on top of split-and-process-all-styles-refined. No recusive processing is involved. Only a directory of directories of style files. Create the meta information in the file addressed by meta-file-path. Create the last directory in output-dir-path if necessary. Apply mode (deltaTime or absTime) and select channels in channel-selection (a list of integers). Mode must be deltaTime. ") (title "split-and-process-all-style-directory-refined") (form (split-and-process-all-style-directory-refined meta-file-path input-dir-path output-dir-path mode))) ((kind "manual-section") (section-title "Arpeggio splitting.") (section-body "")) ((kind "manual-page") (parameters (parameter "source-file-path" "The full path to the midi file with the recording") (parameter "start-number" "The initial arp number of the recording") (parameter "target-dir-list" "A list of two full paths to the target directory and trimmed target dir, in which to store the resulting midi files.") (parameter "expected-length" "The number of expected midi files. If provided, excution stops if the expectation is not correct.")) (description "Split a midi file in which consecutive arpeggio patterns have been recorded. The midi file is assumed to be a format 0 midi file (as recorded as a song on a motif XS). I.e., the recording happens to be a MIDI format 0 file of PPQN 480. It is assumed that each new arpeggio starts with a ControlChange number 0 message. Deliver the patterns as individual midi files in target-dir (an existing directory). ") (form "(split-arpeggio-recording source-file-path start-number target-dir [expected-length])") (title "split-arpeggio-recording") (cross-references (reference "Scheme source file" "split-arpeggio-recording" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-arpeggio-recording") (internal-references "Variant" "split-arpeggio-recording-via-pc-recording"))) ((kind "manual-page") (parameters (parameter "source-file-path" "The full path to the midi file with the recording") (parameter "start-number" "The initial arp number of the recording") (parameter "target-dir-list" "A list of two full paths to the target directory and trimmed target dir, in which to store the resulting midi files.") (parameter "expected-length" "The number of expected midi files. If provided, excution stops if the expectation is not correct.")) (description "A variant of split-arpeggio-recording which takes a PC recording (as opposed to a Motif XS recording) as starting point. The PC recording happens to be a MIDI format 1 file of PPQN 960. ") (form "(split-arpeggio-recording-via-pc-recording source-file-path start-number target-dir [expected-length])") (title "split-arpeggio-recording-via-pc-recording") (cross-references (reference "Scheme source file" "split-arpeggio-recording-via-pc-recording" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#split-arpeggio-recording-via-pc-recording") (internal-references "Variant" "split-arpeggio-recording"))) ((kind "manual-section") (section-title "Auxiliary functions.") (section-body "Miscellaneous function that are not naturally contained in the categories from above.") (section-id "aux-functions")) ((kind "manual-page") (description "A higher-order function that returns a numeric pitch-bend scaling function that takes into consideration that the mid-point pitch-bend value is 8192 (and not 0 as in the simple case of scaling). ") (returns "A function suitable as transformation function in transform-attribute on the value attribute in PitchBendChange messages.") (title "pitch-bend-scale") (form (pitch-bend-scale factor)) (cross-references (reference "Scheme source file" "pitch-bend-scale" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#pitch-bend-scale") (internal-references "Possible use context" "transform-attribute"))) ((cross-references (reference "Scheme source file" "total-length-of-message-list" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#total-length-of-message-list")) (kind "manual-page") (description "Calculate the total length of message-list. Works in both absTime and deltaTime mode. ") (title "total-length-of-message-list") (form (total-length-of-message-list message-list))) ((cross-references (reference "Scheme source file" "enforce-minimum-message-length" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#enforce-minimum-message-length")) (kind "manual-page") (description "Enforce that message-list will have a mini length of min-length. Works only in deltaTime mode. ") (mode "deltaTime") (title "enforce-minimum-message-length") (form (enforce-minimum-message-length min-length message-list))) ((cross-references (reference "Scheme source file" "icon" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#icon")) (kind "manual-page") (parameters (parameter "name" "A symbolic name of an icon. The currently supported names are: \"penguin\", \"butterfly\", \"candle\", \"banana\", \"orange\", \"lighting\".")) (description "Return an icon name, which serve as the 'middle name' of a style file. ") (title "icon") (form (icon name))) ((cross-references (reference "Scheme source file" "note-complement" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#note-complement")) (kind "manual-page") (parameters (parameter "note-str-list" "A comma-separated list of notes names belonging to C CS D Eb E F FS G GS A Bb and B.")) (description "Returns the complement of note-str-list, relative to the possible note names. ") (returns "The comma-separated list of notes not in note-str-list.") (title "note-complement") (form (note-complement note-str-list))) ((cross-references (reference "Scheme source file" "chord-complement" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#chord-complement")) (kind "manual-page") (parameters (parameter "chord-str-list" "A comma-separated list of chord names belonging to maj maj6 maj7 maj7s11 maj9 maj7-9 maj6-9 aug min min6 min7 min7b5 min-9 min7-9 min7-11 min-maj7 min-maj7-9 dim dim7 7th 7sus4 7b5 7-9 7s11 7-13 7-b9 7-b13 7-s9 maj7aug 7aug 1-plus-8 1-plus-5 sus4 1-plus-2-plus-5 and cancel.")) (description "Returns the complement of chord-str-list, relative to the possible note names. ") (returns "The comma-separated list of chords not in chord-str-list.") (title "chord-complement") (form (chord-complement chord-str-list))) ((cross-references (reference "Scheme source file" "drum-category-of-note-value" "midi-laml-processing-lib-ep/midi-laml-processing-lib-1.html#drum-category-of-note-value")) (kind "manual-page") (parameters (parameter "note-value" "An integer between 0 and 127.")) (description "Return the drum category of note-value. ") (returns "One of the symbols undefined, latin-percussion, others, snare-drum, latin-high-pitch, bass-drum, hi-hat, tom, crash-cymbal, ride-cymbal, cymbal, latin-high-pitch.") (title "drum-category-of-note-value") (form (drum-category-of-note-value note-value))))