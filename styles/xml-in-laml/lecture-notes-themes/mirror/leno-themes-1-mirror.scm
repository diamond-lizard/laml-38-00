; This file is generated by an LAML script based on the LAML tool tools/xml-in-laml/xml-in-laml.scm. DO NOT EDIT!

; lib/xml-in-laml/xml-in-laml.scm is not loaded here. 
; You must load it yourself prior to the loading of this file.

(define leno-themes-1-xml-transliterate-character-data? #t)
(define leno-themes-1-xml-char-transformation-table html-char-transformation-table)
(define leno-themes-1-xml-non-transliteration-elements '())
(define leno-themes-1-xml-preformatted-text-elements '())
(define leno-themes-1-xml-pass-default-dtd-attributes? #f)
(define leno-themes-1-xml-accept-only-string-valued-attributes? #t)
(define leno-themes-1-xml-accept-extended-contents? #f)
(define leno-themes-1-xml-document-type-declaration "")
(define leno-themes-1-xml-represent-white-space? #f)
(define leno-themes-1-xml-duplicated-attribute-handling 'keep-all)


; Empty temporary language map
(set! temp-language-map (quote ()))



;;; The validation procedures

(define (leno-themes-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0) (dfa (quote (finite-state-automaton 0 (5) #((0 b 1) (1 c 2) (2 d 3) (2 e 4) (3 d 3) (3 e 4) (4 f 5)) #((begin-themes  . c) (end-themes  . e) (leno-themes-front-matters  . b) (terminator$$  . f) (theme  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "leno-themes"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "leno-themes")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "leno-themes"))))

(define (leno-themes-front-matters-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("course-home-url" "CDATA" "#REQUIRED") ("author-home-url" "CDATA" "#REQUIRED") ("logo-url" "CDATA" "#REQUIRED") ("scheme-prefix" "CDATA" "#IMPLIED") ("scheme-suffix" "CDATA" "#IMPLIED") ("author-mode" ("true" "false") "false") ("show-and-speak" ("true" "false") "false") ("sound-source" ("real-audio" "wave-file" "mp3-file") "#IMPLIED") ("speak-url-prefix" "CDATA" "#IMPLIED") ("speak-file-prefix" "CDATA" "#IMPLIED") ("language" ("danish" "english") "english") ("slide-view" ("true" "false") "true") ("annotated-slide-view" ("true" "false") "false") ("aggregated-view" ("true" "false") "false") ("exercise-linking" ("true" "false") "true") ("program-linking" ("true" "false") "true") ("presentation-medium" ("web" "paper") "web") ("make-print-page" ("true" "false") "false") ("make-cross-reference-section" ("true" "false") "true") ("treat-svg-images-as" ("svg" "png" "png-if-exist") "svg") ("news-flash-string" "CDATA" "#IMPLIED") ("news-flash-level" "CDATA" "1") ("news-flash-url" "CDATA" "#IMPLIED") ("use-doc-comments" ("true" "false") "false") ("doc-comment-prefix" "CDATA" "#IMPLIED") ("program-text-font-size" "CDATA" "#IMPLIED")))) (req-n 3)) (xml-check-for-empty-contents! contents "leno-themes-front-matters") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "leno-themes-front-matters"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "leno-themes-front-matters"))))

(define (begin-themes-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "begin-themes") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "begin-themes"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "begin-themes"))))

(define (end-themes-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "end-themes") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "end-themes"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "end-themes"))))

(define (theme-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("id" "CDATA" "#REQUIRED")))) (req-n 1) (dfa (quote (finite-state-automaton 0 (5) #((0 b 1) (0 c 2) (0 d 3) (0 e 4) (0 f 5) (1 b 1) (1 c 2) (1 d 3) (1 e 4) (1 f 5) (2 b 1) (2 c 2) (2 d 3) (2 e 4) (2 f 5) (3 b 1) (3 c 2) (3 d 3) (3 e 4) (3 f 5) (4 b 1) (4 c 2) (4 d 3) (4 e 4) (4 f 5)) #((leno-element  . c) (terminator$$  . f) (theme-index-table  . b) (theme-side-box  . e) (theme-text  . d)))))) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "theme"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "theme")) (if xml-validate-contents? (validate-contents-by-dfa! contents dfa "theme"))))

(define (theme-text-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "theme-text"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "theme-text")) (if xml-validate-contents? (validate-as-pcdata! contents "theme-text"))))

(define (theme-side-box-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("id" "CDATA" "#REQUIRED") ("title" "CDATA" "#REQUIRED")))) (req-n 2)) (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "theme-side-box"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "theme-side-box")) (if xml-validate-contents? (validate-as-pcdata! contents "theme-side-box"))))

(define (theme-index-table-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote ())) (req-n 0)) (xml-check-for-empty-contents! contents "theme-index-table") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "theme-index-table"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "theme-index-table"))))

(define (leno-element-leno-themes-1-laml-validate! el-name attributes contents overlap-check?) (let ((attributes-of-elements (quote (("lecture-id" "CDATA" "#REQUIRED") ("page-id" "CDATA" "#REQUIRED") ("element-type" "CDATA" "#REQUIRED") ("element-id" "CDATA" "#IMPLIED") ("element-number" "CDATA" "#IMPLIED") ("annotations" ("unfold-before" "unfold-after" "ignore" "keep" "merge") "unfold-after") ("select" ("all" "subitems") "all") ("theme-bg-color" "CDATA" "#IMPLIED") ("drop" ("true" "false") "false")))) (req-n 3)) (xml-check-for-empty-contents! contents "leno-element") (if (and overlap-check? xml-check-language-overlap?) (check-language-overlap! (as-symbol "leno-element"))) (if xml-check-attributes? (xml-check-attributes! attributes attributes-of-elements req-n "leno-element"))))

;;; Make and put XML mirror functions in the temporary language map:
(set! temp-mirror-function (generate-xml-mirror-function leno-themes-leno-themes-1-laml-validate! "leno-themes" (quote ()) (quote double) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "leno-themes" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function leno-themes-leno-themes-1-laml-validate! "leno-themes" (quote ()) (quote double) (quote leno-themes-1) #t #t))
(define leno-themes temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function leno-themes-front-matters-leno-themes-1-laml-validate! "leno-themes-front-matters" (quote (author-mode "false" show-and-speak "false" language "english" slide-view "true" annotated-slide-view "false" aggregated-view "false" exercise-linking "true" program-linking "true" presentation-medium "web" make-print-page "false" make-cross-reference-section "true" treat-svg-images-as "svg" news-flash-level "1" use-doc-comments "false")) (quote single) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "leno-themes-front-matters" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function leno-themes-front-matters-leno-themes-1-laml-validate! "leno-themes-front-matters" (quote (author-mode "false" show-and-speak "false" language "english" slide-view "true" annotated-slide-view "false" aggregated-view "false" exercise-linking "true" program-linking "true" presentation-medium "web" make-print-page "false" make-cross-reference-section "true" treat-svg-images-as "svg" news-flash-level "1" use-doc-comments "false")) (quote single) (quote leno-themes-1) #t #t))
(define leno-themes-front-matters temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function begin-themes-leno-themes-1-laml-validate! "begin-themes" (quote ()) (quote single) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "begin-themes" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function begin-themes-leno-themes-1-laml-validate! "begin-themes" (quote ()) (quote single) (quote leno-themes-1) #t #t))
(define begin-themes temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function end-themes-leno-themes-1-laml-validate! "end-themes" (quote ()) (quote single) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "end-themes" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function end-themes-leno-themes-1-laml-validate! "end-themes" (quote ()) (quote single) (quote leno-themes-1) #t #t))
(define end-themes temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function theme-leno-themes-1-laml-validate! "theme" (quote ()) (quote double) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "theme" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function theme-leno-themes-1-laml-validate! "theme" (quote ()) (quote double) (quote leno-themes-1) #t #t))
(define theme temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function theme-text-leno-themes-1-laml-validate! "theme-text" (quote ()) (quote double) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "theme-text" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function theme-text-leno-themes-1-laml-validate! "theme-text" (quote ()) (quote double) (quote leno-themes-1) #t #f))
(define theme-text temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function theme-side-box-leno-themes-1-laml-validate! "theme-side-box" (quote ()) (quote double) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "theme-side-box" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function theme-side-box-leno-themes-1-laml-validate! "theme-side-box" (quote ()) (quote double) (quote leno-themes-1) #t #f))
(define theme-side-box temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function theme-index-table-leno-themes-1-laml-validate! "theme-index-table" (quote ()) (quote single) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "theme-index-table" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function theme-index-table-leno-themes-1-laml-validate! "theme-index-table" (quote ()) (quote single) (quote leno-themes-1) #t #f))
(define theme-index-table temp-mirror-function)

(set! temp-mirror-function (generate-xml-mirror-function leno-element-leno-themes-1-laml-validate! "leno-element" (quote (annotations "unfold-after" select "all" drop "false")) (quote single) (quote leno-themes-1) #f #f))
(set! temp-language-map (put-mirror-function temp-language-map "leno-element" temp-mirror-function))
(set! temp-mirror-function (generate-xml-mirror-function leno-element-leno-themes-1-laml-validate! "leno-element" (quote (annotations "unfold-after" select "all" drop "false")) (quote single) (quote leno-themes-1) #t #f))
(define leno-element temp-mirror-function)

; Register the name of the language:
(register-xml-in-laml-language (quote leno-themes-1) temp-language-map)

; Define the language variable
(define leno-themes-1 (activator-via-language-map (quote leno-themes-1)))

; Register the XML navigator of the language:
(register-xml-in-laml-navigator (quote leno-themes-1) (quote (xml-navigator #((begin-themes #(begin-themes) #()) (end-themes #(end-themes) #()) (leno-element #(leno-element) #(annotations drop element-id element-number element-type lecture-id page-id select theme-bg-color)) (leno-themes #(begin-themes end-themes leno-element leno-themes leno-themes-front-matters theme theme-index-table theme-side-box theme-text) #(aggregated-view annotated-slide-view annotations author-home-url author-mode course-home-url doc-comment-prefix drop element-id element-number element-type exercise-linking id language lecture-id logo-url make-cross-reference-section make-print-page news-flash-level news-flash-string news-flash-url page-id presentation-medium program-linking program-text-font-size scheme-prefix scheme-suffix select show-and-speak slide-view sound-source speak-file-prefix speak-url-prefix theme-bg-color title treat-svg-images-as use-doc-comments)) (leno-themes-front-matters #(leno-themes-front-matters) #(aggregated-view annotated-slide-view author-home-url author-mode course-home-url doc-comment-prefix exercise-linking language logo-url make-cross-reference-section make-print-page news-flash-level news-flash-string news-flash-url presentation-medium program-linking program-text-font-size scheme-prefix scheme-suffix show-and-speak slide-view sound-source speak-file-prefix speak-url-prefix treat-svg-images-as use-doc-comments)) (theme #(leno-element theme theme-index-table theme-side-box theme-text) #(annotations drop element-id element-number element-type id lecture-id page-id select theme-bg-color title)) (theme-index-table #(theme-index-table) #()) (theme-side-box #(theme-side-box) #(id title)) (theme-text #(theme-text) #())))))

; Register the validation procedures of the language
(register-xml-in-laml-validators (quote leno-themes-1) (vector (list "begin-themes" begin-themes-leno-themes-1-laml-validate!) (list "end-themes" end-themes-leno-themes-1-laml-validate!) (list "leno-element" leno-element-leno-themes-1-laml-validate!) (list "leno-themes" leno-themes-leno-themes-1-laml-validate!) (list "leno-themes-front-matters" leno-themes-front-matters-leno-themes-1-laml-validate!) (list "theme" theme-leno-themes-1-laml-validate!) (list "theme-index-table" theme-index-table-leno-themes-1-laml-validate!) (list "theme-side-box" theme-side-box-leno-themes-1-laml-validate!) (list "theme-text" theme-text-leno-themes-1-laml-validate!)))

; Register the content model map of the language.
; This makes the content model available for LAML at runtime.
(register-xml-in-laml-content-models (quote leno-themes-1) (quote #(("begin-themes" empty) ("end-themes" empty) ("leno-element" empty) ("leno-themes" (element-content (seq one (name one leno-themes-front-matters) (name one begin-themes) (name zero-or-more theme) (name one end-themes)))) ("leno-themes-front-matters" empty) ("theme" (element-content (choice zero-or-more (name one theme-index-table) (name one leno-element) (name one theme-text) (name one theme-side-box)))) ("theme-index-table" empty) ("theme-side-box" (mixed-content pcdata)) ("theme-text" (mixed-content pcdata)))))

; Register the action procedure map of the language.
(register-xml-in-laml-action-procedures (quote leno-themes-1) (vector (list "begin-themes" (lambda (ast) (begin-themes! ast))) (list "end-themes" (lambda (ast) (end-themes! ast))) (list "leno-themes" (lambda (ast) (leno-themes! ast))) (list "leno-themes-front-matters" (lambda (ast) (leno-themes-front-matters! ast))) (list "theme" (lambda (ast) (theme! ast)))))

