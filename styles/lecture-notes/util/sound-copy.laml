;;; The program copies numbered wav files, to the files, as described by the
;;; -.spk file generated by leno in the internal directory.
;;; Change the constants in the section below.
;;; Put this file in a directory together with the sound clips.
;;; The program copies the sound clips from the current directory to the parent directory (../),
;;; performing the necessary renamings. Notice that the laml function number-interval is handy for generation of
;;; lists of file names in a fixed range.

(load (string-append laml-dir "laml.scm"))

(define max-file-name-length 64)

; ------------------------------------------------------------------
; CHANGE SETTINGS IN THIS SECTION OF THE PROGRAM

(define lecture-id 'collections-streams)  ; <= CHANGE THIS

; A list of wave file names without extensions    ; <= CHANGE THIS
(define wave-file-names '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
 51 52 53 54 55 56 57 58   58a  59 60))

; END USER SETTINGS.
; ------------------------------------------------------------------

(define max (length wave-file-names))  ; the number of sound clips

(define speak-info-list (file-read (string-append "../../sources/noter/internal/" (as-string lecture-id) "." "spk")))

(display-message "THE LENO SHOW-AND-SPEAK SOUND UTILTIY PROGRAM.")

(display-message "Checking the number of wave files and the number of show-and-speak clauses")

(if (not (= (length wave-file-names) (length speak-info-list)))
    (begin 
      (error 
        (string-append 
         "The number of wave files and the number of show-and-speak entries are different. "
         "Speak clauses: " (as-string (length speak-info-list)) ". "
         "Wave file names: " (as-string (length wave-file-names)))))
    (display-message "OK"))

(display-message "Checking wave file existences")


; Check existence of wav files:
(for-each
  (lambda (n)
    (let ((name (string-append (as-string n) ".wav")))
      (if (not (file-exists? name))
          (error (string-append "wav file " name " does not exist.")))))
  wave-file-names)

(display-message (string-append "Checking file name lenghts, maximum " (as-string max-file-name-length) " chars"))

; Check file lengths:
(for-each
  (lambda (entry)
    (let* ((sound-name (list-ref entry 6))
           (sound-name-ext (string-append sound-name "." "wav")) 
          )
      (if (> (string-length sound-name-ext) max-file-name-length)
          (error (string-append "File name length exceeded: " sound-name-ext)))))
  speak-info-list)

(error "STOP HERE")

(display-message "Copying and renaming files to parent directory")

(for-each
  (lambda (entry n)
    (let* ((sound-name (list-ref entry 6))
           (wav-name (string-append "../" sound-name  ".wav"))
         )
      (if (file-exists? wav-name) (delete-file wav-name))
      (display-message (as-string n))
      (copy-file 
        (string-append (as-string n) ".wav")
        wav-name)))
  speak-info-list wave-file-names)

(display-message "Done")
    



