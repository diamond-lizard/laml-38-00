(((title . "Reference Manual of the LAML library") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " The file <kbd>laml.scm</kbd> is the very first laml file to load. It contains a number of variable and functions which must be defined whenever LAML is used. Some of the variables - the configuration variables - are defined via the LAML configuration process. It also contains some very fundamental LAML stuff, including a number of top level commands that activate LAML tools. Physically, laml.scm is composed of a tiny, configuration dependent file followed by the file laml-fundamental.scm. These two files are documented together.<p> <kbd>laml.scm</kbd> loads  the scheme/OS/platform specific compatibility file and the <a href=\"../lib/man/general.html\">general library</a> from the <kbd>lib</kbd> directory. It is assumed that the value of the variable <kbd>laml-dir</kbd> is the full path of the LAML directory; <kbd>laml-dir</kbd> must be defined when <kbd>laml.scm</kbd> is loaded, and the path must end in a \"/\". The laml command prompt command and the LAML Emacs activation commands will take care of the definition of <kbd>laml-dir</kbd> for you.") (scheme-source-file . "/user/normark/scheme/laml.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "The configuration section.") (section-body "The configuration section is meant to be addapted in each new LAML installation. This section contains a few fundamental variables. The variables are defined via the configuration file in the laml-config directory. ") (section-id "config-section")) ((cross-references (reference "Scheme source file" "scheme-system" "laml-ep/laml-1.html#scheme-system")) (kind "manual-page") (description "The Scheme system on which LAML depends (a symbol). Possible values are: mzscheme, scm, guile, drscheme. The value is frozen by the LAML configuration program. ") (title "scheme-system") (form scheme-system)) ((cross-references (reference "Scheme source file" "laml-platform" "laml-ep/laml-1.html#laml-platform")) (kind "manual-page") (description "The platform on which LAML is in use (a symbol). Possible values are: windows, unix, mac. mac is not yet in use. The value is frozen by the LAML configuration program. ") (title "laml-platform") (form laml-platform)) ((cross-references (reference "Scheme source file" "operating-system" "laml-ep/laml-1.html#operating-system")) (kind "manual-page") (description "The operating system on which LAML is in use (a symbol). Possible values on the windows platform: win98, win95, nt40, win2000. Possible values on the unix platform: solaris-6, solaris-7, or linux. The value is frozen by the LAML configuration program. ") (title "operating-system") (form operating-system)) ((cross-references (reference "Scheme source file" "laml-library" "laml-ep/laml-1.html#laml-library")) (kind "manual-page") (description "The scheme library relative to laml-dir. A string. A single directory name (without ending slash). The value is frozen by the LAML configuration program. You can change this if you use an alternative or experimental LAML library. ") (title "laml-library") (form laml-library)) ((cross-references (reference "Scheme source file" "laml-version" "laml-ep/laml-1.html#laml-version")) (kind "manual-page") (description "A variable that refers to the version of LAML, bound at LAML installation time. ") (returns "A string that contains the version number and a short description.") (title "laml-version") (form laml-version)) ((kind "manual-page") (description "The function begin-laml is supposed to be called at the time all LAML software loading is done. The function is also available via the alias end-laml-loading. The function loads the LAML init file, typically called .laml. By loading the LAML init file when all software is loaded, it is always possible to redefine crucial parts in the LAML init file. In HTML, SVG and similar contexts it is the responsibility of the document author to call begin-laml (as well as end-laml). In contexts where we process a more elaborate XML-in-LAML document, the software that processes the document calls begin-laml. ") (title "begin-laml") (form (begin-laml)) (cross-references (reference "Scheme source file" "begin-laml" "laml-ep/laml-1.html#begin-laml") (internal-references "alias function" "end-laml-loading") (internal-references "related function" "end-laml"))) ((cross-references (reference "Scheme source file" "end-laml-loading" "laml-ep/laml-1.html#end-laml-loading")) (kind "manual-page") (description "An alias of begin-laml. Rationale: In some contexts it is natural to state the point where all LAML loading is done. ") (title "end-laml-loading") (form end-laml-loading)) ((cross-references (reference "Scheme source file" "laml-execution-mode" "laml-ep/laml-1.html#laml-execution-mode")) (kind "manual-page") (description "A variable which can be used to control if laml is safe and informative, or fast. Possible values: fast or safe (a symbol). ") (title "laml-execution-mode") (form laml-execution-mode)) ((cross-references (reference "Scheme source file" "laml-temp-file-path" "laml-ep/laml-1.html#laml-temp-file-path")) (kind "manual-page") (description "Returns a full, absolute path to a temp directory, to which LAML software is assumed to have write access. This directory is called the LAML temporary file directory. In the default implementation, return temp in laml-dir. You may redefine this function to return another path. This is necessary if you do not have write access to the default LAML temporary file directory. Redefinition of the function can take place in your .laml file. ") (title "laml-temp-file-path") (form (laml-temp-file-path))) ((kind "manual-section") (section-title "LAML version information.") (section-body "The functions in this section return information about the version of LAML that you have installed. The functions basically return the same information as the string laml-version. We provide these function to make the LAML version information available on a more convenient form than in in the string laml-version. The version information is taken from the file distribution-version.lsp in the root of the LAML distribution. Always use the functions in this section to access the version information. (Do not read and interpret the information in distribution-version.lsp directly). ") (section-id "laml-version-functions")) ((cross-references (reference "Scheme source file" "laml-version-numbers" "laml-ep/laml-1.html#laml-version-numbers")) (kind "manual-page") (description "Return a list of two integers: the LAML major version number and the LAML minor version number. ") (returns "A list of two integers: (major-version-number minor-version-number)") (title "laml-version-numbers") (form (laml-version-numbers))) ((kind "manual-page") (description "Return the time stamp of this LAML distribution. A number that represents the number of second elapsed since Jan 1, 1970. Use the functions in the LAML time library to make good use of this number. ") (returns "An integer.") (title "laml-version-time") (form (laml-version-time)) (cross-references (reference "Scheme source file" "laml-version-time" "laml-ep/laml-1.html#laml-version-time") (reference "Useful time function" "time-decode" "../lib/man/time.html#time-decode"))) ((cross-references (reference "Scheme source file" "laml-version-kind" "laml-ep/laml-1.html#laml-version-kind")) (kind "manual-page") (description "Return the kind of your current LAML distribution. Currently we use the following kinds: full, slim, development. ") (returns "Either \"full\", \"slim\", \"development\" (a string).") (title "laml-version-kind") (form (laml-version-kind))) ((kind "manual-section") (section-title "Library, style, tool, and local dir loading.") (section-body "The functions in this section loads LAML libraries and LAML styles. ") (section-id "loading-section")) ((cross-references (reference "Scheme source file" "lib-load" "laml-ep/laml-1.html#lib-load")) (kind "manual-page") (parameters (parameter "suffix-path" "The part of the library file name relative to the LAML library directory, including file extension.")) (description "Load file from the LAML library directory. ") (title "lib-load") (form (lib-load suffix-path))) ((cross-references (reference "Scheme source file" "laml-tool-load" "laml-ep/laml-1.html#laml-tool-load")) (kind "manual-page") (parameters (parameter "suffix-path" "The part of the tool file name relative to the LAML tool directory, including file extension.")) (description "Load a file from the LAML tool directory. ") (title "laml-tool-load") (form (laml-tool-load suffix-path))) ((kind "manual-page") (parameters (parameter "suffix-path" "The part of the file name relative to the LAML startup directory, including file extension.")) (description "Load file from the startup directory. ") (title "local-load") (form (local-load suffix-path)) (cross-references (reference "Scheme source file" "local-load" "laml-ep/laml-1.html#local-load") (internal-references "related function " "startup-directory"))) ((cross-references (reference "Scheme source file" "laml-style" "laml-ep/laml-1.html#laml-style")) (kind "manual-page") (parameters (parameter "style-spec" "The name of the style to load. A style-spec is without extension. However, the style file must have the scm extension.") (parameter "style-base:" "The directory which contains the style. If style-base is given it must be a full path directory (a slash terminated string) from which to load your style. If style-base is omitted, the style is loaded from styles subdirectory of the LAML directory.") (parameter "load-variation:" "A load-variation assigned to the global LAML variable laml-load-variation.")) (examples (example "(laml-style \"simple\" #f 'xyz-variation)") (example "(laml-style \"manual\" \"manual/\")")) (description "Load a LAML style. ") (form "(laml-style style-spec [style-base load-variation])") (title "laml-style")) ((kind "manual-section") (section-title "LAML contextual information.") (section-body "The functions in this section deal with the necessary context information, which must be passed to Scheme when we use LAML. ") (section-id "context-section")) ((kind "manual-page") (description "If possible return the name of the LAML source file (without extension). This is only possible if the information somehow is passed to the Scheme execuctable. In cases where it is not possible to know the source file name, return #f. Notice: The parameter is not used, and should be avoided. In order to be backward compatible, however, we allow a dummy parameter. ") (title "source-filename-without-extension") (form (source-filename-without-extension . unused-parameter)) (cross-references (reference "Scheme source file" "source-filename-without-extension" "laml-ep/laml-1.html#source-filename-without-extension") (internal-references "similar function" "full-source-path-with-extension"))) ((cross-references (reference "Scheme source file" "startup-directory" "laml-ep/laml-1.html#startup-directory")) (kind "manual-page") (description "Return the directory in which LAML is started up. If this information is not available return #f. Notice: The parameter is not used, and should be avoided. In order to be backward compatible, however, we allow a dummy parameter. ") (title "startup-directory") (form (startup-directory . unused-parameter))) ((cross-references (reference "Scheme source file" "laml-program-parameters" "laml-ep/laml-1.html#laml-program-parameters")) (kind "manual-page") (description "Return the list of program parameters passed to an activation of LAML. If no program parameters are passed, the empty list is returned. ") (title "laml-program-parameters") (form (laml-program-parameters))) ((cross-references (reference "Scheme source file" "laml-canonical-command-line" "laml-ep/laml-1.html#laml-canonical-command-line")) (kind "manual-page") (description "Return the contextual command line information passed to LAML upon activation. Returns a list of lenght three, or #f if no command line activation exists. The first element must be the symbol laml. Element number two must be the laml source file name (without extension and initial path). Element number three must be a slash terminated directory in which the source file resides. This function must be redefined in the scheme-system dependent compatibility file. If you ever call this implementation of the function, it indicates a missing redefinition. ") (title "laml-canonical-command-line") (form (laml-canonical-command-line))) ((cross-references (reference "Scheme source file" "fake-startup-parameters" "laml-ep/laml-1.html#fake-startup-parameters")) (kind "manual-page") (description "Fake the contextual startup parameters to a specific source file name and a specific startup directory. As an optional parameter, a list of program parameters can be passed. Both of the parameters must be strings, or the boolean value #f (in case the informations are unknown). This function is useful for programmatic startup of LAML. This function must be redefined in the scheme-system dependent compatibility file. If you ever call this implementation of the function, it indicates a missing redefinition. ") (title "fake-startup-parameters") (form (fake-startup-parameters source-file startup-dir . program-parameters))) ((cross-references (reference "Scheme source file" "fake-startup-parameters-prog-par-list" "laml-ep/laml-1.html#fake-startup-parameters-prog-par-list")) (kind "manual-page") (parameters (parameter "source-file" "a file name without initial path and without extension.") (parameter "start-dir" "an absolute path to a directory ending in a slash /.")) (description "A convenience version of fake-startup-parameters which does not take program parameters as a rest parameter. ") (program-parameters "a list of strings.") (title "fake-startup-parameters-prog-par-list") (form (fake-startup-parameters-prog-par-list source-file startup-dir program-parameter-list))) ((cross-references (reference "Scheme source file" "set-laml-startup-directory" "laml-ep/laml-1.html#set-laml-startup-directory")) (kind "manual-page") (description "Set the LAML startup directory to dir. Dir can be a full path, \"..\", or a directory relative to the current laml startup directory. This is specialized call to fake-startup-parameters with only directory information. ") (title "set-laml-startup-directory") (form (set-laml-startup-directory dir))) ((kind "manual-page") (description "Return a (full) path relative to the current startup-directory. The directory and file contributions in suffixes are concatenated. ") (title "in-startup-directory") (form (in-startup-directory . suffixes)) (cross-references (reference "Scheme source file" "in-startup-directory" "laml-ep/laml-1.html#in-startup-directory") (internal-references "relevant function" "startup-directory"))) ((cross-references (reference "Scheme source file" "laml-source-file-path" "laml-ep/laml-1.html#laml-source-file-path")) (kind "manual-page") (parameters (parameter "extension" "The extension of the returned file path. A string (without initial dot). ")) (description "Return the full path to the current source file (as returned by (source-filename-without-extension)) in the LAML startup directory (as returned by (startup-directory)). ") (form "(laml-source-file-path [extension])") (returns "A full file path to the current source file") (title "laml-source-file-path")) ((cross-references (reference "Scheme source file" "laml-cd" "laml-ep/laml-1.html#laml-cd")) (kind "manual-page") (description "Set the LAML startup directory to dir. Dir can be a full path, \"..\", or a directory relative to the current laml startup directory. A convenient and easy to remember alias to set-laml-startup-directory. ") (title "laml-cd") (form (laml-cd dir))) ((cross-references (reference "Scheme source file" "laml-pwd" "laml-ep/laml-1.html#laml-pwd")) (kind "manual-page") (description "Returns the working LAML directory. Similar to the UNIX command pwd. An alias of the function startup-directory. ") (title "laml-pwd") (form (laml-pwd))) ((cross-references (reference "Scheme source file" "laml-ls" "laml-ep/laml-1.html#laml-ls")) (kind "manual-page") (description "Returns a list of files and directories of the LAML startup directory (the current directory). Similar to the UNIX command ls ") (title "laml-ls") (form (laml-ls))) ((cross-references (reference "Scheme source file" "set-laml-source-file" "laml-ep/laml-1.html#set-laml-source-file")) (kind "manual-page") (description "Set the LAML source file name (without extension) to file. This is specialized call to fake-startup-parameters with only source file information. ") (title "set-laml-source-file") (form (set-laml-source-file file))) ((cross-references (reference "Scheme source file" "set-laml-program-parameters" "laml-ep/laml-1.html#set-laml-program-parameters")) (kind "manual-page") (description "Set the LAML program parameters. This is specialized call to fake-startup-parameters with only program parameters ") (title "set-laml-program-parameters") (form (set-laml-program-parameters program-parameters))) ((kind "manual-page") (description "Return the full path to the current source file name in the startup directory, using the extension ext. This function can be used conveniently to name the typical file for LAML to HTML transformations. ") (title "full-source-path-with-extension") (form (full-source-path-with-extension ext)) (cross-references (reference "Scheme source file" "full-source-path-with-extension" "laml-ep/laml-1.html#full-source-path-with-extension") (internal-references "similar function" "source-filename-without-extension"))) ((kind "manual-section") (section-title "Programmatic loading of laml files.") (section-body " Loading a LAML file invovles the setting of two pieces of context: The name of of the source file and the startup directory. The function laml-load sets these information and loads a file. ") (section-id "prog-loading-section")) ((kind "manual-page") (parameters (parameter "file-name" "A file-name, with or without extension. The extension 'laml' will be added if not supplied. Takes file-name from the startup-directory. Can also be a full path.") (parameter "program-parameters" "A list of program parameters")) (description "Load and execute the LAML file on the file file-name (a string). This procedure is a flexible and versatile alternative to laml-load. ") (misc "Please notice that this procedure will not work in case you use directory or file names with dots ('.').") (title "laml") (form (laml file-name . program-parameters)) (cross-references (reference "Scheme source file" "laml" "laml-ep/laml-1.html#laml") (internal-references "useful function" "laml-program-parameters"))) ((kind "manual-page") (description "Load the laml file in full-file-path after faking the start up parameters. full-file-path must be the full path of a laml file, including the laml extension. This function is used by the function laml, which is recommended for most users. ") (title "laml-load") (form (laml-load full-file-path . optional-parameter-list)) (cross-references (reference "Scheme source file" "laml-load" "laml-ep/laml-1.html#laml-load") (internal-references "similar function" "laml"))) ((kind "manual-section") (section-title "Interactive tool activation.") (section-body "The procedures in this section activate LAML tools. It is recommended that you activate the commands from an interactive LAML (Scheme) prompt. From Emacs carry out the editor command <kbd> run-laml-interactively </kbd>.<p> All the commands below work relative to the LAML working directory, which is changed by the procedure <kbd> laml-cd </kbd>. Use the command <kbd> laml-pwd </kbd> to find out about the LAML working directory. ") (section-id "interactive-tool-section")) ((kind "manual-page") (parameters (parameter "scheme-input-file" "The file name of the Scheme source file, including file extension. It can be an absolute file path. It can also be a simple file name (or relative file path) which is assumed to be relative to the so-called startup-directory of LAML.") (parameter "commenting-style" "One of the symbols multi-semicolon or documentation-mark. The default value is multi-semicolon.")) (description "Extract documentation from a scheme source file and present the extracted information in an HTML file. The HTML file is, per default, delivered as a sibling file to the Scheme source file. If the .source-destination-delta attribute is present, the HTML file may be delivered in another directory. This procedure is supposed to be called from a Scheme interpreter, in which LAML is loaded and available. The procedure takes into consideration the attributes, which are extracted from the introductory comment (the abstract comment) of the Scheme source file. ") (form "(schemedoc scheme-input-file [commenting-style])") (title "schemedoc") (cross-references (reference "Scheme source file" "schemedoc" "laml-ep/laml-1.html#schemedoc") (reference "Further info" "LAML Tutorial section" "../tutorial/schemedoc/schemedoc.html"))) ((kind "manual-page") (parameters (parameter "dtd-path" "the path to the dtd file, without any file extension.") (parameter "target-path" "the path in which to write the manual target file. Defaults to the startup directory.") (parameter "mirror-name-prefix" "The prefix name of the mirror of the XML language in LAML. (A string). Defaults to the empty string.")) (examples (example "(dtd-manual \"xhtml10-transitional\")")) (description "Generate a LAML manual (in SchemeDoc style) of an XML DTD. This procedure reads the parsed dtd file (from a file with extension lsp) and generates an HTML file that represents the manual. ") (form "(xml-dtd-manual dtd-path [target-path mirror-name-prefix])") (pre-condition "It is assumed that the DTD file already is parsed, and that the parsed DTD file is located side by side the DTD source file. It is also assumed that lib/xml-in-laml/xml-in-laml.scm is already loaded. ") (misc "It is recommended that the XHTML1.0 transitional mirror is loaded before use of this procedure. The precondition and the recommendation is fulfilled when used via M-x run-laml-interactively in Emacs. ") (title "xml-dtd-manual") (cross-references (reference "Scheme source file" "xml-dtd-manual" "laml-ep/laml-1.html#xml-dtd-manual") (internal-references "preparatory function" "xml-dtd-parse"))) ((cross-references (reference "Scheme source file" "xml-dtd-parse" "laml-ep/laml-1.html#xml-dtd-parse")) (kind "manual-page") (parameters (parameter "dtd-file-name" "The name of the XML DTD file name in the startup directory. Without any extension.")) (description "Parse the XML DTD on dtd-file-name. If the input file is f, the parsed file will be located in f.lsp. The parsed DTD is represented as a Scheme list structure. ") (misc "As a side-effect, this procedure defines the variables element-list, attribute-list, and entity-list.") (title "xml-dtd-parse") (form (xml-dtd-parse dtd-file-name))) ((kind "manual-page") (parameters (parameter "parsed-dtd-file-name" "The name of the parsed XML DTD file in the startup directory. Without extension.") (parameter "language-name" "The name allocated to the new XML language in LAML. A symbol of your choice.") (parameter "action-element-list" "A list of names for which to generate action procedures (list of symbols).")) (description "Generate a mirror of an XML language in LAML and Scheme. This includes the generation of finite state automata for XML validation purposes. If the parsed XML DTD file is named f.lsp, the generated mirror will be located in f.scm. This procedure does not provide access to all 'parameters' of the mirror generation tool. If you need to control the mirror generation in additional details, please write a small LAML script for this purpose. ") (form "(generate-xml-mirror parsed-dtd-file-name language-name [action-element-list])") (misc "After the generation of the mirror you can move the Scheme mirror file (with extension scm) to a directory of your choice.") (title "generate-xml-mirror") (cross-references (reference "Scheme source file" "generate-xml-mirror" "laml-ep/laml-1.html#generate-xml-mirror") (internal-references "preparatory procedure" "xml-dtd-parse") (reference "Full tool support" "XML-in-LAML Mirror generation" "../tools/xml-in-laml/man/xml-in-laml.html"))) ((kind "manual-page") (parameters (parameter "in-file-name" "The name of an XML file, with or without the xml file extension. May be an absolute file name, or a file relative the the current directory (the value of the epression (startup-directory)).") (parameter "xml-language" "The name of the XML language in LAML, to which the resulting AST belongs. A symbol or string.") (parameter "out-file-name" "The name of the file on which the AST is written. A file relative to the current directory.")) (description "Parses an XML file, in-file-name, relative to the given xml-language. Return the XML-in-LAML AST if the optional parameter out-file-name is not given. The returned AST has positive white spacing (which means that white spaces are given as #t values in between constituents). Handle white space preserving elements according to the value (xml-preformatted-text-elements-in xml-language). If an out-file-name is given, write the resulting AST to the file and return a non-specified value. Validate the resulting AST if the mirror library of xml-language is loaded on beforehand. ") (form "(xml-parse-file in-file-name xml-language [out-file-name])") (returns "The AST, but only if no out-file-name is given.") (pre-condition "The XML-in-LAML library in /lib/xml-in-laml.xml-in-laml.scm must be loaded before this parsing procedure is called.") (title "xml-parse-file") (cross-references (reference "Scheme source file" "xml-parse-file" "laml-ep/laml-1.html#xml-parse-file") (internal-references "similar procedure" "xml-parse-string"))) ((kind "manual-page") (parameters (parameter "xml-string" "The string that holds the input to the parser.") (parameter "xml-language" "The name of the XML language in LAML, to which the resulting AST belongs. A symbol or string.")) (description "Parses an XML string using the XML parser for LAML and delivers the corresponding XML-in-LAML AST as the result. The returned AST has positive white spacing (which means that white spaces are given as #t values in between constituents). Handle white space preserving elements according the the value (xml-preformatted-text-elements-in xml-language). This function validates the resulting AST if that the mirror of the xml-language is loaded at the time xml-parse-string is called. ") (form "(xml-parse-string xml-string xml-language)") (returns "An XML-in-LAML AST.") (title "xml-parse-string") (cross-references (reference "Scheme source file" "xml-parse-string" "laml-ep/laml-1.html#xml-parse-string") (internal-references "similar procedure" "xml-parse-file"))) ((cross-references (reference "Scheme source file" "html-parse" "laml-ep/laml-1.html#html-parse")) (kind "manual-page") (parameters (parameter "in-file-name" "The name of an HTML file, with or without the html file extension.") (parameter "out-file-name" "The name of the file on which the parse tree is written. Defaults to the proper name of the html file with and added lsp extension.")) (description "Parse the HTML file file-name (a file name with or without extension) using the HTML parser for LAML. Writes the parse tree on the optional out-file-name. This function delivers a low level parse tree, which is not the same as an XML-in-LAML AST. If possible at all, use the function xml-parse-file instead. ") (form "(html-parse in-file-name [out-file-name])") (title "html-parse")) ((kind "manual-page") (parameters (parameter "in-file-name" "The file to pretty print") (parameter "out-file-name" "The file on which to write the pretty printed result. Default value in-file-name.") (parameter "single-lining" "A boolean variable that controls the line breaking; False means break consistently all forms. Default #t.") (parameter "indentation" "The increment of indentation. Default value 3.") (parameter "max-width" "The preferred maximum line width in the pretty printed file. Default value 80.")) (description "Pretty prints the XML file or XML parse tree in in-file-name and place the pretty printed result in out-file-name. The input is assumed to be a parse tree if and only if the extension is lsp. A XML file is parsed before pretty printing via use of the simple and non-complete, non-validating XML parser from the LAML software package. The optional file out-file-name defaults to in-file-name. In this case the original input file is overwritten. If you care for your input file, it is strongly recommended that your output file does not overwrite your input file! ") (form "(xml-pp in-file-name [out-file-name single-lining indentation max-width])") (misc "The pretty printing done by this function is superseded by the LAML AST pretty printing, as implemented by pretty-render-to-output-port and pretty-xml-render.") (title "xml-pp") (cross-references (reference "Scheme source file" "xml-pp" "laml-ep/laml-1.html#xml-pp") (reference "Similar function" "pretty-render-to-output-port" "../lib/xml-in-laml/man/xml-in-laml.html#pretty-render-to-output-port") (reference "Similar function" "pretty-xml-render" "../lib/xml-in-laml/man/xml-in-laml.html#pretty-xml-render"))) ((kind "manual-page") (parameters (parameter "in-file-name" "The file to pretty print") (parameter "out-file-name" "The file on which to write the pretty printed result. Default value in-file-name.") (parameter "single-lining" "A boolean variable that controls the line breaking; False means break consistently all forms. Default #t.") (parameter "indentation" "The increment of indentation. Default value 3.") (parameter "max-width" "The preferred maximum line width in the pretty printed file. Default value 80.")) (description "Pretty prints the HTML file or HTML parse tree in in-file-name and place the pretty printed result in out-file-name. The input is assumed to be a parse tree if and only if the extension is lsp. A HTML file is parsed before pretty printing via use of the non-validating HTML parser from the LAML software package. The optional file out-file-name defaults to in-file-name. In this case the original input file is overwritten. If you care for your input file, it is strongly recommended that your output file does not overwrite your input file! ") (form "(html-pp in-file-name [out-file-name single-lining indentation max-width])") (misc "The pretty printing done by this function is superseded by the LAML AST pretty printing, as implemented by pretty-render-to-output-port and pretty-xml-render.") (title "html-pp") (cross-references (reference "Scheme source file" "html-pp" "laml-ep/laml-1.html#html-pp") (reference "Similar function" "pretty-render-to-output-port" "../lib/xml-in-laml/man/xml-in-laml.html#pretty-render-to-output-port") (reference "Similar function" "pretty-xml-render" "../lib/xml-in-laml/man/xml-in-laml.html#pretty-xml-render"))) ((cross-references (reference "Scheme source file" "bibtex" "laml-ep/laml-1.html#bibtex")) (kind "manual-page") (description "Parse the bibtex file, file-name, which is a bibtex file name without the bibtex extension. Put the parsed result in file-name.lsp. In addition, deliver the result in the variable parse-result. Finally, present the parsed file as HTML in file-name.html. ") (title "bibtex") (form (bibtex file-name))) ((kind "manual-page") (parameters (parameter "in-file-name" "The file to pretty print") (parameter "out-file-name" "The file on which to write the pretty printed result. Default value in-file-name.") (parameter "single-lining" "A boolean variable that controls the line breaking; False means break consistently all forms. Default #t.") (parameter "indentation" "The increment of indentation. Default value 3.") (parameter "max-width" "The preferred maximum line width in the pretty printed file. Default value 80.")) (description "Pretty prints the Scheme or Lisp file - including comments - in in-file-name and write the result to out-file-name. Conventional comments (prefixed with semicolon) are converted with the Schemedoc procedure lexical-to-syntactical-comments! before the pretty printing. In case you don't care about comments, you should probably use lisp-pp instead. The optional file out-file-name defaults to in-file-name. In this case the original input file is overwritten. It is strongly recommended that your output file does not overwrite your input file! This function assumes that the general LAML library is loaded in advance. ") (form "(scheme-pp in-file-name [out-file-name single-lining indentation max-width])") (title "scheme-pp") (cross-references (reference "Scheme source file" "scheme-pp" "laml-ep/laml-1.html#scheme-pp") (internal-references "similar function" "scheme-pp-simple"))) ((kind "manual-page") (parameters (parameter "in-file-name" "The file to pretty print") (parameter "out-file-name" "The file on which to write the pretty printed result. Default value in-file-name.") (parameter "single-lining" "A boolean variable that controls the line breaking; False means break consistently all forms. Default #t.") (parameter "indentation" "The increment of indentation. Default value 3.") (parameter "max-width" "The preferred maximum line width in the pretty printed file. Default value 80.")) (description "Pretty prints the Scheme or Lisp file - without comment preservation - in in-file-name and write the result to out-file-name. The pretty printing is simple because the conventional semicolon comments are lost. The similar function scheme-pp preserves the comments during pretty printing. The optional file out-file-name defaults to in-file-name. In this case the original input file is overwritten. It is strongly recommended that your output file does not overwrite your input file! This function assumes that the general LAML library is loaded in advance. ") (form "(scheme-pp-simple in-file-name [out-file-name single-lining indentation max-width])") (title "scheme-pp-simple") (cross-references (reference "Scheme source file" "scheme-pp-simple" "laml-ep/laml-1.html#scheme-pp-simple") (internal-references "similar function" "scheme-pp"))) ((cross-references (reference "Scheme source file" "html-to-laml" "laml-ep/laml-1.html#html-to-laml")) (kind "manual-page") (description "Convert the HTML file on in-file-name to a LAML file on out-file-name. The conversion is done by parsing in-file-name, transforming the parse tree to LAML, and by pretty printing the resulting LAML program. ") (misc "Exprimental") (title "html-to-laml") (form (html-to-laml in-file-name out-file-name))) ((cross-references (reference "Scheme source file" "leno-xml" "laml-ep/laml-1.html#leno-xml")) (kind "manual-page") (description "Process a LENO xml file. ") (misc "Experimental") (title "leno-xml") (form (leno-xml leno-xml-file))) ((kind "manual-section") (section-title "Language settings.") (section-body "") (section-id "language-section")) ((cross-references (reference "Scheme source file" "language-preference" "laml-ep/laml-1.html#language-preference")) (kind "manual-page") (description "A variable which determines which language to use in selected parts of the LAML software. The value of the variable must be a symbol. Currently we only support danish and english. english is the default value. ") (title "language-preference") (form language-preference)) ((cross-references (reference "Scheme source file" "text-choice" "laml-ep/laml-1.html#text-choice")) (kind "manual-page") (description "Return either danish or english, depending on the value of the global variable language-preference. ") (title "text-choice") (form (text-choice danish english))) ((kind "manual-section") (section-title "LAML home URL and directories.") (section-body "The home directory of LAML is always the value of the variable laml-dir, which is defined a LAML installation time. In this directories there are useful URL and directory functions related to the LAML home directory. ") (section-id "home-url-section")) ((cross-references (reference "Scheme source file" "laml-absolute-url-prefix" "laml-ep/laml-1.html#laml-absolute-url-prefix")) (kind "manual-page") (description "The URL prefix of the LAML software home page at Aalborg University's WWW server. An absolute URL to the latest distributed version of LAML. ") (title "laml-absolute-url-prefix") (form laml-absolute-url-prefix)) ((kind "manual-page") (parameters (parameter "extra-level" "The extra level as explained above (either an integer, a boolean, or a string). Defaults to the integer 0.") (parameter "start-dir" "The directory from which we attempt to establish a relative path to the LAML home directory. Defaults to the value of the expression (startup-directory).")) (description "Return a relative or absolute url prefix to the LAML home directory. If start-dir is given, and if start-dir is a subdirectory of laml-dir, a relative directory path is returned. In other cases, an absolute URL is returned, namely the value of the variable laml-absolute-url-prefix. The parameter extra-level is an extra level (an integer) wich extends a relative path. As an example, extra-level should be 1 in case HTML files are organized in a sub-directory. Normally, extra-level is 0 (zero). If a boolean extra-level is passed we explicitly ask for an absolute URL result. If a string extra-level is passed, we use this string as a relative path to the home. The parameter start-dir is optional. It defaults to the value of (startup-directory). ") (form "(laml-home-url-prefix [extra-level start-dir])") (title "laml-home-url-prefix") (cross-references (reference "Scheme source file" "laml-home-url-prefix" "laml-ep/laml-1.html#laml-home-url-prefix") (internal-references "applied function" "startup-directory"))) ((kind "manual-page") (parameters (parameter "dir" "An absolute directory path, inside or outside laml-dir. Defaults to the value of (startup-directory).")) (description "Return the relative or absolute prefix file path from dir to the root directory of the LAML software. If dir is a subdirectory of laml-dir, return the relative path from dir to laml-dir. If not, return the absolute path laml-dir ") (form "(laml-dir-prefix [dir])") (returns "If possible, the relative directory path from dir to laml-dir. Else laml-dir") (title "laml-dir-prefix") (cross-references (reference "Scheme source file" "laml-dir-prefix" "laml-ep/laml-1.html#laml-dir-prefix") (internal-references "similar function" "laml-local-url-prefix"))) ((kind "manual-page") (parameters (parameter "dir" "An absolute directory path, inside or outside laml-dir. Defaults to the value of (startup-directory).")) (description "Return the relative or absolute url to the local laml dir. The URL function corresponding to laml-dir-prefix. If dir is a subdirectory of laml-dir, return the relative path from dir to laml-dir. If not, return the absolute file:// prefixed URL to the laml directory. ") (form "(laml-local-url-prefix [dir])") (returns "If possible, the relative url from dir to laml-dir. Else laml-dir prefixed with \"file://\"") (title "laml-local-url-prefix") (cross-references (reference "Scheme source file" "laml-local-url-prefix" "laml-ep/laml-1.html#laml-local-url-prefix") (internal-references "similar function" "laml-dir-prefix"))) ((cross-references (reference "Scheme source file" "is-a-laml-directory?" "laml-ep/laml-1.html#is-a-laml-directory?")) (kind "manual-page") (description "Is the directory dir a (potential) subdirectory of laml-dir. It is not necessary for dir to actually exist within laml-dir. laml-dir is the path to the directory, in which your LAML system is installed. ") (title "is-a-laml-directory?") (form (is-a-laml-directory? dir))) ((kind "manual-section") (section-title "Document prolog and epilog functions.") (section-body "This section contains definitions of document prolog and epilog functions. In addition, there are a number of more basic functions which return information about the document. Several of these return empty strings, and they intended to be redefined in other contexts. ") (section-id "prolog-epilog-section")) ((cross-references (reference "Scheme source file" "standard-prolog" "laml-ep/laml-1.html#standard-prolog")) (kind "manual-page") (description "Return a standard document prolog - front matters - inserted before any document elements. If requested, the rendering function can insert the standard prolog. In some contexts, the standard prolog may depend on the optional language parameter. ") (returns "The document type declaration and the copyright-clause.") (form "(standard-prolog [language])") (title "standard-prolog")) ((cross-references (reference "Scheme source file" "standard-epilog" "laml-ep/laml-1.html#standard-epilog")) (kind "manual-page") (description "Returns a standard document epilog - end matters - inserted after the document elements. If requested, the rendering function can insert the standard epilog. In some contexts, the standard epilog may depend on the optional language parameter. ") (returns "the laml standard comment and the tracing comment.") (form "(standard-epilog [language])") (title "standard-epilog")) ((cross-references (reference "Scheme source file" "document-type-declaration" "laml-ep/laml-1.html#document-type-declaration")) (kind "manual-page") (description "Return a document type declaration. This function is redefined in the individual mirrors. Called by standard-prolog. In some contexts, the document type declaration may depend on the optional language parameter. ") (form "(document-type-declaration [language])") (returns "the empty string (if not redefined)") (title "document-type-declaration")) ((cross-references (reference "Scheme source file" "copyright-clause" "laml-ep/laml-1.html#copyright-clause")) (kind "manual-page") (description "Return an HTML comment with a copyright notice, or an empty string. You can redefine this function if you need a copyright message as part of your document. If you redefine this function, it must return an HTML/XML comment. Called by standard-prolog. ") (returns "the empty string (if not redefined)") (title "copyright-clause") (form (copyright-clause))) ((cross-references (reference "Scheme source file" "laml-standard-comment" "laml-ep/laml-1.html#laml-standard-comment")) (kind "manual-page") (description "Return a standard comment about LAML. Depends on the function html-comment. Called by standard-epilog. ") (returns "an HTML comment about LAML.") (title "laml-standard-comment") (form (laml-standard-comment))) ((cross-references (reference "Scheme source file" "tracing-comment" "laml-ep/laml-1.html#tracing-comment")) (kind "manual-page") (description "Return a HTML comment which somehow traces this document. Typical information includes source file, time of generation, operating system, Scheme systemt, etc. Redefine this function if you need tracing information in your document. ") (returns "the empty string (if not redefined)") (title "tracing-comment") (form (tracing-comment))) ((kind "manual-section") (section-title "Cosmetic welcome, ending and copyright functions.") (section-body " ") (section-id "welcome-section")) ((cross-references (reference "Scheme source file" "laml-welcome" "laml-ep/laml-1.html#laml-welcome")) (kind "manual-page") (description "Initiating welcome and info text for interactive LAM tools. As of now this is entirely cosmetic. ") (title "laml-welcome") (form (laml-welcome))) ((kind "manual-page") (description "This function is intended to end a LAML file. It is strongly recommended that any LAML file - in particular XML-in-LAML file - calls end-laml as the last action. Reports on elapsed processing time (currently only in MzScheme and Guile). Checks ID attributes and links (only from XML-in-LAML contexts, via redefine version of this function). A redefined version of end-laml in xml-in-laml.scm - used for xml-in-laml processing - calls this function (in addition to xml-in-laml relevant stuff). ") (title "end-laml") (form (end-laml)) (cross-references (reference "Scheme source file" "end-laml" "laml-ep/laml-1.html#end-laml") (internal-references "related function" "begin-laml") (reference "redefinition in XML-in-LAML" "end-laml" "../lib/xml-in-laml/man/xml-in-laml.html#end-laml"))) ((cross-references (reference "Scheme source file" "credits" "laml-ep/laml-1.html#credits")) (kind "manual-page") (parameters (parameter "system-dk" "The system name in Danish") (parameter "system-eng" "The system name in English") (parameter "system-url" "A URL referring to a WWW description of the system")) (description "Return a credit message to Kurt N\370rmark about system-dk (the Danish name) and system-eng (the English name). As an optional parameter, an URL can be supplied with a link to the credited system. ") (form "(credits system-dk system-eng [system-url])") (title "credits")) ((kind "manual-page") (description "Return the LAML POWER icon with link to the LAML home page. Intended for the footer of LAML generated pages, from which the author wish to acknowledge the use of LAML. The LAML icon is located in the directory (string-append (laml-home-url-prefix extra-level) \"images/\"), where extra-level is the optional parameter of the current function. The optional parameter extra-level can be given if the generated HTML files are placed in a different directory than the startup directory. The default value is 0. The optional parameter icon-size can either be small or large. large is the default value. The role of extra-level is the same as in the procedure laml-home-url-prefix. ") (form "(laml-power-icon [extra-level icon-size])") (title "laml-power-icon") (cross-references (reference "Scheme source file" "laml-power-icon" "laml-ep/laml-1.html#laml-power-icon") (internal-references "related procedure" "laml-home-url-prefix"))) ((cross-references (reference "Scheme source file" "laml-shortcut-icon" "laml-ep/laml-1.html#laml-shortcut-icon")) (kind "manual-page") (parameters (parameter "laml-home-url-dir" "A path from the current directory to the LAML home directory. Typically the value of (laml-home-url-prefix).")) (description "Generate a LAML shortcut icon from the current directory (the startup-directory). Shortcut icons are in some browsers shown as a tiny picture in the navigation tool bar, and together with bookmarks. ") (pre-condition "The HTML link mirror function must be defined for this function to work.") (title "laml-shortcut-icon") (form (laml-shortcut-icon laml-home-url-dir))) ((kind "manual-section") (section-title "XML file writing procedures.") (section-body "In this section we have a convenient and versatile function which can be used to write an XML expression in LAML to a text file. ") (section-id "html-file-writing-section")) ((kind "manual-page") (parameters (parameter "mode" "a list with one or more of the symbols raw, pp, prolog, and epilog. Alternatively just one of the symbols pp or raw.") (parameter "xml-clause" "the ast to be written.") (parameter "file-path-with-extension" "the path of the file on which to write. Must include the file extension, typically html. Defaults to the name of the current source file with extension '.html'.")) (description "Write xml-clause (an XML-in-LAML ast) to a text file. Use the character transformation table assigned to the XML language of xml-clause, as availble via the expression (xml-char-transformation-table-in language). This procedure also collects links for later checking, and it expands procedural content items. The full path to the text file can be given by the third, optional parameter, the default value of which is (full-source-path-with-extension \"html\"). Mode may be a symbol (raw or pp), or a list of symbols including one of raw/pp and the symbols prolog and epilog. The latter determines the rendering of the standard prolog and the standard epilog, as defined by the functions standard-prolog and standard-epilog (in this file). If mode is the symbol pp, do pretty print the XML fragment before writing. If mode is raw, just write the xml clause without any kind of pretty printing. As the last action, activate a post processor function on the full file path to the XML target file name. If the file extension of the target file is e, the name of the post processor is (string-append e \"-\" \"process\"). (The post processor may, for instance, be used to transform an XSL-FO to PDF.) ") (form "(write-xml mode xml-clause [file-path-with-extension])") (misc "This procedure is a renamed, XML-in-LAML only version of the procedure write-html") (title "write-xml") (cross-references (reference "Scheme source file" "write-xml" "laml-ep/laml-1.html#write-xml") (internal-references "default target file" "full-source-path-with-extension") (internal-references "prolog and epilog" "standard-prolog" "standard-epilog"))) ((kind "manual-page") (parameters (parameter "ast" "The XML-in-LAML AST to be processed.") (parameter "processing-specs" "A list of processing specifications.") (parameter "file-path" "An absolute file path with or without file extension. The final file extension is determined by the first element of the processing-spec")) (description "Process the ast according to the processing-specs and write the resulting XML files to files determined by file-path. More specifically, the AST is processed once for each processing-spec, by calling write-xml for each processing specification in processing-specs. As part of calling write-xml, the post processing facility may be activated (for instance for processing an XSL-FO file). A processing spec is a list (ext transformer . mode-symbols), where ext is the file extension, transformer is an AST transformation function, and mode-symbols is a list of symbols in the set {pp raw prolog epilog}. ") (title "process-xml") (form (process-xml processing-specs file-path ast)) (cross-references (reference "Scheme source file" "process-xml" "laml-ep/laml-1.html#process-xml") (internal-references "called function" "write-xml"))) ((kind "manual-page") (parameters (parameter "mode" "a list with one or more of the symbols raw, pp, prolog, and epilog. Alternatively just one of the symbols pp or raw.") (parameter "html-clause" "the string or ast to be written") (parameter "file-path-with-extension" "the path of the file on which to write. Must include the file extension, typically html. Defaults to the name of the current source file with extension '.html'.")) (description "Write html-clause (a string or an ast) to a text file. When used on XML-in-LAML asts, this procedure also collects links (for later checking), and it expands procedural content items. The full path to the text file can be given by the third, optional parameter, the default value of which is (full-source-path-with-extension \"html\"). Mode may be a symbol (raw or pp), or a list of symbols including one of raw/pp and the symbols prolog and epilog. The latter determines the rendering of the standard prolog and the standard epilog, as defined by the functions standard-prolog and standard-epilog (in this file). If mode is the symbol pp, do pretty print the HTML fragment before writing. If mode is raw, just write the html clause without any kind of pretty printing. This procedure loads the LAML xml-html-support pretty printing stuff if needed. This procedure works on both the ast based (including XML-in-LAML) and the text based mirrors. In case html-clause is an AST, the tree is processed by an AST rendering function before the file writing takes place. In case hmtl-clause is an XML-in-LAML AST, it is expanded with respect to procedural content items before the writing takes place. There are still a few minor problems with the HTML pretty printer. ") (form "(write-html mode html-clause [file-path-with-extension])") (misc "This procedure is the original, broader version of write-xml.") (title "write-html") (cross-references (reference "Scheme source file" "write-html" "laml-ep/laml-1.html#write-html") (internal-references "default target file" "full-source-path-with-extension") (internal-references "prolog and epilog" "standard-prolog" "standard-epilog"))) ((kind "manual-section") (section-title "The HTML character transformation table.") (section-body "This table is used by the HTML rendering function to transliterate char data to textual contents, as to be shown in a browser. You can use this table to perform transformation of national characters to HTML character entities, and to perform other character transliterations. ") (section-id "char-trans-section")) ((kind "manual-page") (description "A vector of length 256 which transforms character number i to a string. Position number i determines how the (extended) ASCII character i is transformed. Boolean entry #t means 'do not transform'. Boolean entry #f means 'ignore char'. A string entry describes a proper transformation. A char entry describes a proper transformation. An integer entry describes a transformation to the corresponding character number. All other entries are illegal. The table represent the identity transformation (all characters are mapped to the value #t). Use the function set-html-char-transformation-entry! for mutation of individual entries. ") (title "html-char-transformation-table") (form html-char-transformation-table) (cross-references (reference "Scheme source file" "html-char-transformation-table" "laml-ep/laml-1.html#html-char-transformation-table") (internal-references "mutation function" "set-html-char-transformation-entry!"))) ((kind "manual-page") (parameters (parameter "transformation-table" "Typically the vector html-char-transformation-table") (parameter "index" "a number between 0 and 255") (parameter "new-entry" "The new entry, which can be boolean, a string, a character, or an integer. Boolean true means 'Do not transform character'. Boolean false means 'Ignore character' (outputs the empty string). A string means: 'Transform char to the given string'. An integer number means: 'Transform char to the char with the given number'. A character means: 'Transform to the given char'.")) (description "Mutate a html character transformation table at position index. More specifically, put new-entry at position index in the table. The first entry in the table has index 0. ") (title "set-html-char-transformation-entry!") (form (set-html-char-transformation-entry! transformation-table index new-entry)) (cross-references (reference "Scheme source file" "set-html-char-transformation-entry!" "laml-ep/laml-1.html#set-html-char-transformation-entry!") (internal-references "info about table" "html-char-transformation-table"))) ((cross-references (reference "Scheme source file" "html-char-transform" "laml-ep/laml-1.html#html-char-transform")) (kind "manual-page") (parameters (parameter "char" "A character to be transformed.") (parameter "transformation-table" "A character transformation table, which defaults to html-char-transformation-table defined in laml.scm")) (description "Return the transformation of char via a character transformation table. Chararcters outside the range [0..255] are just passed through, in case an extended character set is used. ") (form "(html-char-transform char [transformation-table])") (returns "A string (the transformation of character)") (title "html-char-transform")) ((kind "manual-section") (section-title "R4RS and R5RS Scheme knowledge.") (section-body "The section contains accessor and loading functions to R4RS and R5RS Scheme knowledge files. The Scheme knowledge files are located in the r4rs and the r5rs directories of the full LAML distribution. The r4rs and r5rs directories each hold a HTML version of the Scheme Report. Overall, a Scheme knowledge file is a mapping from syntax/procedure name to an URL in the Scheme Report. More precisely, a Scheme knowledge file is a list of entries, each of which contains the name of a Scheme form, the categorization of the form, and the URL of place, where form is described (in a compact format). Scheme knowledge files have extensions lsp. ") (section-id "scheme-knowledge")) ((cross-references (reference "Scheme source file" "read-scheme-knowledge" "laml-ep/laml-1.html#read-scheme-knowledge")) (kind "manual-page") (parameters (parameter "scheme-version" "either 4 or 5 (integer numbers). Alternatively r4rs or r5rs (symbols).")) (description "Read and the return the list structure for Scheme knowledge of RnRS, where n corresponds to scheme-version (a number). ") (returns "The list structure of Scheme knowledge ") (title "read-scheme-knowledge") (form (read-scheme-knowledge scheme-version))) ((cross-references (reference "Scheme source file" "symbol-of-scheme-knowledge" "laml-ep/laml-1.html#symbol-of-scheme-knowledge")) (kind "manual-page") (description "Selects the name of a scheme knowledge entry. ") (title "symbol-of-scheme-knowledge") (form symbol-of-scheme-knowledge)) ((cross-references (reference "Scheme source file" "category-of-scheme-knowledge" "laml-ep/laml-1.html#category-of-scheme-knowledge")) (kind "manual-page") (description "Selects the category of a scheme knowledge entry. ") (title "category-of-scheme-knowledge") (form category-of-scheme-knowledge)) ((cross-references (reference "Scheme source file" "essentiality-of-scheme-knowledge" "laml-ep/laml-1.html#essentiality-of-scheme-knowledge")) (kind "manual-page") (description "Selects the essentiality of a scheme knowledge entry. ") (title "essentiality-of-scheme-knowledge") (form essentiality-of-scheme-knowledge)) ((cross-references (reference "Scheme source file" "file-number-of-scheme-knowledge" "laml-ep/laml-1.html#file-number-of-scheme-knowledge")) (kind "manual-page") (description "Selects the HTML file number of a scheme knowledge entry. ") (title "file-number-of-scheme-knowledge") (form file-number-of-scheme-knowledge)) ((cross-references (reference "Scheme source file" "anchor-name-of-scheme-knowledge" "laml-ep/laml-1.html#anchor-name-of-scheme-knowledge")) (kind "manual-page") (description "Selects the anchor name of a scheme knowledge entry. ") (title "anchor-name-of-scheme-knowledge") (form anchor-name-of-scheme-knowledge)) ((cross-references (reference "Scheme source file" "url-suffix-of-scheme-knowledge" "laml-ep/laml-1.html#url-suffix-of-scheme-knowledge")) (kind "manual-page") (parameters (parameter "an" "entry in a Scheme knowledge file.") (parameter "scheme-version" "either 4 or 5 (integer numbers). Alternatively r4rs or r5rs (symbols).")) (description "Return the suffix part of an URL to an RnRS Scheme HTML file. ") (pre-condition "The Scheme knowledge of RnRS corresponding to n = scheme-version must be read on beforehand, and the entry must be Scheme knowledge of an RnRS entry.") (title "url-suffix-of-scheme-knowledge") (form (url-suffix-of-scheme-knowledge entry scheme-version))) ((kind "manual-section") (section-title "Miscellaneous.") (section-body "")) ((kind "manual-page") (parameters (parameter "abstract-clause" "A manual abstract form.")) (description "The LAML Manual/SchemeDoc standard settings. The list returned is to be a constituent of laml-front-matters element of a LAML SchemeDoc manual. ") (form "(kn-manual-settings [abstract-clause])") (misc "I usually keep this and similar functions in my .laml file. A version in the .laml file will overwrite this function.") (returns "A list of attributes and constituents of laml-front-matters.") (title "kn-manual-settings") (cross-references (reference "Scheme source file" "kn-manual-settings" "laml-ep/laml-1.html#kn-manual-settings") (reference "manual mirror function" "laml-front-matters" "../styles/xml-in-laml/manual/man/manual.html#laml-front-matters") (internal-references "category" "ref1" "ref2"))) ((cross-references (reference "Scheme source file" "kn-xml-in-laml" "laml-ep/laml-1.html#kn-xml-in-laml")) (kind "manual-page") (parameters (parameter "with-icon" "A boolean value which enables display of the LAML icon.")) (description "The LAML author's name and address information. ") (form "(kn-xml-in-laml [with-icon])") (misc "I usually keep this and similar functions in my .laml file. A version in the .laml file will overwrite this function.") (title "kn-xml-in-laml")) ((kind "manual-page") (description "A collection of scheme-source-linking-manual clauses which provides for linking from Scheme Sources to LAML manuals. The boolean SchemeDoc attribute named scheme-source-linking controls the generation of Scheme source linking from SchemeDoc manuals. ") (title "laml-library-source-linking") (form (laml-library-source-linking)) (cross-references (reference "Scheme source file" "laml-library-source-linking" "laml-ep/laml-1.html#laml-library-source-linking") (reference "SchemeDoc" "scheme-source-linking-manual" "../styles/xml-in-laml/manual/man/manual.html#scheme-source-linking-manual") (internal-references "Used by" "kn-manual-settings"))))