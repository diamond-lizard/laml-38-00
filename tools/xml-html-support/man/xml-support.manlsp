(((title . "Reference Manual of the XML parser and pretty printer for LAML") (author (ast "span" ("Kurt N\370rmark" #t " " #t (char-ref copy)) () double xhtml10-transitional ()) #t "normark@cs.aau.dk") (affiliation "Department of Computer Science," #t "Aalborg University," #t "Denmark.") (abstract . " This is a simple, non-validating XML parser for LAML together with XML pretty printing support. As of the current version, the parser is not complete. Nevertheless, it is useful tool for parsing most everyday XML documents to a Lisp data structure. <p> Given a well-formed XML document this parser returns a Lisp tree structure that represents the parse tree of the XML document. The parser handles start tags, end tags, and empty tags (in this parser called start-end tags). Entities and their declarations are not handled at all.<p> The top level functions are xml-parse and xml-parse-file. The xml-parser can be loaded as a library as well.<p> There exists <a href=\"../doc/xml-parser.html\" target=\"_top\">elucidative documentation</a> of this parser. See also <a href=\"html-support.html\">the HTML parsing and pretty printing support</a>, which is built on top of the XML tools, and the illustrative  <a href=\"../../../examples/xml-parser-and-pretty-printer/index.html\">examples </a>  of the XML parser and pretty printer.<p> This tool assumes that <kbd> laml.scm </kbd> and the general library are loaded.  The tool loads the collect-skip and the file-read libraries.<p> The typographical rebreaking and re-indenting of running text is still missing.<p> The LAML interactive tool procedures <kbd> xml-pp </kbd> and <kbd> xml-parse </kbd> in <kbd> laml.scm </kbd> are convenient top-level pretty printing and parse procedures respectively.<p> Please notice that this is not a production quality parser and pretty printer! It is currently used for internal purposes.<p> From LAML version 20, the XML pretty printing in lib/xml-in-laml/xml-in-laml.scm replaces the XML pretty printing in this library. ") (scheme-source-file . "/user/normark/scheme/tools/xml-html-support/xml-support.scm/") (laml-resource . "true") (documentation-commenting-style . not-provided) (default-attribute-explanation . not-provided) (source-destination-delta . not-provided) (css-prestylesheet . "compact") (css-stylesheet . "argentina") (css-stylesheet-copying . "true") (make-dtd-manual-template . not-provided) (keep-syntactical-comment-file . not-provided) (manual-destination-name . not-provided) (mirror-names-defined . not-provided) (mirror-name-prefix . not-provided) (attribute-sorting . not-provided) (scheme-source-linking . "true")) ((kind "manual-section") (section-title "The format of the parse tree.") (section-body "A <em>parse tree</em> T produced by this tool is of the form <pre> (tree N ST1 ST2 ... STn) </pre> where STi, i=1..n are parse trees (recursively) and N is a node (see below). <p> A leaf node N may be of the form <pre> (tree N) </pre> or just N if N is a string (corresponding to textual contents) or an empty tag (a tag without contents).<p> An <em>inner node</em> of a parse tree corresponds to a tag (an element) with contents. Such a node is represented by the following 'tag structure': <pre> (tag kind tag-name . attr-info) </pre> tag is a symbol (for tagging). kind is either start or start-end (both symbols). tag-name is a string. Attr-info is the attribute on property list format.<p> A <em>terminal node</em> may be a start-end node, a comment node or just a contents string. End tags are not represented in the parse tree.<p> Here is an example of a start-end node (empty node) with two properties: <pre> (tag start-end \"title\" role \"xxx\" size \"5\") </pre> Comments are represented as comment nodes of the form <pre> (comment comment-string) </pre> <p> Declaration nodes of the form <pre> (declaration kind value) </pre> are also possible. They are for instance used for document type (???) information in HTML. Finally nodes of the form <pre> (xml-declaration attribute-property-list) </pre> are supported.")) ((kind "manual-section") (section-title "Constants.") (section-body "Constants that affect the working of the parser. ")) ((cross-references (reference "Scheme source file" "xml-parser-preserve-white-space" "xml-support-ep/xml-support-1.html#xml-parser-preserve-white-space")) (kind "manual-page") (description "A constant that controls if white space is uniformly preserved by the XML parser. ") (title "xml-parser-preserve-white-space") (form xml-parser-preserve-white-space)) ((cross-references (reference "Scheme source file" "white-space-preserving-tags" "xml-support-ep/xml-support-1.html#white-space-preserving-tags")) (kind "manual-page") (description "A list of tag names for which white space is preserved. A list of strings. No angle brackets ('<' or '>')should be given in the names. Must be assigned to the appropriate value before a parse function is called. ") (title "white-space-preserving-tags") (form white-space-preserving-tags)) ((kind "manual-section") (section-title "Native low-level level parser functions.") (section-body "The top level parser functions in this section deliver specialized low level parse trees (in some ad hoc list structure).")) ((cross-references (reference "Scheme source file" "parse-xml-file" "xml-support-ep/xml-support-1.html#parse-xml-file")) (kind "manual-page") (description "Top level parse function which takes an XML file name as input, and delivers a parse tree on out-file-path. file-path is a file path (relative or absolute) with or without an extension. The default extension is xml. The parse tree is written on the file out-file-path. ") (title "parse-xml-file") (form (parse-xml-file in-file-path out-file-path))) ((cross-references (reference "Scheme source file" "parse-xml" "xml-support-ep/xml-support-1.html#parse-xml")) (kind "manual-page") (description "This function parses a file and returns the parse tree. file-path is a file path (relative or absolute) without any extension. ") (returns "The parse tree in the original, low level parse tree format (a list structure)") (title "parse-xml") (form (parse-xml file-path))) ((cross-references (reference "Scheme source file" "parse-xml-string" "xml-support-ep/xml-support-1.html#parse-xml-string")) (kind "manual-page") (description "This function parses a string with XML contents and returns the parse tree. xml-string is a string with xml contents ") (returns "The parse tree in the original, low level parse tree format (a list structure)") (title "parse-xml-string") (form (parse-xml-string xml-string))) ((kind "manual-section") (section-title "AST-level parser functions.") (section-body "The top level parser functions in this section deliver XML-in-LAML abstract syntax trees. These trees are much more useful than the low-level parse trees delivered by the functions in the previous section.")) ((cross-references (reference "Scheme source file" "parse-xml-file-to-ast" "xml-support-ep/xml-support-1.html#parse-xml-file-to-ast")) (kind "manual-page") (parameters (parameter "in-file-path" "a file path (relative or absolute) with or without an extension. The default extension is xml.") (parameter "out-file-path" "path the output file.") (parameter "xml-language" "the name of the XML language in LAML, to which the resulting AST belongs. A symbol.")) (description "Top level parse function which takes an XML file name as input, and delivers an XML-in-LAML AST on out-file-path. The AST is written on the file out-file-path. ") (title "parse-xml-file-to-ast") (form (parse-xml-file-to-ast in-file-path out-file-path xml-language))) ((cross-references (reference "Scheme source file" "parse-xml-to-ast" "xml-support-ep/xml-support-1.html#parse-xml-to-ast")) (kind "manual-page") (parameters (parameter "file-path" "a file path (relative or absolute) without any extension. ") (parameter "xml-language" "the name of the XML language in LAML, to which the resulting AST belongs. A symbol.")) (description "This function parses an XML file and returns the corresponding XML-in-LAML AST. ") (returns "An XML-in-LAML AST.") (title "parse-xml-to-ast") (form (parse-xml-to-ast file-path xml-language))) ((cross-references (reference "Scheme source file" "parse-xml-string-to-ast" "xml-support-ep/xml-support-1.html#parse-xml-string-to-ast")) (kind "manual-page") (parameters (parameter "xml-string" "a string with xml contents.") (parameter "xml-language" "the name of the XML language in LAML, to which the resulting AST belongs. A symbol.")) (description "This function parses a string with XML contents and returns an XML-in-LAML AST. ") (returns "An XML-in-LAML AST.") (title "parse-xml-string-to-ast") (form (parse-xml-string-to-ast xml-string xml-language))) ((cross-references (reference "Scheme source file" "resulting-parse-tree" "xml-support-ep/xml-support-1.html#resulting-parse-tree")) (kind "manual-page") (description "A global varible holding the latest produced parse tree ") (title "resulting-parse-tree") (form resulting-parse-tree)) ((kind "manual-section") (section-title "Utility parser functions.") (section-body " The functions in this section are all miscelaneous and utility functions of the parser.")) ((cross-references (reference "Scheme source file" "traverse-and-collect-from-parse-tree" "xml-support-ep/xml-support-1.html#traverse-and-collect-from-parse-tree")) (kind "manual-page") (examples (example "(traverse-and-collect-from-parse-tree resulting-parse-tree (is-tag-of-kind? 'a) parse-tree-to-laml-expression) ")) (description "Traverse the parse tree, tree, and return a list of result-transformed nodes that satisfy the node-interesting? predicate in the parse tree. In other words, apply the node-interesting? predicate to all subtrees of the tree during the traversal, and return the result-transformed list of subtrees. Both the functions node-interesting? and result-transformer are applied on trees and subtrees. ") (title "traverse-and-collect-from-parse-tree") (form (traverse-and-collect-from-parse-tree tree node-interesting? result-transformer))) ((cross-references (reference "Scheme source file" "collect-attributes-in-tree" "xml-support-ep/xml-support-1.html#collect-attributes-in-tree")) (kind "manual-page") (examples (example "(collect-attributes-in-tree tree 'href) ")) (description "Traverse the parse tree, tree, and return the list all attribute values of the attribute attr-key found in the tree. ") (title "collect-attributes-in-tree") (form (collect-attributes-in-tree tree attr-key))) ((kind "manual-page") (description "Return a predicate which tests whether a subtree or node is of tag-kind (a symbol or string). This function is a useful second parameter to traverse-and-collect-from-parse-tree. ") (title "is-tag-of-kind?") (form (is-tag-of-kind? tag-kind)) (cross-references (reference "Scheme source file" "is-tag-of-kind?" "xml-support-ep/xml-support-1.html#is-tag-of-kind?") (internal-references "related function" "traverse-and-collect-from-parse-tree"))) ((cross-references (reference "Scheme source file" "parser-status" "xml-support-ep/xml-support-1.html#parser-status")) (kind "manual-page") (description "Display parser status in case of error in the parse process. ") (title "parser-status") (form (parser-status))) ((kind "manual-section") (section-title "Top level XML pretty printing functions.") (section-body "")) ((cross-references (reference "Scheme source file" "pretty-print-xml-parse-tree-file" "xml-support-ep/xml-support-1.html#pretty-print-xml-parse-tree-file")) (kind "manual-page") (description "Pretty prints the XML parse tree (Lisp file) in in-file-path. Outputs the pretty printed result in out-file-path, which defaults to in-file-path if not explicitly passed. ") (form "(pretty-print-xml-parse-tree-file in-file-path [out-file-path])") (misc "For XML-in-LAML ASTs use pretty-render-to-output-port instead of this function") (title "pretty-print-xml-parse-tree-file")) ((cross-references (reference "Scheme source file" "pretty-print-xml-parse-tree" "xml-support-ep/xml-support-1.html#pretty-print-xml-parse-tree")) (kind "manual-page") (description "Pretty prints a HTML parse tree, and return the result as a string. ") (misc "For XML-in-LAML ASTs use pretty-xml-render instead of this function") (title "pretty-print-xml-parse-tree") (form (pretty-print-xml-parse-tree parse-tree))) ((kind "manual-section") (section-title "Variables that control the pretty printing.") (section-body "These variables apply for both HTML and XML.")) ((cross-references (reference "Scheme source file" "indentation-delta" "xml-support-ep/xml-support-1.html#indentation-delta")) (kind "manual-page") (description "An integer which gives the level of indentation ") (title "indentation-delta") (form indentation-delta)) ((cross-references (reference "Scheme source file" "use-single-lining" "xml-support-ep/xml-support-1.html#use-single-lining")) (kind "manual-page") (description "A boolean which controls the application of single line pretty printing. If true, the pretty printer will pretty print short list forms on a single line ") (title "use-single-lining") (form use-single-lining)) ((cross-references (reference "Scheme source file" "prefered-maximum-width" "xml-support-ep/xml-support-1.html#prefered-maximum-width")) (kind "manual-page") (description "An integer that expresses the preferred maximum column width ") (title "prefered-maximum-width") (form prefered-maximum-width)) ((kind "manual-section") (section-title "Parse tree conversions.") (section-body "In this section we provide a number of conversion functions that work on parse trees.")) ((kind "manual-page") (parameters (parameter "tree" "an XML or HTML parse tree") (parameter "output-file" "The name of the file on which to write the LAML expression. Can be full path. Must include extension.")) (description "Transform an XML or HTML parse tree to a similar surface LAML expression on output-file. This function accept parse tree rooted by the symbols html-tree, xml-tree, as well the symbol tree. ") (misc "When the resulting file is LAML processed, the LAML file will write the a LAML file, say f.laml, to f.html in the same directory as the laml file.") (title "parse-tree-to-laml") (form (parse-tree-to-laml tree output-file)) (cross-references (reference "Scheme source file" "parse-tree-to-laml" "xml-support-ep/xml-support-1.html#parse-tree-to-laml") (reference "laml.scm function" "html-to-laml" "../../../man/laml.html#html-to-laml"))) ((kind "manual-page") (parameters (parameter "pt" "The parse tree") (parameter "language" "The name of the XML language, such as xhtml10-transitional. A symbol.")) (description "Convert a HTML/XML parse tree to a LAML abstract syntax tree in language. The returned LAML abstract syntax tree will have positive spacing (which means that a white space is represented explicitly by the #t value). This function accept parse tree rooted by the symbols html-tree, xml-tree, as well the symbol tree. Recall that the syntax trees are used as the internal format by the validating mirrors of LAML. ") (title "parse-tree-to-ast") (form (parse-tree-to-ast pt language)) (cross-references (reference "Scheme source file" "parse-tree-to-ast" "xml-support-ep/xml-support-1.html#parse-tree-to-ast") (internal-references "related function" "parse-tree-to-element-structure"))) ((kind "manual-page") (description "Convert a HTML/XML parse tree to an element structure ala LENO. This function accept parse tree rooted by the symbols html-tree, xml-tree, as well the symbol tree. Modelled after parse-tree-to-ast. ") (title "parse-tree-to-element-structure") (form (parse-tree-to-element-structure pt)) (cross-references (reference "Scheme source file" "parse-tree-to-element-structure" "xml-support-ep/xml-support-1.html#parse-tree-to-element-structure") (internal-references "related function" "parse-tree-to-ast"))))