(load (string-append laml-dir "laml.scm"))
(style "simple-html4.01-transitional-validating")

(begin-laml)

(define  index-color (make-color 255 255 191))

(define (entry x) (li (p x)))

(define language-preference 'english)

(generic-page
  "LAML Background"
  (con
   (laml-top-banner)
    (h 1 "LAML Background")
 
   (con-par 
   (con "I have used Scheme for approximately 18 years. As such it was natural for me to use
    Scheme for CGI programming purposes a few of years ago.
    In order to use Scheme for CGI programming
    it was necessary to generate text with HTML markup. Therefore I implemented
    a simple library of functions, which helped me do so. I only implemented
    the functions that I actually needed. Concretely, I wrote one function for each HTML tag, in order
    to be able to mirror HTML as close as possible. This is today the " (a-tag "../lib/html.scm" "html.scm") " library
    (" _ (a-tag "../lib/man/html.html" "manual") _ "), which now is completely obsolete. However, a number of tools still rely on this 
    library.")

   (con "It soon became clear that this ad hoc approach was inappropriate - and almost
    never ending. Therefore I generated a set of functions given a list of single tags
    and a list of double tags. This is the " (a-tag "../lib/html-v1.scm" "html-v1.scm") " library (" 
    (a-tag "../lib/man/html-v1.html" "manual") ") - also now completely obsolete.")

   "It turned out to be difficult to tune the list of HTML mirror functions to be in accord
    with the HTML standard - at that time HTML4.0. The next natural step was therefore to extract
    the information about HTML from the Document Type Definition (DTD). I searched for a good
    and convenient representation of the HTML DTD, but could not find one. As a consequence
    I wrote an ad hoc parser via which I was able to extract all information about HTML4.0,
    as well as other versions of course. On this ground I constructed an exact mirror of HTML in Scheme,
    which included attribute checking, assured well-formedness, but no document validation."

   (con "As the last development I have fine tuned this mirror to validate the document. I.e., while generating
    the HTML code the document composition of is checked against the DTD. If there are errors they are 
    reported as warnings (or fatal errors, if you so desire). In order to do the validation,
    we work with an internal document represented as a syntax tree (in terms
    of a nested list structure). We transform this tree to an HTML string by a tree traversal (using the" (kbd "render") "function),
    and we are careful not to generate a lot of garbage during this process.")

   "As the latest development we have established the XML-in-LAML facility, which makes it possible
    to create mirrors of XML languages in Scheme. Several XML language can co-exist. 
    All three XHTML languages (strict, transitional, frameset), SVG, and LENO (our own language
    for presentation teaching material) use the XML-in-LAML stuff. From version 20, the generation of the validation predicates
    of the XML mirror functions is fully automated."

   "Soon it became clear that the HTML mirror functions can be used directly
    when we write static HTML files. Thus instead of using HTML or XML directly, we use
    the Scheme mirror functions. (Of course many people use WYSIWYG editors, but
    these are complicted in their own sense, and you are not in 100% control. These are not 
    for programmers...) Thus, instead of writing:"

   (pre (html-protect (read-text-file "includes/semi-1")))

   "we write something like"

   (pre (read-text-file "includes/semi-4"))

   (con  (kbd "point") " is not a standard tag, but a function we have programmed in Scheme.
   The point function can also be generated by the XML-in-LAML mirror generation tool.")

   "For people who like Lisp this is great. We are able to make and use our own tags,
   just like in XML.
   All the functions corresponding to HTML elements are part of the LAML libraries.
   By executing the Scheme program we return a text in pure HTML. (Or more correctly, we return
   a data structure - a list that represents a syntax tree - which can be rendered as as HTML).
   Such a transformation is, by the way, also what happens on most XML documents today,
   by means of XSL for instance. Using Scheme we do not
   need grammars or DTDs. We are free to form the abstractions we like, and it is
   very easy and straightforward for a trained Lisp programmer. We can mirror
   XML as closely as we want or need. We can also just form the abstraction we find most attractive."

   (con "Now, the road is clear for definition of LAML styles for various document styles.
   I have made a variety of such styles for various purposes, such as course notes
   and home pages. The manuals referred above is also written using a LAML style. 
   In fact, the manuals are extracted from 'doc comments' in Scheme programs, and as such
   made 'automatically'. 
   And " (a-tag "laml-motivation.laml" "this file") " is written in LAML, of course.
   I never write a plain HTML file anymore.
   By the way, I wrote a simple " (a-tag "../styles/article/man/article.html" "article style") " in less than half a day mirroring
   the few LaTeX commands I use in my papers. This style is not yet released...")

   "The main advantages of using LAML and Scheme instead of HTML/XML are the following:"

   (ol (list

     (entry "It is based on functional programming techniques. 
             It is simply the wrong way to emit a separate start, end tag and other fragments via
             print statements.")

     (entry "Programmed solutions are available anywhere in a document, and any time in the writing
             process.")

     (entry "You can abstract from details by writing and applying Scheme functions")

     (entry (con "You can process a LAML file with less efforts than saving it on a file.
             Using the LAML system from Emacs " (b "C-o") " saves and processes the laml buffer. A buffer
             with the file " (kbd "f.laml") " generates the file " (kbd "f.html") ". In order to
             save " (kbd "f.laml") " you usually write " (b "C-x C-s") "."))

     (entry "When you are used to Lisp expressions you can navigate over balanced tags/expressions
            very easily using your favorite Lisp editor. This takes an advanced HTML editor
            to do so...")

     (entry "A LAML document is a program, which generates a low level HTML equivalent when it is executed.
             This provides for ultimative flexibility for programmers. Other people can just
             use the Netscape Gold Editor, or a similarly user friendly editor...")
   ))

   (con "We find it important to provide access to XML and HTML elements via functions, not macros or just
   list data forms. The reason is that we want to author our XML/HTML documents in a functional
   programming context, where especially higher-order functions are attractive. It is only possible to
   do this in a flexible way if all the elements of the markup languages are represented as functions.
   You should read the paper 'Web Programming in Scheme with LAML' (" _ 
   (a 'href "http://www.cs.auc.dk/~normark/laml/papers/web-programming-laml.pdf" "pdf") _ ") if you are interested 
   to learn more.")

   (con "Good so far. But there is a problem, namely the fact that all text have to be strings
   within string quotes. In practice, you will need to pass many small strings to 
   HTML mirror functions or your own functions. It turns out that we can alleviate the
   problem of writing such strings via good editor support. First, just write the
   string without markup. After that apply the markup using a special editor command
   called " (b "embed")_ ", which splits the string in parts, and embeds the selected string
   into a Lisp function calling form. If needed, the " (b "embed") " function can also take care of 
   surrounding string concatenation. The reverse " (b "unembed") " command is also available.
   A " (b "split") " and " (b "unsplit") " breaks an existing string in two parts, and again it takes care of surrounding string concatenation 
   if needed. These command are all available via the LAML major mode in Emacs.
   We have used the commands heavily on " (a-tag "laml-motivation.laml" "this document") _ ", for instance.
   It turns out that using these editor commands during the document
   creation process, you almost never experience
   errors due to malformed Lisp expressions in your document.")

;   (con "It has become clear that the " (a-tag "../lib/man/html.html" "html.scm") 
;    " and " (a-tag "../lib/man/html-v1.html" "html-v1.scm") " libraries are not good enough
;    as the basic mirror of HTML in Scheme. Therefore we made a new foundation for
;    LAML, which is based on a parsed HTML (version 4, loose) DTD:")
; 
;   (ul (list
; 
;     (entry "The parsing of the DTD results in the DTD represented as a Lisp structures.
;             I wrote a simple ad hoc parser, which can process DTDs for HTML - nothing less
;             and not very much more.")
;     (entry (con "The Lisp version of the grammar is used in a generation process, which
;             gives the library files " (a-tag "../lib/html4.0-loose/basis.scm" "basis.scm") " (" 
;             (a-tag "../lib/html4.0-loose/man/basis.html" "manual") ") 
;             and " (a-tag "../lib/html4.0-loose/surface.scm" "surface.scm") " (" 
;             (a-tag "../lib/html4.0-loose/man/surface.html" "manual") "). These already exists,
;             and you can use them. They include complete attribute check, but currently no
;             'validation on the fly'. The " (a-tag "../lib/html4.0-loose/convenience.scm" "convenience.scm") " "
;             "(" (a-tag "../lib/html4.0-loose/man/convenience.html" "manual") ")"
;             " library includes the functionality
;             of the original html library. The basic, surface and convenience libraries form a strong
;             basis for all future LAML work."))
;   ))

;  "The basic, surface and convenience libraries have now replace the earlier HTML mirrors, and
;   all new LAML development should be based of them."

  (con "If you are a Lisp programmer I am confident that you also will enjoy making 
   HTML and XML-like work in Scheme. There are other programmatic alternatives around than
   Scheme, typically based on functional langauges with emphasis on strong typing.
   Types can - to some degree - be used to ensure grammatical correctness of your documents. I feel the LAML work
   is more pragmatic or more flexible. This boils down to Lisp vs. languages in the more theoretical
   areas of Computer Science.")
  
  (con "For further information you can consult the the 
   papers I have written, see the " (a-tag "http://www.cs.auc.dk/~normark/laml" "LAML Home page") _ "."
   "The" (a 'href "../tutorial/index.html" "LAML tutorial") "is also a good possibility.")

  (kn)

  (p)

  (laml-power-icon)

  ))
  index-color black blue blue
)





